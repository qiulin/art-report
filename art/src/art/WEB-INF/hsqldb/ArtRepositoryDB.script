SET DATABASE UNIQUE NAME HSQLDB2FF310B0E8
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE FALSE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL TRANSLATE TTI TYPES TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL NULLS FIRST TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET DATABASE SQL LONGVAR IS LOB FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET FILES WRITE DELAY 20
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 1
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 200
CREATE USER ART PASSWORD DIGEST 'cf9cae9dd280e888c22ab61f3fa946dd'
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.ART_USERS(USERNAME VARCHAR(15) NOT NULL PRIMARY KEY,PASSWORD VARCHAR(200) NOT NULL,EMAIL VARCHAR(40),FULL_NAME VARCHAR(40),UPDATE_DATE DATE,OTH1 VARCHAR(20),DEFAULT_OBJECT_GROUP INTEGER,CAN_CHANGE_PASSWORD VARCHAR(1),ADMIN_LEVEL INTEGER,ACTIVE_STATUS VARCHAR(1),HASHING_ALGORITHM VARCHAR(20))
CREATE MEMORY TABLE PUBLIC.ART_ADMIN_PRIVILEGES(USERNAME VARCHAR(15) NOT NULL,PRIVILEGE VARCHAR(4) NOT NULL,VALUE_ID INTEGER NOT NULL,PRIMARY KEY(USERNAME,PRIVILEGE,VALUE_ID))
CREATE MEMORY TABLE PUBLIC.ART_USER_QUERIES(USERNAME VARCHAR(15) NOT NULL,QUERY_ID INTEGER NOT NULL,CNT1 INTEGER,UPDATE_DATE DATE,OTH1 VARCHAR(20),ART_FLAG VARCHAR(1),PRIMARY KEY(USERNAME,QUERY_ID))
CREATE MEMORY TABLE PUBLIC.ART_USER_QUERY_GROUPS(USERNAME VARCHAR(15) NOT NULL,QUERY_GROUP_ID INTEGER NOT NULL,CNT1 INTEGER,NUM1 DOUBLE,OTH1 VARCHAR(20),ART_FLAG VARCHAR(1),PRIMARY KEY(USERNAME,QUERY_GROUP_ID))
CREATE MEMORY TABLE PUBLIC.ART_QUERY_GROUPS(QUERY_GROUP_ID INTEGER NOT NULL PRIMARY KEY,CHILD_GROUP_ID INTEGER,NAME VARCHAR(25) NOT NULL,DESCRIPTION VARCHAR(60) NOT NULL,CNT1 INTEGER,NUM1 DOUBLE,OTH1 VARCHAR(20),ART_FLAG VARCHAR(1))
CREATE MEMORY TABLE PUBLIC.ART_QUERIES(QUERY_GROUP_ID INTEGER NOT NULL,QUERY_ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(25) NOT NULL,SHORT_DESCRIPTION VARCHAR(254) NOT NULL,DESCRIPTION VARCHAR(2000) NOT NULL,DATABASE_ID INTEGER NOT NULL,UPDATE_DATE DATE,TEMPLATE VARCHAR(100),XMLA_URL VARCHAR(300),XMLA_DATASOURCE VARCHAR(50),XMLA_CATALOG VARCHAR(50),X_AXIS_LABEL VARCHAR(2000),Y_AXIS_LABEL VARCHAR(50),GRAPH_OPTIONS VARCHAR(200),QUERY_TYPE INTEGER,CONTACT_PERSON VARCHAR(20),ACTIVE_STATUS VARCHAR(1),USES_RULES VARCHAR(1),XMLA_USERNAME VARCHAR(50),XMLA_PASSWORD VARCHAR(50),SHOW_PARAMETERS VARCHAR(1))
CREATE MEMORY TABLE PUBLIC.ART_QUERY_FIELDS(QUERY_ID INTEGER NOT NULL,FIELD_POSITION INTEGER NOT NULL,NAME VARCHAR(25) NOT NULL,SHORT_DESCRIPTION VARCHAR(40) NOT NULL,DESCRIPTION VARCHAR(120) NOT NULL,DEFAULT_VALUE VARCHAR(80),EXACT_MATCH_FLAG VARCHAR(1),QUERY_DATABASE_FLAG VARCHAR(1),UPDATE_DATE DATE,DRILLDOWN_COLUMN INTEGER,CHAINED_VALUE_POSITION INTEGER,USE_LOV VARCHAR(1),PARAM_TYPE VARCHAR(1),PARAM_LABEL VARCHAR(55),APPLY_RULES_TO_LOV VARCHAR(1),LOV_QUERY_ID INTEGER,CHAINED_PARAM_POSITION INTEGER,PARAM_DATA_TYPE VARCHAR(15),DIRECT_SUBSTITUTION VARCHAR(1),PRIMARY KEY(QUERY_ID,FIELD_POSITION))
CREATE INDEX QUERY_FIELDS_INDX ON PUBLIC.ART_QUERY_FIELDS(QUERY_ID)
CREATE MEMORY TABLE PUBLIC.ART_ALL_SOURCES(OBJECT_ID INTEGER NOT NULL,LINE_NUMBER INTEGER NOT NULL,SOURCE_INFO VARCHAR(4000),PRIMARY KEY(OBJECT_ID,LINE_NUMBER))
CREATE INDEX ALL_SOURCES_INDX ON PUBLIC.ART_ALL_SOURCES(OBJECT_ID)
CREATE MEMORY TABLE PUBLIC.ART_QUERY_RULES(QUERY_ID INTEGER NOT NULL,FIELD_NAME VARCHAR(40) NOT NULL,RULE_NAME VARCHAR(15) NOT NULL,FIELD_DATA_TYPE VARCHAR(15),PRIMARY KEY(QUERY_ID,RULE_NAME))
CREATE MEMORY TABLE PUBLIC.ART_USER_RULES(USERNAME VARCHAR(15) NOT NULL,RULE_NAME VARCHAR(15) NOT NULL,RULE_VALUE VARCHAR(25),RULE_TYPE VARCHAR(6))
CREATE INDEX USER_RULES_INDX ON PUBLIC.ART_USER_RULES(USERNAME,RULE_NAME)
CREATE MEMORY TABLE PUBLIC.ART_RULES(RULE_NAME VARCHAR(15) NOT NULL PRIMARY KEY,SHORT_DESCRIPTION VARCHAR(40) NOT NULL,TYPE VARCHAR(6))
CREATE MEMORY TABLE PUBLIC.ART_DATABASES(DATABASE_ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(25) NOT NULL,DRIVER VARCHAR(200) NOT NULL,URL VARCHAR(2000) NOT NULL,USERNAME VARCHAR(25) NOT NULL,PASSWORD VARCHAR(40) NOT NULL,UPDATE_DATE DATE,ART_FLAG VARCHAR(1),POOL_TIMEOUT INTEGER,TEST_SQL VARCHAR(60))
CREATE MEMORY TABLE PUBLIC.ART_JOBS(JOB_ID INTEGER NOT NULL PRIMARY KEY,QUERY_ID INTEGER NOT NULL,USERNAME VARCHAR(15) NOT NULL,OUTPUT_FORMAT VARCHAR(15) NOT NULL,MAIL_TOS VARCHAR(254),MAIL_FROM VARCHAR(80),SUBJECT VARCHAR(254),MESSAGE VARCHAR(4000),LAST_FILE_NAME VARCHAR(4000),LAST_START_DATE TIMESTAMP,LAST_END_DATE TIMESTAMP,OTH1 VARCHAR(20),NEXT_RUN_DATE TIMESTAMP,START_DATE DATE,END_DATE DATE,MIGRATED_TO_QUARTZ VARCHAR(1),ALLOW_SHARING VARCHAR(1),ALLOW_SPLITTING VARCHAR(1),CACHED_TABLE_NAME VARCHAR(30),JOB_NAME VARCHAR(50),JOB_TYPE INTEGER,ACTIVE_STATUS VARCHAR(1),ENABLE_AUDIT VARCHAR(1),JOB_MINUTE VARCHAR(100),JOB_HOUR VARCHAR(100),JOB_DAY VARCHAR(100),JOB_MONTH VARCHAR(100),JOB_WEEKDAY VARCHAR(100),MAIL_CC VARCHAR(254),MAIL_BCC VARCHAR(254),RECIPIENTS_QUERY_ID INTEGER)
CREATE INDEX JOBS_INDX ON PUBLIC.ART_JOBS(USERNAME)
CREATE MEMORY TABLE PUBLIC.ART_JOBS_PARAMETERS(JOB_ID INTEGER NOT NULL,PARAM_TYPE CHARACTER(1),PARAM_NAME VARCHAR(60),PARAM_VALUE VARCHAR(60))
CREATE INDEX JOBS_PARAMS_INDX ON PUBLIC.ART_JOBS_PARAMETERS(JOB_ID)
CREATE MEMORY TABLE PUBLIC.ART_JOBS_AUDIT(JOB_ID INTEGER NOT NULL,LOG_TIMESTAMP TIMESTAMP,JOB_AUDIT_KEY VARCHAR(100),START_DATE TIMESTAMP,END_DATE TIMESTAMP,USERNAME VARCHAR(15),JOB_ACTION VARCHAR(1))
CREATE INDEX JOBS_AUDIT_INDX ON PUBLIC.ART_JOBS_AUDIT(JOB_ID)
CREATE MEMORY TABLE PUBLIC.ART_LOGS(UPDATE_TIME TIMESTAMP NOT NULL,USERNAME VARCHAR(15) NOT NULL,IP VARCHAR(15),OBJECT_ID INTEGER,TOTAL_TIME INTEGER,FETCH_TIME INTEGER,MESSAGE VARCHAR(4000),LOG_TYPE VARCHAR(15))
CREATE MEMORY TABLE PUBLIC.ART_SHARED_JOBS(JOB_ID INTEGER NOT NULL,USERNAME VARCHAR(15) NOT NULL,LAST_FILE_NAME VARCHAR(4000),LAST_START_DATE TIMESTAMP,LAST_END_DATE TIMESTAMP,USER_GROUP_ID INTEGER,PRIMARY KEY(JOB_ID,USERNAME))
CREATE MEMORY TABLE PUBLIC.ART_JOB_SCHEDULES(SCHEDULE_NAME VARCHAR(50) NOT NULL PRIMARY KEY,JOB_MINUTE VARCHAR(100),JOB_HOUR VARCHAR(100),JOB_DAY VARCHAR(100),JOB_MONTH VARCHAR(100),JOB_WEEKDAY VARCHAR(100))
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUPS(USER_GROUP_ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(30) NOT NULL,DESCRIPTION VARCHAR(50),DEFAULT_OBJECT_GROUP INTEGER)
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUP_ASSIGNMENT(USERNAME VARCHAR(15) NOT NULL,USER_GROUP_ID INTEGER NOT NULL,PRIMARY KEY(USERNAME,USER_GROUP_ID))
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUP_QUERIES(USER_GROUP_ID INTEGER NOT NULL,QUERY_ID INTEGER NOT NULL,PRIMARY KEY(USER_GROUP_ID,QUERY_ID))
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUP_GROUPS(USER_GROUP_ID INTEGER NOT NULL,QUERY_GROUP_ID INTEGER NOT NULL,PRIMARY KEY(USER_GROUP_ID,QUERY_GROUP_ID))
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUP_JOBS(USER_GROUP_ID INTEGER NOT NULL,JOB_ID INTEGER NOT NULL,PRIMARY KEY(USER_GROUP_ID,JOB_ID))
CREATE MEMORY TABLE PUBLIC.ART_DRILLDOWN_QUERIES(QUERY_ID INTEGER NOT NULL,DRILLDOWN_QUERY_ID INTEGER NOT NULL,DRILLDOWN_QUERY_POSITION INTEGER NOT NULL,DRILLDOWN_TITLE VARCHAR(30),DRILLDOWN_TEXT VARCHAR(30),OUTPUT_FORMAT VARCHAR(15),OPEN_IN_NEW_WINDOW VARCHAR(1),PRIMARY KEY(QUERY_ID,DRILLDOWN_QUERY_POSITION))
CREATE MEMORY TABLE PUBLIC.ART_SETTINGS(SETTING_NAME VARCHAR(50) NOT NULL PRIMARY KEY,SETTING_VALUE VARCHAR(2000))
CREATE MEMORY TABLE PUBLIC.QRTZ_JOB_DETAILS(SCHED_NAME VARCHAR(120) NOT NULL,JOB_NAME VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250),JOB_CLASS_NAME VARCHAR(250) NOT NULL,IS_DURABLE BOOLEAN NOT NULL,IS_NONCONCURRENT BOOLEAN NOT NULL,IS_UPDATE_DATA BOOLEAN NOT NULL,REQUESTS_RECOVERY BOOLEAN NOT NULL,JOB_DATA VARBINARY(16000),PRIMARY KEY(SCHED_NAME,JOB_NAME,JOB_GROUP))
CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON PUBLIC.QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY)
CREATE INDEX IDX_QRTZ_J_GRP ON PUBLIC.QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP)
CREATE MEMORY TABLE PUBLIC.QRTZ_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,JOB_NAME VARCHAR(200) NOT NULL,JOB_GROUP VARCHAR(200) NOT NULL,DESCRIPTION VARCHAR(250),NEXT_FIRE_TIME NUMERIC(13),PREV_FIRE_TIME NUMERIC(13),PRIORITY INTEGER,TRIGGER_STATE VARCHAR(16) NOT NULL,TRIGGER_TYPE VARCHAR(8) NOT NULL,START_TIME NUMERIC(13) NOT NULL,END_TIME NUMERIC(13),CALENDAR_NAME VARCHAR(200),MISFIRE_INSTR NUMERIC(2),JOB_DATA VARBINARY(16000),PRIMARY KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY(SCHED_NAME,JOB_NAME,JOB_GROUP) REFERENCES PUBLIC.QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
CREATE INDEX IDX_QRTZ_T_J ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP)
CREATE INDEX IDX_QRTZ_T_JG ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP)
CREATE INDEX IDX_QRTZ_T_C ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME)
CREATE INDEX IDX_QRTZ_T_G ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP)
CREATE INDEX IDX_QRTZ_T_STATE ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE)
CREATE INDEX IDX_QRTZ_T_N_STATE ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE)
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE)
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME)
CREATE INDEX IDX_QRTZ_T_NFT_ST ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME)
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME)
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE)
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE)
CREATE MEMORY TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,REPEAT_COUNT NUMERIC(7) NOT NULL,REPEAT_INTERVAL NUMERIC(12) NOT NULL,TIMES_TRIGGERED NUMERIC(10) NOT NULL,PRIMARY KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE PUBLIC.QRTZ_CRON_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,CRON_EXPRESSION VARCHAR(120) NOT NULL,TIME_ZONE_ID VARCHAR(80),PRIMARY KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE PUBLIC.QRTZ_SIMPROP_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,STR_PROP_1 VARCHAR(512),STR_PROP_2 VARCHAR(512),STR_PROP_3 VARCHAR(512),INT_PROP_1 NUMERIC(9),INT_PROP_2 NUMERIC(9),LONG_PROP_1 NUMERIC(13),LONG_PROP_2 NUMERIC(13),DEC_PROP_1 NUMERIC(13,4),DEC_PROP_2 NUMERIC(13,4),BOOL_PROP_1 BOOLEAN,BOOL_PROP_2 BOOLEAN,PRIMARY KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE PUBLIC.QRTZ_BLOB_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,BLOB_DATA VARBINARY(16000),PRIMARY KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),FOREIGN KEY(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE PUBLIC.QRTZ_CALENDARS(SCHED_NAME VARCHAR(120) NOT NULL,CALENDAR_NAME VARCHAR(200) NOT NULL,CALENDAR VARBINARY(16000) NOT NULL,PRIMARY KEY(SCHED_NAME,CALENDAR_NAME))
CREATE MEMORY TABLE PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS(SCHED_NAME VARCHAR(120) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,PRIMARY KEY(SCHED_NAME,TRIGGER_GROUP))
CREATE MEMORY TABLE PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME VARCHAR(120) NOT NULL,ENTRY_ID VARCHAR(95) NOT NULL,TRIGGER_NAME VARCHAR(200) NOT NULL,TRIGGER_GROUP VARCHAR(200) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,FIRED_TIME NUMERIC(13) NOT NULL,PRIORITY INTEGER NOT NULL,STATE VARCHAR(16) NOT NULL,JOB_NAME VARCHAR(200),JOB_GROUP VARCHAR(200),IS_NONCONCURRENT BOOLEAN,REQUESTS_RECOVERY BOOLEAN,PRIMARY KEY(SCHED_NAME,ENTRY_ID))
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME)
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY)
CREATE INDEX IDX_QRTZ_FT_J_G ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP)
CREATE INDEX IDX_QRTZ_FT_JG ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP)
CREATE INDEX IDX_QRTZ_FT_T_G ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
CREATE INDEX IDX_QRTZ_FT_TG ON PUBLIC.QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP)
CREATE MEMORY TABLE PUBLIC.QRTZ_SCHEDULER_STATE(SCHED_NAME VARCHAR(120) NOT NULL,INSTANCE_NAME VARCHAR(200) NOT NULL,LAST_CHECKIN_TIME NUMERIC(13) NOT NULL,CHECKIN_INTERVAL NUMERIC(13) NOT NULL,PRIMARY KEY(SCHED_NAME,INSTANCE_NAME))
CREATE MEMORY TABLE PUBLIC.QRTZ_LOCKS(SCHED_NAME VARCHAR(120) NOT NULL,LOCK_NAME VARCHAR(40) NOT NULL,PRIMARY KEY(SCHED_NAME,LOCK_NAME))
CREATE MEMORY TABLE PUBLIC.ART_USER_GROUP_RULES(USER_GROUP_ID INTEGER NOT NULL,RULE_NAME VARCHAR(15) NOT NULL,RULE_VALUE VARCHAR(25) NOT NULL,RULE_TYPE VARCHAR(6))
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT DBA TO ART
SET SCHEMA PUBLIC
INSERT INTO ART_USERS VALUES('admin','21232f297a57a5a743894a0e4a801fc3','admin@localhost.local','The Mightly Admin','2012-06-03',NULL,-1,'Y',100,'A','MD5')
INSERT INTO ART_USERS VALUES('auser','303b46c02b497f2665876ae1bd96ab91','update_with@real.email','A Poor User (but can schedule jobs!)','2011-01-22',NULL,-1,'Y',5,'A','MD5')
INSERT INTO ART_USER_QUERIES VALUES('admin',17,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('admin',20,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('admin',21,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('admin',22,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('auser',20,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('auser',21,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERIES VALUES('auser',22,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERY_GROUPS VALUES('admin',1,NULL,NULL,NULL,NULL)
INSERT INTO ART_USER_QUERY_GROUPS VALUES('auser',1,NULL,NULL,NULL,NULL)
INSERT INTO ART_QUERY_GROUPS VALUES(0,NULL,'List','List Of Values [LOV] for parameters values',NULL,NULL,NULL,NULL)
INSERT INTO ART_QUERY_GROUPS VALUES(1,NULL,'Test','Group for testing purposes',NULL,NULL,NULL,NULL)
INSERT INTO ART_QUERY_GROUPS VALUES(3,NULL,'Art Demo','Group for Art Demo Objects',NULL,NULL,NULL,NULL)
INSERT INTO ART_QUERY_GROUPS VALUES(4,NULL,'Sample DB','Queries showing contents of the sample database',NULL,NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(0,3,'Items LoV','Items List of Values','List of Values',1,'2011-01-20','','','','','List of Values',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(0,4,'Regions LoV','Regions List of Values','List of Values',1,'2011-01-20','','','','','List of Values',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(0,5,'Cities LoV','Cities List of Values','LoV using Dynamic SQL to be used also as a chained parameter',1,'2011-01-20','','','','','LoV using Dynamic SQL to be used also as a chained parameter',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,6,'1.Tabular-Items Volume','Monthly Items Volume by Regions','Displays monthly volume of items sold by region',1,'2011-01-25','','','','','Displays monthly volume of items sold by region',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,7,'6.BarChart-Yearly Volume','Yearly  Volume - Chart','Shows a bar chart',1,'2012-04-26','','','','','X axis Label','Y axis Label','600x300 0:0 #FFFFFF showlegend   ',-4,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,8,'5.PieChart-Items Volume','Items Volume','Shows a pie chart with sold items in the selected region and specified period',1,'2011-04-01','','','','','Shows a pie chart with sold items in the selected region and specified period','null','400x300 0:0 #FFFFFF showlegend showlabels  ',-2,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,9,'3.Chained-Volume by City','Monthly Items by City','Displays monthly volume of items sold in selected City (uses chained parameters)',1,'2011-01-25','','','','','Displays monthly volume of items sold in selected City (uses chained parameters)',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,10,'2.Crosstab-Items Volume','Items Volume - Crosstab','Displays monthly volume of items sold in Crosstab (Pivot) Format',1,'2011-01-25','','','','','Displays monthly volume of items sold in Crosstab (Pivot) Format',NULL,NULL,101,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(0,11,'YesNo','Select Yes or No','ouputs the list\u000d\u000aY, Yes\u000d\u000aN, No',1,'2011-01-20','','','','','ouputs the list\u000d\u000aY, Yes\u000d\u000aN, No',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,12,'4.DynSQL-Item/City Volume','Monthly Volume by Items/Cities ','Displays monthly volume by Item or City depending on user selection (using Dynamic SQL).',1,'2011-01-25','','','','','Displays monthly volume by Item or City depending on user selection (using Dynamic SQL).',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,13,'7.Cached-Region Volume','Monthly Items Volume by Regions','Calculates monthly volume by region - intended to be scheduled as a job to reverse the value in REGIONS_DATAMART table each 1st day of the month.',1,'2011-01-22','','','','','Calculates monthly volume by region - intended to be scheduled as a job to reverse the value in REGIONS_DATAMART table each 1st day of the month.',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,14,'9.Drill-Summary','Regions Volume Summary','Get regions volumes from the REGIONS_DATAMART table created by the Job on 7.Cached-Region Volume query. Allows to drill down to 8.Drill-Details.',1,'2011-01-22','','','','','Get regions volumes from the REGIONS_DATAMART table created by the Job on 7.Cached-Region Volume query. Allows to drill down to 8.Drill-Details.',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,15,'8.Drill-Details','Details','Displays items sold in cities/regions with the order date. Used as drill down query from 9.Drill-Summary',1,'2011-01-22','','','','','Displays items sold in cities/regions with the order date. Used as drill down query from 9.Drill-Summary',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,16,'90.Dashboard-Overview','Regional Scorecard','Shows a dashboard collecting some of the existing queries in a single screen',1,'2011-03-29','','','','','Shows a dashboard collecting some of the existing queries in a single screen',NULL,NULL,110,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,17,'93.Info Text','Info text to be displayed in dashboard','This is available in the dashboard. Text can be edited by who has direct grant to it.',1,'2011-01-25','','','','','This is available in the dashboard. Text can be edited by who has direct grant to it.',NULL,NULL,111,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,18,'92.TimeChart-Cities Vol ','Cities Volume','Sold items by cities over the year',1,'2012-11-18','','','','','Sold items by cities over the year','Volume','400x300 0:0 #FFFFFF showlegend   ',-6,'','H','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,19,'91.Crosstab-City Volume','City Volume - Crosstab','Displays monthly volume sold in Cities in Crosstab (Pivot) format',1,'2011-01-22','','','','','Displays monthly volume sold in Cities in Crosstab (Pivot) format',NULL,NULL,101,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(1,20,'Art Objects','Details about defined objects','Shows some details about existing objects in Art Repository',2,'2011-01-25','','','','','Shows some details about existing objects in Art Repository',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(1,21,'Load Test-Big','56k','A  missed join  causes this query to retrieve 56k rows',1,'2011-01-25','','','','','A  missed join  causes this query to retrieve 56k rows',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(1,22,'Load Test-Huge','224k rows','A couple of missed joins causes this query to retrieve 224k rows',1,'2011-01-25','','','','','A couple of missed joins causes this query to retrieve 224k rows',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(3,23,'5b. Drill-Pie','Drill Down from Pie Chart','Shows details when clicking on pie chart',1,'2011-03-31','','','','','Shows a pie chart with sold items in the selected region and specified period',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(1,24,'Test UTF-8','Shows all orders for a city in a period','This query is to validate Art correctly\u000d\u000a recognize UTF-8 chars as parameters',1,'2011-03-31','','','','','A  missed join  causes this query to retrieve 56k rows',NULL,NULL,0,'','A','N',NULL,NULL,NULL)
INSERT INTO ART_QUERIES VALUES(1,25,'All Orders','','Test query on sample db',1,'2012-11-24','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(4,26,'Cities Table','','',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(4,27,'Items Table','','',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(4,28,'Regions Table','','',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(4,29,'Orders Table','','',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(4,30,'Users Table','','',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,31,'Sample Orders','','Query with a few orders to demonstrate the dynamic recipients query feature',1,'2012-11-18','','','','','','','',0,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,32,'Recipients','','Query used to define details of email recipients for a job',1,'2012-11-18','','','','','','','',121,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,33,'Recipients - filtered','','Query used to define details of email recipients for a job. For filtered output. For use with sample orders query.',1,'2012-11-18','','','','','','','',121,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,34,'Recipients - email only','','Query used to define details of email recipients for a job',1,'2012-11-22','','','','','','','',121,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,35,'Jasper 1','','Using template query',1,'2012-11-24','sample-jasper1.jrxml','','','','','','',115,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,36,'Jasper 2','','Using ART query',1,'2012-11-24','sample-jasper1.jrxml','','','','','','',116,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,37,'jXLS 1','','Using template query',1,'2012-11-24','sample-jxls1.xlsx','','','','','','',117,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,38,'jXLS 2','','Using ART query',1,'2012-11-24','sample-jxls2.xlsx','','','','','','',118,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,39,'jXLS 3','','Chart included in template',1,'2012-11-24','sample-jxls3.xlsx','','','','','','',118,'','A','N','','','N')
INSERT INTO ART_QUERIES VALUES(3,40,'jXLS 4','','Template with multiple reports in different worksheets.',1,'2012-11-24','sample-jxls4.xls','','','','','','',117,'','A','N','','','N')
INSERT INTO ART_QUERY_FIELDS VALUES(6,1,'Region','Select Region','Select one item from the list','',NULL,NULL,'2011-01-19',0,-1,'Y','I','regionId','N',4,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(6,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(6,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(7,1,'Year','Set year (use 2010 for demo)','Set year integer value (use 2010 for demo)','2010',NULL,NULL,'2011-01-20',0,-1,'N','I','year','N',3,-1,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(7,2,'Regions','Select Regions','Select one or more items from the list','',NULL,NULL,'2012-04-26',0,0,'Y','M','regionIds','N',4,0,'NUMBER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(8,1,'Region','Select Region','Select one item from the list','4',NULL,NULL,'2012-04-26',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(8,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(8,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(9,1,'Region','Select Region','Select one item from the list','',NULL,NULL,'2012-11-06',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(9,2,'City','Select City','Pick  value from the list once the Region has been selected','',NULL,NULL,'2012-11-06',0,0,'Y','I','cityId','N',5,1,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(9,3,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(9,4,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(10,1,'Region','Select Region','Select one item from the list','4',NULL,NULL,'2012-04-26',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(10,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(10,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(12,1,'Region','Select Region','Select one item from the list','',NULL,NULL,'2012-11-06',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(12,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(12,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(12,4,'By Items?','Y to show by Items, N to show by Cities','Select one item from the list','Y',NULL,NULL,'2011-01-20',0,-1,'Y','I','showItems','N',11,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(14,1,'Period','Use YYYY-MM format (i.e. 2010-02)','You can use %','2010-%',NULL,NULL,'2011-01-20',0,-1,'N','I','period','N',3,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(15,1,'Period','YYYY-MM format','Help description goes here!','2010-01',NULL,NULL,'2011-01-24',1,-1,'N','I','period','N',4,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(15,2,'Region','Region Name','Help description goes here!','East',NULL,NULL,'2011-01-24',2,-1,'N','I','regionName','N',4,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(18,1,'Region','Select Region','Select one item from the list','4',NULL,NULL,'2012-04-26',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(18,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(18,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(19,1,'Region','Select Region','Select one item from the list','4',NULL,NULL,'2012-04-26',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(19,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(19,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(20,1,'Object','Object Name','You can use %','%',NULL,NULL,'2011-01-21',0,-1,'N','I','queryName','N',3,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(20,2,'Group','Group Name','You can use %','%',NULL,NULL,'2011-01-21',0,-1,'N','I','groupName','N',3,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(20,3,'Datasource','Datasource Name','You can use %','%',NULL,NULL,'2011-01-21',0,-1,'N','I','datasourceName','N',3,-1,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(21,1,'Period','YYYY-MM format','You can use % for partial matches','2010-%',NULL,NULL,'2011-03-31',0,0,'N','I','period','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(21,2,'Region','Region Name','You can use % for partial matches','%',NULL,NULL,'2011-03-31',0,0,'N','I','regionName','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(22,1,'Period','YYYY-MM format','You can use % for partial matches','2010-%',NULL,NULL,'2011-03-31',0,0,'N','I','period','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(22,2,'Region','Region Name','You can use % for partial matches','%',NULL,NULL,'2011-03-31',0,0,'N','I','regionName','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(23,1,'Region','Select Region','Select one item from the list','',NULL,NULL,'2012-11-06',0,0,'Y','I','regionId','N',4,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(23,2,'From','From Date','Pick a date by clicking on the calendar icon','2010-01-01',NULL,NULL,'2011-01-19',0,-1,'N','I','startDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(23,3,'To','To Date','Pick a date by clicking on the calendar icon','',NULL,NULL,'2011-01-19',0,-1,'N','I','endDate','N',4,-1,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(23,4,'Item','Item Name','Type an item name (or %) - case sensitive','%',NULL,NULL,'2011-03-31',2,0,'N','I','item','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(24,1,'Period','YYYY-MM format','You can use % for partial matches','2010-01',NULL,NULL,'2011-03-31',0,0,'N','I','period','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(24,2,'City','City Name (try with %\u0648%)','Type a value','%',NULL,NULL,'2011-03-31',0,0,'N','I','city','N',0,0,'VARCHAR',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(35,1,'Order Date','','','2010-12-01',NULL,NULL,'2012-11-22',0,0,'N','I','order_date','N',0,0,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(35,2,'City','','','',NULL,NULL,'2012-11-22',0,0,'Y','I','city','N',5,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(35,3,'Item','','','',NULL,NULL,'2012-11-22',0,0,'Y','M','item','N',3,0,'NUMBER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(36,1,'Order Date','','','2010-12-01',NULL,NULL,'2012-11-22',0,0,'N','I','order_date','N',0,0,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(36,2,'City','','','',NULL,NULL,'2012-11-22',0,0,'Y','I','city','N',5,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(36,3,'Item','','','',NULL,NULL,'2012-11-22',0,0,'Y','M','item','N',3,0,'NUMBER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(37,1,'Order Date','','','2010-12-01',NULL,NULL,'2012-11-22',0,0,'N','I','order_date','N',0,0,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(37,2,'City','','','',NULL,NULL,'2012-11-22',0,0,'Y','I','city','N',5,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(37,3,'Item','','','',NULL,NULL,'2012-11-22',0,0,'Y','M','item','N',3,0,'NUMBER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(38,1,'Order Date','','','2010-12-01',NULL,NULL,'2012-11-22',0,0,'N','I','order_date','N',0,0,'DATE',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(38,2,'City','','','',NULL,NULL,'2012-11-22',0,0,'Y','I','city','N',5,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(38,3,'Item','','','',NULL,NULL,'2012-11-22',0,0,'Y','M','item','N',3,0,'NUMBER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(39,1,'City','','','',NULL,NULL,'2012-11-22',0,0,'Y','I','city','N',5,0,'INTEGER',NULL)
INSERT INTO ART_QUERY_FIELDS VALUES(39,2,'Item','','','',NULL,NULL,'2012-11-22',0,0,'Y','M','item','N',3,0,'NUMBER',NULL)
INSERT INTO ART_ALL_SOURCES VALUES(3,1,'/* Purpose: \u000d\u000a * show how a two column LoV works\u000d\u000a * The 1st column is passed as the value to the query parameter\u000d\u000a * while the 2nd column is displayed to the user\u000d\u000a */\u000d\u000a\u000d\u000aSELECT ITEM_ID, NAME FROM ITEMS ORDER BY 2')
INSERT INTO ART_ALL_SOURCES VALUES(4,1,'/* Purpose: \u000d\u000a * show how a two column LoV works\u000d\u000a * The 1st column is passed as the value to the query parameter\u000d\u000a * while the 2nd column is displayed to the user\u000d\u000a */\u000d\u000aSELECT REGION_ID, NAME FROM REGIONS ORDER BY 2')
INSERT INTO ART_ALL_SOURCES VALUES(5,1,'/* Purpose: \u000d\u000a * show how dynamic SQL can be used to update query structure\u000d\u000a * in a LoV to use it as a standalone LoV or as a chained lov\u000d\u000a * (see Admin Manual for further details)\u000d\u000a */\u000d\u000a\u000d\u000aSELECT CITY_ID, NAME FROM CITIES \u000d\u000a/* the below is an example of dynamic SQL: if the value of a \u000d\u000a * parameter named "filter" is passed to the query the additional\u000d\u000a * text is appended\u000d\u000a * The parameter named "filter" is used to pass the value\u000d\u000a * of the master paramater.\u000d\u000a */\u000d\u000a<IF> <EXP1>#filter#</EXP1><OP>is not null</OP>\u000d\u000a     <TEXT> WHERE REGION_ID = #filter# </TEXT>\u000d\u000a</IF>\u000d\u000aORDER BY 2')
INSERT INTO ART_ALL_SOURCES VALUES(6,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show a plain tabular query\u000d\u000a * show how to use inline date parameters\u000d\u000a * show how to use inline loV parameter\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period", \u000d\u000a       i.NAME "Item", \u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov query passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY r.NAME,  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ), i.NAME\u000d\u000a ORDER BY 1,2,3')
INSERT INTO ART_ALL_SOURCES VALUES(7,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show bar char, how to sort bars in a bar chart\u000d\u000a *  how to change default size (see Short Description)\u000d\u000a * show how inline multi-params can be used \u000d\u000a *\u000d\u000a */\u000d\u000a\u000d\u000aSELECT TO_CHAR ( o.ORDER_DATE, ''MONTH'' ) "Y axis label",  \u000d\u000a       r.NAME "Series Name" ,\u000d\u000a       SUM(o.VOLUME) "Value"  \u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND TO_CHAR (o.ORDER_DATE,''YYYY'') = #year#\u000d\u000a   AND r.REGION_ID in (#regionIds#)\u000d\u000a GROUP BY TO_CHAR ( o.ORDER_DATE, ''MONTH'' ) ,r.NAME\u000d\u000a-- ORDER BY TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' )\u000d\u000a -- The last order by is to sort correctly the month that would\u000d\u000a -- be otherwise sorted alphabetically (i.e. Feb before Jan etc)')
INSERT INTO ART_ALL_SOURCES VALUES(8,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show pie chart\u000d\u000a * show how a LoV can be used\u000d\u000a * show how inline date parameters can be used \u000d\u000a *\u000d\u000a */\u000d\u000aSELECT i.name "Item", \u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY i.NAME\u000d\u000a ORDER BY 1')
INSERT INTO ART_ALL_SOURCES VALUES(9,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show how chained parameters work\u000d\u000a * \u000d\u000a */\u000d\u000aSELECT c.NAME "City",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period", \u000d\u000a       i.NAME "Item", \u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# -- master parameter\u000d\u000a   AND c.CITY_ID   = #cityId#   -- chained parameter based on region\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY c.NAME,  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ), i.NAME\u000d\u000a ORDER BY 1,2,3')
INSERT INTO ART_ALL_SOURCES VALUES(10,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show a crosstab query and how the alternate sort works\u000d\u000a * \u000d\u000a * By default the Period column is ordered alphabetically\u000d\u000a * (so 2010-Feb would be before 2010-Jan). Uncomment the 4 commented\u000d\u000a * lines to tell Art how to sort the columns\u000d\u000a */\u000d\u000a\u000d\u000aSELECT TO_CHAR ( o.ORDER_DATE, ''YYYY-MON'' ) "Period", \u000d\u000a       --TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period Sort", \u000d\u000a       i.NAME "Item", \u000d\u000a       --i.NAME "Item Sort", -- actually, no changes here\u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov query passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY TO_CHAR ( o.ORDER_DATE, ''YYYY-MON'' )\u000d\u000a       --, TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' )\u000d\u000a       , i.NAME\u000d\u000a       --, i.NAME ')
INSERT INTO ART_ALL_SOURCES VALUES(11,1,'SELECT ''Y'', ''Yes'' FROM ITEMS WHERE ITEM_ID=1\u000d\u000a union all\u000d\u000aSELECT ''N'', ''No'' FROM ITEMS WHERE ITEM_ID=1\u000d\u000a\u000d\u000a/** note: the above is a trick to generate just a Yes/No list\u000d\u000a    in hsqldb (the database used for the Art Demo),\u000d\u000a    in other database you can use:\u000d\u000aOracle:\u000d\u000aSELECT ''Y'', ''Yes'' FROM DUAL\u000d\u000a union all\u000d\u000aSELECT ''N'', ''No'' FROM DUAL\u000d\u000aMysql:\u000d\u000aSELECT ''Y'', ''Yes'' \u000d\u000a union all\u000d\u000aSELECT ''N'', ''No'' \u000d\u000aetc...\u000d\u000a*/')
INSERT INTO ART_ALL_SOURCES VALUES(12,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show how dynamic SQL works\u000d\u000a * by using dynamic SQL and a new parameter (Yes/No), the user\u000d\u000a *  can select if to display the information by item or by city. \u000d\u000a *\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period", \u000d\u000a       <IF> \u000d\u000a         <EXP1>#showItems#</EXP1> <OP>eq</OP> <EXP2>Y</EXP2> \u000d\u000a          <TEXT>i.NAME "Item",</TEXT> \u000d\u000a          <ELSETEXT>c.NAME "City",</ELSETEXT> \u000d\u000a       </IF> \u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov query passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY r.NAME,  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' )\u000d\u000a <IF> \u000d\u000a   <EXP1>#showItems#</EXP1> <OP>eq</OP> <EXP2>Y</EXP2> \u000d\u000a    <TEXT>,i.NAME</TEXT> \u000d\u000a    <ELSETEXT>,c.NAME</ELSETEXT> \u000d\u000a </IF> \u000d\u000a ORDER BY 1,2,3')
INSERT INTO ART_ALL_SOURCES VALUES(13,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show how a "cached table" works: this query has been prepared\u000d\u000a *  to just aggregate  volumes by region from the details tables.\u000d\u000a *\u000d\u000a *  It will be schduled (as a Job) to run daily and reverse the\u000d\u000a *  information in a new table REGIONS_DATAMART.\u000d\u000a *  The query "8.Drill-Summary" is then based on this table.\u000d\u000a *\u000d\u000a */\u000d\u000aSELECT TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period", \u000d\u000a       r.NAME "Region",\u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a GROUP BY r.NAME,  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' )\u000d\u000a ORDER BY 1,2\u000d\u000a')
INSERT INTO ART_ALL_SOURCES VALUES(14,1,'SELECT Period "Period", Region "Region", Volume "Volume"\u000d\u000a  FROM REGIONS_DATAMART \u000d\u000a WHERE Period like #period#\u000d\u000a ORDER BY 1,2')
INSERT INTO ART_ALL_SOURCES VALUES(15,1,'/*\u000d\u000a * Purpose: \u000d\u000a * This shows details from a master query\u000d\u000a * Note: usually details queries are in status Hidden to do not\u000d\u000a *       appear in users available query list\u000d\u000a *\u000d\u000a * In the two parameters definition (in Edit Parameter form) the last\u000d\u000a * attribute states on which column of the main query they are going\u000d\u000a * to match.\u000d\u000a * this can also be used as a standalone query, but since the Status \u000d\u000a * attribute is set to "Hidden" it will not show in the list\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.NAME = #regionName# -- drill param\u000d\u000a   AND  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') = #period# -- drill param\u000d\u000a ORDER BY 1,2,3')
INSERT INTO ART_ALL_SOURCES VALUES(16,1,'<PORTLETSCONTAINER>\u000d\u000a <COLUMN>\u000d\u000a  <PORTLET>\u000d\u000a   <TITLE>Pie Chart</TITLE>\u000d\u000a   <OBJECTID>8</OBJECTID>\u000d\u000a  </PORTLET>\u000d\u000a  <PORTLET>\u000d\u000a   <TITLE>Crosstab Items</TITLE>\u000d\u000a   <OBJECTID>10</OBJECTID>\u000d\u000a  </PORTLET>\u000d\u000a </COLUMN>\u000d\u000a <COLUMN>\u000d\u000a  <PORTLET>\u000d\u000a   <TITLE>Cities Trend Chart</TITLE>\u000d\u000a   <OBJECTID>18</OBJECTID>\u000d\u000a  </PORTLET>\u000d\u000a  <PORTLET>\u000d\u000a   <TITLE>Crosstab Cities</TITLE>\u000d\u000a   <OBJECTID>19</OBJECTID>\u000d\u000a  </PORTLET>\u000d\u000a  <PORTLET>\u000d\u000a   <TITLE>Info</TITLE>\u000d\u000a   <OBJECTID>17</OBJECTID>\u000d\u000a  </PORTLET>\u000d\u000a</COLUMN>\u000d\u000a</PORTLETSCONTAINER>')
INSERT INTO ART_ALL_SOURCES VALUES(17,1,'<p>This <strong>text object </strong>can be edited by any user who is specifically granted to access the object. Other users can only read the content.</p>\u000d\u000a<p>It can contain links &nbsp;- &nbsp;<a title="Art Home Page" href="http://art.sourceforge.net" target="_blank">Art Home Page</a> - or images:</p>\u000d\u000a<p><img style="vertical-align: middle;" src="http://art.sourceforge.net/images/art-64px.jpg" alt="" /></p>')
INSERT INTO ART_ALL_SOURCES VALUES(18,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show timeseries chart\u000d\u000a *\u000d\u000a * Not this query is in hudden status to do not appear in user list\u000d\u000a * (ie to prevent user to execute it standalone)\u000d\u000a */\u000d\u000a\u000d\u000aSELECT -- TRUNC(o.ORDER_DATE, ''YYYY-MM'' ) does not work in hsqldb 1.8\u000d\u000a       CONVERT(TO_CHAR( o.ORDER_DATE, ''YYYY-MM'' )+''-01'', DATE) "Volume",\u000d\u000a       c.NAME "City",\u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY CONVERT(TO_CHAR( o.ORDER_DATE, ''YYYY-MM'' )+''-01'', DATE)\u000d\u000a        , c.NAME\u000d\u000a ORDER BY 1')
INSERT INTO ART_ALL_SOURCES VALUES(19,1,'/*\u000d\u000a * Purpose: \u000d\u000a * show a crosstab query and how the alternate sort works\u000d\u000a * \u000d\u000a * By default the Period column is ordered alphabetically\u000d\u000a * (so 2010-Feb would be before 2010-Jan). Uncomment the 4 commented\u000d\u000a * lines to tell Art how to sort the columns\u000d\u000a */\u000d\u000a\u000d\u000aSELECT TO_CHAR ( o.ORDER_DATE, ''YYYY-MON'' ) "Period", \u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' ) "Period Sort", \u000d\u000a       c.NAME "City", \u000d\u000a       c.NAME "Item Sort", -- actually, no changes here\u000d\u000a       SUM(o.VOLUME) "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov query passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a GROUP BY TO_CHAR ( o.ORDER_DATE, ''YYYY-MON'' )\u000d\u000a       , TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'' )\u000d\u000a       , c.NAME\u000d\u000a       , c.NAME ')
INSERT INTO ART_ALL_SOURCES VALUES(20,1,'SELECT ag.NAME "Group Name"\u000d\u000a     , ad.NAME "Database Name"\u000d\u000a     , aq.NAME "Query Name"\u000d\u000a     , aq.ACTIVE_STATUS "Status Active/Disabled"\u000d\u000a     , aq.QUERY_ID " Id "\u000d\u000a     , aq.SHORT_DESCRIPTION "Short Description"\u000d\u000a     , aq.DESCRIPTION "Description"\u000d\u000a  FROM ART_QUERIES aq\u000d\u000a     , ART_DATABASES ad\u000d\u000a     , ART_QUERY_GROUPS ag\u000d\u000a WHERE aq.QUERY_GROUP_ID = ag.QUERY_GROUP_ID\u000d\u000a   AND aq.DATABASE_ID = ad.DATABASE_ID\u000d\u000a   AND aq.NAME like #queryName#\u000d\u000a   AND ag.NAME like #groupName#\u000d\u000a   AND ad.NAME like #datasourceName#\u000d\u000a ORDER BY 1,2,3')
INSERT INTO ART_ALL_SOURCES VALUES(21,1,'/*\u000d\u000a * Purpose: \u000d\u000a *  output data...56k rows\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume",\u000d\u000a       o.*\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a  -- AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.NAME like #regionName# -- drill param\u000d\u000a   AND  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') like #period# -- drill param\u000d\u000a union all\u000d\u000a\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume",\u000d\u000a       o.*\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a  -- AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.NAME like #regionName# -- drill param\u000d\u000a   AND  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') like #period# -- drill param\u000d\u000a')
INSERT INTO ART_ALL_SOURCES VALUES(22,1,'/*\u000d\u000a * Purpose: test max limit of rows\u000d\u000a *  output data... 56k x 4items = 224k rows\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume",\u000d\u000a       o.*\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a  -- AND o.CITY_ID  = c.CITY_ID\u000d\u000a   -- AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.NAME like #regionName# -- drill param\u000d\u000a   AND  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') like #period# -- drill param\u000d\u000a union all\u000d\u000a\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume",\u000d\u000a       o.*\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a  -- AND o.CITY_ID  = c.CITY_ID\u000d\u000a   -- AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.NAME like #regionName# -- drill param\u000d\u000a   AND  TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') like #period# -- drill param\u000d\u000a')
INSERT INTO ART_ALL_SOURCES VALUES(23,1,'/*\u000d\u000a * Purpose: \u000d\u000a * Shows details when clicking on pie chart\u000d\u000a * Note: the query parameters are the same of the master \u000d\u000a *       "5. Pie Chart" query, plus an additonal parameter\u000d\u000a *       (item) that is setup with a drill down column=2\u000d\u000a *       (i.e. it matches the parent category name)\u000d\u000a */\u000d\u000a\u000d\u000aSELECT i.name "Item", \u000d\u000a       r.NAME "Region",\u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume",\u000d\u000a       o.ORDER_DATE "Order Date"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND o.ITEM_ID  = i.ITEM_ID\u000d\u000a   AND r.REGION_ID = #regionId# --the lov passes the first column\u000d\u000a   AND o.ORDER_DATE BETWEEN #startDate# AND #endDate#\u000d\u000a   AND i.name like #item#\u000d\u000a ORDER BY 1')
INSERT INTO ART_ALL_SOURCES VALUES(24,1,'/*\u000d\u000a * Purpose: \u000d\u000a *  A filter param is on a column containing UTF-8 \u000d\u000a *  chars, i..e some cities are in multi-byte language\u000d\u000a *  (cyrillic, arabic)\u000d\u000a */\u000d\u000aSELECT r.NAME "Region",\u000d\u000a       TO_CHAR ( o.ORDER_DATE, ''YYYY-MM-DD HH24:MI'' ) "Date", \u000d\u000a       i.NAME "Item", \u000d\u000a       c.NAME "City",\u000d\u000a       o.VOLUME "Volume"\u000d\u000a  FROM ORDERS o, ITEMS i, REGIONS r, CITIES c\u000d\u000a WHERE r.REGION_ID = c.REGION_ID\u000d\u000a   AND o.CITY_ID  = c.CITY_ID\u000d\u000a   AND c.NAME like #city# -- seom city values are in utf-8\u000d\u000a   AND TO_CHAR ( o.ORDER_DATE, ''YYYY-MM'') like #period#\u000d\u000a ORDER BY 1,2\u000d\u000a')
INSERT INTO ART_ALL_SOURCES VALUES(25,1,'select o.order_id "Order ID",o.order_date "Order Date"\u000d\u000a,c.name City,i.name Item,o.volume\u000d\u000a,u.first_name + '' '' + u.last_name User \u000d\u000afrom orders o, cities c,items i, users u\u000d\u000awhere o.city_id=c.city_id and o.item_id=i.item_id\u000d\u000aand o.user_id=u.user_id')
INSERT INTO ART_ALL_SOURCES VALUES(26,1,'select * from cities')
INSERT INTO ART_ALL_SOURCES VALUES(27,1,'select * from items')
INSERT INTO ART_ALL_SOURCES VALUES(28,1,'select * from regions')
INSERT INTO ART_ALL_SOURCES VALUES(29,1,'select * from orders')
INSERT INTO ART_ALL_SOURCES VALUES(30,1,'select * from users')
INSERT INTO ART_ALL_SOURCES VALUES(31,1,'select o.order_id "Order ID",o.order_date "Order Date"\u000d\u000a,c.name City,i.name Item,o.volume\u000d\u000a,u.first_name + '' '' + u.last_name User \u000d\u000afrom orders o, cities c,items i, users u\u000d\u000awhere o.city_id=c.city_id and o.item_id=i.item_id\u000d\u000aand o.user_id=u.user_id\u000d\u000aand o.order_id<=20\u000d\u000aand #recipient#')
INSERT INTO ART_ALL_SOURCES VALUES(32,1,'select email, first_name, last_name "Last Name"\u000d\u000afrom users')
INSERT INTO ART_ALL_SOURCES VALUES(33,1,'select email, first_name, last_name "Last Name"\u000d\u000a,''o.user_id'' recipient_column, user_id recipient_id\u000d\u000afrom users')
INSERT INTO ART_ALL_SOURCES VALUES(34,1,'select email\u000d\u000afrom users')
INSERT INTO ART_ALL_SOURCES VALUES(35,1,'#order_date#\u000d\u000a#city#\u000d\u000a#item#')
INSERT INTO ART_ALL_SOURCES VALUES(36,1,'select o.order_id, c.name city_name, i.name item_name, o.order_date, o.volume from\u000d\u000aorders o, cities c, items i\u000d\u000awhere o.city_id=c.city_id and o.item_id=i.item_id\u000d\u000aand order_date>=#order_date#\u000d\u000aand o.city_id=#city#\u000d\u000aand o.item_id in(#item#)\u000d\u000aorder by o.order_date, o.order_id')
INSERT INTO ART_ALL_SOURCES VALUES(37,1,'#order_date#\u000d\u000a#city#\u000d\u000a#item#')
INSERT INTO ART_ALL_SOURCES VALUES(38,1,'select o.order_id, c.name city_name, i.name item_name, o.order_date, o.volume from\u000d\u000aorders o, cities c, items i\u000d\u000awhere o.city_id=c.city_id and o.item_id=i.item_id\u000d\u000aand order_date>=#order_date#\u000d\u000aand o.city_id=#city#\u000d\u000aand o.item_id in(#item#)\u000d\u000aorder by o.order_date, o.order_id')
INSERT INTO ART_ALL_SOURCES VALUES(39,1,'select i.name item_name, sum(o.volume) volume \u000d\u000afrom orders o, cities c, items i\u000d\u000awhere o.city_id=c.city_id and o.item_id=i.item_id\u000d\u000aand o.city_id=#city#\u000d\u000aand o.item_id in(#item#)\u000d\u000agroup by i.name')
INSERT INTO ART_ALL_SOURCES VALUES(40,1,' ')
INSERT INTO ART_DATABASES VALUES(1,'SampleDB','org.hsqldb.jdbcDriver','jdbc:hsqldb:file:PATH_TOSampleDB;create=false','SAMPLE','o:QWEBgMEwmVY=\u000d\u000a','2012-11-23',NULL,20,'')
INSERT INTO ART_DATABASES VALUES(2,'ArtRepository','org.hsqldb.jdbcDriver','jdbc:hsqldb:file:PATH_TOArtRepositoryDB;create=false','ART','o:pS0nCH0KoGM=\u000d\u000a','2011-05-18',NULL,20,'')
INSERT INTO ART_JOBS VALUES(1,13,'admin','1','','','','','- Table Name (rows inserted):  <code>REGIONS_DATAMART</code> (48)<br />Columns Names:<br /><code> Period Region Volume</code>','2012-06-03 15:20:48.679000','2012-06-03 15:20:49.629000',NULL,'2012-12-01 03:00:00.000000','2011-01-25',NULL,'Y','N','N','REGIONS_DATAMART',NULL,10,'A','N','0','3','1','*','?',NULL,NULL,NULL)
INSERT INTO ART_JOBS VALUES(2,26,'admin','xlsx','','admin@localhost.local','','','JobId2-shared-11.All Cities-2012_06_03-15_31_44.xlsx','2012-06-03 15:31:44.268000','2012-06-03 15:31:45.360000',NULL,'2012-11-30 23:00:00.000000','2012-06-03',NULL,'Y','Y','N','CACHED_TABLE','All Cities Report',3,'A','N','0','23','L','*','?',NULL,NULL,NULL)
INSERT INTO ART_JOBS VALUES(3,31,'admin','htmlPlain','','admin@localhost.local','Sample Orders','<p>Greetings,</p>\u000d\u000a<p>These are everyone''s orders.</p>','JobId3-Sample Orders-2012_11_18-20_38_20-p5Npcu9tWa.html','2012-11-18 20:38:20.803000','2012-11-18 20:38:21.480000',NULL,'2013-01-31 23:00:00.000000','2012-11-22',NULL,'X','N','N','CACHED_TABLE','Dynamic recipients',5,'A','N','0','23','L','1','?','','',34)
INSERT INTO ART_JOBS VALUES(4,31,'admin','htmlPlain','','admin@localhost.local','Sample Orders','<p>Dear #first_name# #last name#</p>\u000d\u000a<p>These are everyone''s orders.</p>','JobId4-Sample Orders-2012_11_18-20_40_41-9DGzGWKTgC.html','2012-11-18 20:40:41.084000','2012-11-18 20:40:41.318000',NULL,'2013-01-31 23:00:00.000000','2012-11-18',NULL,'X','N','N',NULL,'Dynamic recipients - personalized',5,'A','N','0','23','L','1','?','','',32)
INSERT INTO ART_JOBS VALUES(5,31,'admin','htmlPlain','','admin@localhost.local','Sample Orders','<p>Dear #first_name#,</p>\u000d\u000a<p>These are <strong>your</strong> orders.</p>','JobId5-Sample Orders-2012_11_18-20_42_20-LuxsAKkulO.html','2012-11-18 20:42:20.809000','2012-11-18 20:42:20.980000',NULL,'2013-01-31 23:00:00.000000','2012-11-18',NULL,'X','N','N',NULL,'Dynamic recipients - filtered',5,'A','N','0','23','L','1','?','','',33)
INSERT INTO ART_JOBS_AUDIT VALUES(3,NULL,'6f45f634-3c4b-464f-8952-967f30a27c71','2012-06-03 15:35:00.676000','2012-06-03 15:35:01.397000','admin','E')
INSERT INTO ART_JOBS_AUDIT VALUES(3,NULL,'debb1070-88ef-490e-8d00-8716a1bea445','2012-06-03 15:35:36.512000','2012-06-03 15:35:36.940000','admin','E')
INSERT INTO ART_SHARED_JOBS VALUES(2,'auser',NULL,NULL,NULL,NULL)
INSERT INTO ART_JOB_SCHEDULES VALUES('Last Day of Every Month','0','23','L','*','?')
INSERT INTO ART_USER_GROUPS VALUES(2,'Art Demo User Goup','user in this group can access all the demo queries',NULL)
INSERT INTO ART_USER_GROUP_ASSIGNMENT VALUES('admin',2)
INSERT INTO ART_USER_GROUP_ASSIGNMENT VALUES('auser',2)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,2)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,6)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,7)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,8)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,9)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,10)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,12)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,13)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,14)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,15)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,16)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,17)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,18)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,19)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,20)
INSERT INTO ART_USER_GROUP_QUERIES VALUES(2,23)
INSERT INTO ART_USER_GROUP_GROUPS VALUES(2,1)
INSERT INTO ART_USER_GROUP_GROUPS VALUES(2,3)
INSERT INTO ART_USER_GROUP_GROUPS VALUES(2,4)
INSERT INTO ART_DRILLDOWN_QUERIES VALUES(8,23,1,'Drill','details','htmlDataTable','Y')
INSERT INTO ART_DRILLDOWN_QUERIES VALUES(14,15,1,'Details  (web)','link','htmlGrid','N')
INSERT INTO ART_DRILLDOWN_QUERIES VALUES(14,15,2,'Details (Spreadsheet)','xls','xls','N')
INSERT INTO ART_SETTINGS VALUES('database version','2.4.1')
INSERT INTO QRTZ_JOB_DETAILS VALUES('ArtScheduler','job1','jobGroup',NULL,'art.utils.ArtJob',FALSE,FALSE,FALSE,FALSE,'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017400056a6f626964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000017800')
INSERT INTO QRTZ_JOB_DETAILS VALUES('ArtScheduler','job2','jobGroup',NULL,'art.utils.ArtJob',FALSE,FALSE,FALSE,FALSE,'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017400056a6f626964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000027800')
INSERT INTO QRTZ_JOB_DETAILS VALUES('ArtScheduler','job3','jobGroup',NULL,'art.utils.ArtJob',FALSE,FALSE,FALSE,FALSE,'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017400056a6f626964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000037800')
INSERT INTO QRTZ_JOB_DETAILS VALUES('ArtScheduler','job4','jobGroup',NULL,'art.utils.ArtJob',FALSE,FALSE,FALSE,FALSE,'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017400056a6f626964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000047800')
INSERT INTO QRTZ_JOB_DETAILS VALUES('ArtScheduler','job5','jobGroup',NULL,'art.utils.ArtJob',FALSE,FALSE,FALSE,FALSE,'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c770800000010000000017400056a6f626964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000057800')
INSERT INTO QRTZ_TRIGGERS VALUES('ArtScheduler','trigger1','triggerGroup','job1','jobGroup',NULL,1354320000000,-1,5,'WAITING','CRON',1352194928000,0,NULL,0,'')
INSERT INTO QRTZ_TRIGGERS VALUES('ArtScheduler','trigger2','triggerGroup','job2','jobGroup',NULL,1354305600000,-1,5,'WAITING','CRON',1352194928000,0,NULL,0,'')
INSERT INTO QRTZ_TRIGGERS VALUES('ArtScheduler','trigger3','triggerGroup','job3','jobGroup',NULL,1359662400000,-1,5,'WAITING','CRON',1353580983000,0,NULL,0,'')
INSERT INTO QRTZ_TRIGGERS VALUES('ArtScheduler','trigger4','triggerGroup','job4','jobGroup',NULL,1359662400000,-1,5,'WAITING','CRON',1353260437000,0,NULL,0,'')
INSERT INTO QRTZ_TRIGGERS VALUES('ArtScheduler','trigger5','triggerGroup','job5','jobGroup',NULL,1359662400000,-1,5,'WAITING','CRON',1353260536000,0,NULL,0,'')
INSERT INTO QRTZ_CRON_TRIGGERS VALUES('ArtScheduler','trigger1','triggerGroup','0 0 3 1 * ?','Africa/Nairobi')
INSERT INTO QRTZ_CRON_TRIGGERS VALUES('ArtScheduler','trigger2','triggerGroup','0 0 23 L * ?','Africa/Nairobi')
INSERT INTO QRTZ_CRON_TRIGGERS VALUES('ArtScheduler','trigger3','triggerGroup','0 0 23 L 1 ?','Africa/Nairobi')
INSERT INTO QRTZ_CRON_TRIGGERS VALUES('ArtScheduler','trigger4','triggerGroup','0 0 23 L 1 ?','Africa/Nairobi')
INSERT INTO QRTZ_CRON_TRIGGERS VALUES('ArtScheduler','trigger5','triggerGroup','0 0 23 L 1 ?','Africa/Nairobi')
