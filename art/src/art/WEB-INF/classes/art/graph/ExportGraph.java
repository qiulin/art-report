package art.graph;

import art.utils.ArtQuery;
import art.servlets.ArtDBCP;

import java.sql.*;
import java.io.*;
import org.jfree.chart.*;
import org.jfree.data.general.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.labels.*;
import org.jfree.data.xy.*; //for xyseriescollection
import org.jfree.data.time.*; //for timeseriescollection
import org.jfree.data.category.*; //for categorydataset
import org.jfree.chart.renderer.xy.*;
import java.awt.Color; //for decoding chart background colour
import org.jfree.chart.renderer.category.*; //to display item labels
import org.jfree.ui.TextAnchor; //to display item labels
import org.jfree.chart.axis.NumberAxis; //to set the y axis range
import java.text.*; //to format numbers
import java.awt.Font;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Output charts as png or pdf files.
 * Only used when charts are scheduled to run as jobs. Files that are created
 * when charts are executed interactively are generated by the processChart method of the respective graph class
 * 
 * @author Timothy Anyona
 * @author Enrico Liboni
 */
public class ExportGraph {

    final static Logger logger = LoggerFactory.getLogger(ExportGraph.class);
    
    String fullFileName = "-No File";
    String fullFileNameWithoutExt;
    String queryName;
    String userName;
    String outputFormat;
    String y_m_d;
    String h_m_s;
    String xlabel;
    String ylabel;
    String graphOptions;
    String title;
    String exportPath;

    /**
     * Set the export directory base path
     * @param s export directory base path
     */
    public void setExportPath(String s) {
        exportPath = s;
    }

    /**
     * Get the full file name used to save the chart
     * @return the full file name used to save the chart
     */
    public String getFileName() {
        return fullFileName;
    }

    /**
     * Set the query name to be used in the filename
     * @param s query name to be used in the filename
     */
    public void setQueryName(String s) {
        queryName = ArtDBCP.cleanFileName(s);
    }

    /**
     * Set the username to be used in the filename
     * @param s username to be used in the filename
     */
    public void setUserName(String s) {
        userName = s;
    }

    /**
     * Set the file format of the chart
     * @param s file format of the chart. pdf or png
     */
    public void setOutputFormat(String s) {
        outputFormat = s;
    }

    /**
     * Set the x-axis label
     * @param value x-axis label
     */
    public void setXlabel(String value) {
        xlabel = value;
    }

    /**
     * Set the y-axis label
     * @param value y-axis label
     */
    public void setYlabel(String value) {
        ylabel = value;
    }

    /**
     * Set the graph tile
     * @param value graph tile
     */
    public void setTitle(String value) {
        title = value;
    }

    /**
     * Set graph display options
     * @param value graph display options
     */
    public void setGraphOptions(String value) {
        graphOptions = value;
    }

    //Build filename for output file
    private void buildOutputFileName() {
        java.util.Date today = new java.util.Date();

        String dateFormat = "yyyy_MM_dd";
        SimpleDateFormat dateFormatter = new SimpleDateFormat(dateFormat);
        y_m_d = dateFormatter.format(today);

        String timeFormat = "HH_mm_ss";
        SimpleDateFormat timeFormatter = new SimpleDateFormat(timeFormat);
        h_m_s = timeFormatter.format(today);

        fullFileNameWithoutExt = exportPath + userName + "-" + queryName + "-" + y_m_d + "-" + h_m_s;
    }

    /**
     * Generate chart from query results and save to a file
     * 
     * @param rs query's resultset
     * @param queryType query type
     */
    public void createFile(ResultSet rs, int queryType) {

        JFreeChart chart = null;
        int width = 600;
        int height = 400;
        String seriesName;
        ResultSetMetaData rsmd;
        boolean showLegend = true;
        boolean showTooltips = false;
        boolean showUrls = false;
        boolean showLabels;
        boolean showPoints = false;
        String bgColor = "#FFFFFF";
        int from = 0; //y axis range minimum
        int to = 0; //y axis range maximum

        ChartTheme currentChartTheme = null;
        BarPainter currentBarPainter = null;

        try {
            //ensure you have white plot backgrounds. this was changed in jfreechart 1.0.11 to default to grey
            //save current settings
            currentChartTheme = ChartFactory.getChartTheme();
            currentBarPainter = BarRenderer.getDefaultBarPainter();

            ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
            BarRenderer.setDefaultBarPainter(new StandardBarPainter());

            //build file name to use for output
            buildOutputFileName();

            //set chart options									
            rsmd = rs.getMetaData();
            seriesName = rsmd.getColumnLabel(2);

            if (ylabel == null) {
                ylabel = rsmd.getColumnLabel(1);
            }

            //process graph options	string					
            String options = "";
            boolean usingShortDescription = true;
            int indexOf = title.lastIndexOf("@");
            if (indexOf > -1) {
                options = title;
                title = title.substring(0, indexOf);
            }

            if (graphOptions != null) {
                options = graphOptions;
                usingShortDescription = false;
            }

            ArtQuery aq = new ArtQuery();
            aq.setQueryType(queryType);
            aq.setGraphDisplayOptions(options, usingShortDescription);

            showLegend = aq.isShowLegend();
            showLabels = aq.isShowLabels();
            showPoints = aq.isShowPoints();
            bgColor = aq.getGraphBgColor();
            width = aq.getGraphWidth();
            height = aq.getGraphHeight();
            from = aq.getGraphYMin();
            to = aq.getGraphYMax();

            // build the chart object
            switch (queryType) {
                case -2:
                    //pie chart				

                    //create dataset for the pie chart
                    ArtPie pieChart = new ArtPie();
                    pieChart.prepareDataset(rs);
                    DefaultPieDataset pieDataset = (DefaultPieDataset) pieChart.produceDataset(null);

                    //create chart
                    chart = ChartFactory.createPieChart3D(title, pieDataset, showLegend, showTooltips, showUrls);

                    //set chart section labels. to have name of category, data value and percentage e.g. laptops = 21 (54%)
                    PiePlot3D piePlot = (PiePlot3D) chart.getPlot();
                    if (showLabels) {
                        piePlot.setLabelGenerator(new StandardPieSectionLabelGenerator("{0} = {1} ({2})"));
                    } else {
                        piePlot.setLabelGenerator(null);
                    }

                    break;
                case -1:
                    //xy chart

                    //create dataset for the xy chart
                    ArtXY xyChart = new ArtXY();

                    xyChart.setSeriesName(seriesName);
                    xyChart.prepareDataset(rs);

                    XYSeriesCollection xyDataset = (XYSeriesCollection) xyChart.produceDataset(null);

                    //create chart								
                    chart = ChartFactory.createXYLineChart(title, xlabel, ylabel, xyDataset, PlotOrientation.VERTICAL, showLegend, showTooltips, showUrls);

                    XYPlot xyPlot = (XYPlot) chart.getPlot();

                    //show data points if required
                    if (showPoints) {
                        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) xyPlot.getRenderer();
                        renderer.setBaseShapesVisible(true);
                    }

                    //set y axis range if required
                    if (from != 0 && to != 0) {
                        NumberAxis rangeAxis = (NumberAxis) xyPlot.getRangeAxis();
                        rangeAxis.setRange(from, to);
                    }

                    break;
                case -6:
                    //time series

                    //create dataset for time series chart
                    ArtTimeSeries timeSeriesChart = new ArtTimeSeries();
                    timeSeriesChart.prepareDataset(rs);
                    TimeSeriesCollection timeSeriesDataset = (TimeSeriesCollection) timeSeriesChart.produceDataset(null);

                    //create chart				
                    chart = ChartFactory.createTimeSeriesChart(title, xlabel, ylabel, timeSeriesDataset, showLegend, showTooltips, showUrls);

                    XYPlot timePlot = (XYPlot) chart.getPlot();

                    //set y axis range if required
                    if (from != 0 && to != 0) {
                        NumberAxis rangeAxis = (NumberAxis) timePlot.getRangeAxis();
                        rangeAxis.setRange(from, to);
                    }

                    //show data points if required
                    if (showPoints) {
                        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) timePlot.getRenderer();
                        renderer.setBaseShapesVisible(true);
                    }

                    break;
                case -7:
                    //date series

                    //create dataset for date series chart
                    ArtDateSeries dateSeriesChart = new ArtDateSeries();
                    dateSeriesChart.prepareDataset(rs);
                    TimeSeriesCollection dateSeriesDataset = (TimeSeriesCollection) dateSeriesChart.produceDataset(null);

                    //create chart				
                    chart = ChartFactory.createTimeSeriesChart(title, xlabel, ylabel, dateSeriesDataset, showLegend, showTooltips, showUrls);

                    XYPlot datePlot = (XYPlot) chart.getPlot();

                    //set y axis range if required
                    if (from != 0 && to != 0) {
                        NumberAxis rangeAxis = (NumberAxis) datePlot.getRangeAxis();
                        rangeAxis.setRange(from, to);
                    }

                    //show data points if required
                    if (showPoints) {
                        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) datePlot.getRenderer();
                        renderer.setBaseShapesVisible(true);
                    }

                    break;
                case -10:
                    //speedometer

                    //create dataset for speedometer chart
                    ArtSpeedometer speedometerChart = new ArtSpeedometer();
                    speedometerChart.prepareDataset(rs);
                    DefaultValueDataset speedometerDataset = (DefaultValueDataset) speedometerChart.produceDataset(null);

                    //create chart. chartfactory doesn't have a method for creating a meter chart
                    MeterPlot speedometerPlot = new MeterPlot(speedometerDataset);
                    chart = new JFreeChart(title, new Font("SansSerif", Font.BOLD, 18), speedometerPlot, showLegend); //font same as in cewolf to achieve similar look

                    //use default chart theme to achieve same look as in interactive (cewolf) chart. cewolf applies the current chart theme to meter plots
                    ChartTheme defaultChartTheme = StandardChartTheme.createJFreeTheme();
                    defaultChartTheme.apply(chart);

                    //add ranges and any custom formatting
                    speedometerChart.finalizePlot(speedometerPlot);

                    break;
                default:
                    //charts that use the category dataset. bar and line graphs	

                    //create dataset for chart
                    ArtCategorySeries categoryChart = new ArtCategorySeries();
                    categoryChart.prepareDataset(rs);
                    DefaultCategoryDataset chartDataset = (DefaultCategoryDataset) categoryChart.produceDataset(null);

                    //create appropriate chart
                    switch (queryType) {
                        case -3:
                            //horizontal bar graph 3d
                            chart = ChartFactory.createBarChart3D(title, xlabel, ylabel, chartDataset, PlotOrientation.HORIZONTAL, showLegend, showTooltips, showUrls);
                            break;
                        case -4:
                            //vertical bar graph 3d
                            chart = ChartFactory.createBarChart3D(title, xlabel, ylabel, chartDataset, PlotOrientation.VERTICAL, showLegend, showTooltips, showUrls);
                            break;
                        case -5:
                            //line graph
                            chart = ChartFactory.createLineChart(title, xlabel, ylabel, chartDataset, PlotOrientation.VERTICAL, showLegend, showTooltips, showUrls);

                            //show data points if required
                            if (showPoints) {
                                CategoryPlot linePlot = (CategoryPlot) chart.getPlot();
                                LineAndShapeRenderer renderer = (LineAndShapeRenderer) linePlot.getRenderer();
                                renderer.setBaseShapesVisible(true);
                            }
                            break;
                        case -8:
                            //stacked vertical bar graph 3d
                            chart = ChartFactory.createStackedBarChart3D(title, xlabel, ylabel, chartDataset, PlotOrientation.VERTICAL, showLegend, showTooltips, showUrls);
                            break;
                        case -9:
                            //stacked horizontal bar graph 3d
                            chart = ChartFactory.createStackedBarChart3D(title, xlabel, ylabel, chartDataset, PlotOrientation.HORIZONTAL, showLegend, showTooltips, showUrls);
                            break;
                    }

                    if (chart != null) {
                        CategoryPlot categoryPlot = (CategoryPlot) chart.getPlot();

                        //display labels if required
                        if (showLabels) {
                            DecimalFormat valueFormatter;
                            NumberFormat nf = NumberFormat.getInstance();
                            valueFormatter = (DecimalFormat) nf;

                            CategoryItemRenderer renderer = categoryPlot.getRenderer(); //could be a version of BarRenderer or LineAndShapeRenderer for line graphs
                            CategoryItemLabelGenerator generator = new StandardCategoryItemLabelGenerator("{2}", valueFormatter);
                            renderer.setBaseItemLabelGenerator(generator);
                            renderer.setBaseItemLabelsVisible(true);

                            renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.TOP_CENTER));
                            renderer.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.TOP_CENTER));

                            categoryPlot.setRenderer(renderer);
                        }

                        //set y axis range if required
                        if (from != 0 && to != 0) {
                            NumberAxis rangeAxis = (NumberAxis) categoryPlot.getRangeAxis();
                            rangeAxis.setRange(from, to);
                        }

                        //make x axis labels more readable by breaking them into 2 lines
                        categoryPlot.getDomainAxis().setMaximumCategoryLabelLines(2);
                    }
            }

            //save chart as png or pdf file	
            if (chart != null) {
                //set chart background colour. doesn't include plot background. plot always white
                chart.setBackgroundPaint(Color.decode(bgColor));

                if (outputFormat.equals("png")) {
                    fullFileName = fullFileNameWithoutExt + ".png";
                    ChartUtilities.saveChartAsPNG(new File(fullFileName), chart, width, height);
                } else if (outputFormat.equals("pdf")) {
                    fullFileName = fullFileNameWithoutExt + ".pdf";
                    PdfGraph.createPdf(chart, fullFileName, title);
                }
            }

        } catch (Exception e) {
           logger.error("Error",e);

            fullFileName = "-<b>Error:</b> " + e;
            if (fullFileName.length() > 4000) {
                fullFileName = fullFileName.substring(0, 4000);
            }
        } finally {
            //restore chart theme
            if (currentChartTheme != null) {
                ChartFactory.setChartTheme(currentChartTheme);
            }
            if (currentBarPainter != null) {
                BarRenderer.setDefaultBarPainter(currentBarPainter);
            }
        }
    }
}
