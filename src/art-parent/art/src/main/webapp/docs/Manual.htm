<!DOCTYPE html>
<html>
 <head> 
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" /> 
  <meta name="pdfTitle" content="ART Manual" /> 
  <meta name="version" content="3.0-alpha1" /> 
  <title>ART - Manual</title> 
  <style type="text/css">
			table
			{
				border-collapse: collapse; /* 'cellspacing=0' equivalent */
			}

			table td, table th
			{
				padding: 5px; /* 'cellpadding' equivalent */
			}
		</style> 
 </head> 
 <body class="wiki-Tips" id="forge"> 
  <div> 
   <p><strong>ART Manual</strong></p> 
  </div> 
  <div class="markdown_content">
   <div class="toc"> 
    <ol> 
     <li><a href="#introduction">Introduction</a> 
      <ol> 
       <li><a href="#overview">Overview</a></li> 
       <li><a href="#administration-overview">Administration Overview</a></li> 
      </ol></li> 
     <li><a href="#settings">Settings</a></li> 
     <li><a href="#datasources">Datasources</a> 
      <ol> 
       <li><a href="#creating-a-new-datasource">Creating a new datasource</a></li> 
       <li><a href="#some-jdbc-drivers-and-urls">Some JDBC Drivers and URLs</a></li> 
      </ol></li> 
     <li><a href="#users">Users</a> 
      <ol> 
       <li><a href="#setting-up-a-user">Setting up a user</a></li> 
       <li><a href="#setting-up-the-public-user">Setting up the Public User</a></li> 
      </ol></li> 
     <li><a href="#authentication">Authentication</a> 
      <ol> 
       <li><a href="#internal-authentication">Internal Authentication</a></li> 
       <li><a href="#external-authenticaton">External Authenticaton</a> 
        <ol> 
         <li><a href="#windows-authentication">Windows Authentication</a></li> 
         <li><a href="#ldap-authentication">LDAP Authentication</a></li> 
         <li><a href="#database-authentication">Database Authentication</a></li> 
         <li><a href="#custom-authentication-sources">Custom Authentication Sources</a></li> 
        </ol></li> 
      </ol></li> 
     <li><a href="#user-groups">User Groups</a></li> 
     <li><a href="#user-group-membership">User Group Membership</a></li> 
     <li><a href="#query-groups">Query Groups</a></li> 
     <li><a href="#queries">Queries</a> 
      <ol> 
       <li><a href="#introduction">Introduction</a></li> 
       <li><a href="#creating-a-query">Creating a query</a></li> 
       <li><a href="#query-types">Query Types</a></li> 
       <li><a href="#parameters">Parameters</a></li> 
       <li><a href="#executing-a-query-via-url">Executing a query via URL</a></li> 
       <li><a href="#view-modes">View Modes</a></li> 
       <li><a href="#some-useful-queries">Some Useful Queries</a></li> 
      </ol></li> 
     <li><a href="#multiple-statements">Multiple Statements</a></li> 
     <li><a href="#lov-queries">LOV Queries</a> 
      <ol> 
       <li><a href="#example">Example</a></li> 
      </ol></li> 
     <li><a href="#dynamic-queries">Dynamic Queries</a> 
      <ol> 
       <li><a href="#operators">Operators</a></li> 
       <li><a href="#dynamic-query-examples">Dynamic Query Examples</a></li> 
      </ol></li> 
     <li><a href="#drill-down-queries">Drill Down Queries</a> 
      <ol> 
       <li><a href="#defining-the-main-query">Defining the main query</a></li> 
       <li><a href="#defining-the-drill-down-query">Defining the drill down query</a></li> 
       <li><a href="#example">Example</a></li> 
       <li><a href="#using-the-main-querys-parameters">Using the main query's parameters</a></li> 
      </ol></li> 
     <li><a href="#dynamic-query-datasources">Dynamic Query Datasources</a></li> 
     <li><a href="#rss-feeds">RSS Feeds</a></li> 
     <li><a href="#dashboards">Dashboards</a> 
      <ol> 
       <li><a href="#features">Features</a></li> 
       <li><a href="#syntax">Syntax</a></li> 
      </ol></li> 
     <li><a href="#text-queries">Text Queries</a></li> 
     <li><a href="#jxls-spreadsheets">jXLS Spreadsheets</a></li> 
     <li><a href="#pivot-tables-olap">Pivot Tables (OLAP)</a> 
      <ol> 
       <li><a href="#mondrian">Mondrian</a></li> 
       <li><a href="#mondrian-xmla">Mondrian XMLA</a></li> 
       <li><a href="#microsoft-xmla">Microsoft XMLA</a></li> 
      </ol></li> 
     <li><a href="#user-privileges">User Privileges</a></li> 
     <li><a href="#admin-privileges">Admin Privileges</a></li> 
     <li><a href="#rules">Rules</a></li> 
     <li><a href="#chained-parameters">Chained Parameters</a> 
      <ol> 
       <li><a href="#example">Example</a></li> 
       <li><a href="#default-values">Default Values</a></li> 
      </ol></li> 
     <li><a href="#scheduling">Scheduling</a> 
      <ol> 
       <li><a href="#scheduling-a-new-job">Scheduling a new job</a></li> 
       <li><a href="#job-types">Job Types</a></li> 
       <li><a href="#job-archives">Job Archives</a></li> 
       <li><a href="#job-auditing">Job Auditing</a></li> 
       <li><a href="#saved-schedules">Saved Schedules</a></li> 
       <li><a href="#job-duration">Job Duration</a></li> 
       <li><a href="#shared-jobs">Shared Jobs</a> 
        <ol> 
         <li><a href="#split-jobs">Split Jobs</a></li> 
        </ol></li> 
       <li><a href="#random-start-times">Random Start Times</a></li> 
      </ol></li> 
     <li><a href="#cached-results">Cached Results</a> 
      <ol> 
       <li><a href="#create-a-new-cached-result">Create a new Cached Result</a></li> 
       <li><a href="#accessing-a-cached-result">Accessing a Cached Result</a></li> 
      </ol></li> 
     <li><a href="#dynamic-recipients">Dynamic Recipients</a> 
      <ol> 
       <li><a href="#dynamic-recipients-only">Dynamic Recipients only</a></li> 
       <li><a href="#dynamic-recipients-personalization">Dynamic Recipients + Personalization</a></li> 
       <li><a href="#dynamic-recipients-filtering">Dynamic Recipients + Filtering</a></li> 
      </ol></li> 
     <li><a href="#single-sign-on">Single Sign On</a> 
      <ol> 
       <li><a href="#prerequisites">Prerequisites</a></li> 
       <li><a href="#on-the-active-directory-server">On the Active Directory server</a></li> 
       <li><a href="#on-the-application-server">On the Application server</a></li> 
       <li><a href="#on-the-client-machine">On the client machine</a> 
        <ol> 
         <li><a href="#omitting-the-credentials-box">Omitting the credentials box</a></li> 
        </ol></li> 
       <li><a href="#using-a-keytab-file">Using a keytab file</a></li> 
       <li><a href="#changing-the-spnego-user">Changing the spnego user</a></li> 
      </ol></li> 
     <li><a href="#application-logs">Application Logs</a> 
      <ol> 
       <li><a href="#sql-logging">SQL Logging</a></li> 
      </ol></li> 
     <li><a href="#tomcat-configuration">Tomcat Configuration</a> 
      <ol> 
       <li><a href="#memory-options">Memory options</a> 
        <ol> 
         <li><a href="#windows">Windows</a></li> 
         <li><a href="#linux">Linux</a></li> 
        </ol></li> 
       <li><a href="#accessing-tomcat-via-apache">Accessing Tomcat via Apache</a> 
        <ol> 
         <li><a href="#using-mod_proxy">Using mod_proxy</a></li> 
         <li><a href="#using-mod_proxy_ajp">Using mod_proxy_ajp</a></li> 
         <li><a href="#using-mod_jk">Using mod_jk</a></li> 
        </ol></li> 
      </ol></li> 
     <li><a href="#customizing-art">Customizing ART</a> 
      <ol> 
       <li><a href="#using-live-files">Using live files</a> 
        <ol> 
         <li><a href="#setting-up-apache-ant">Setting up Apache Ant</a></li> 
         <li><a href="#customizing-java-files">Customizing java files</a></li> 
         <li><a href="#customizing-jsp-files">Customizing jsp files</a></li> 
         <li><a href="#customizing-other-files">Customizing other files</a></li> 
         <li><a href="#updating-jasperreports">Updating jasperreports</a></li> 
        </ol></li> 
       <li><a href="#using-ant">Using Ant</a> 
        <ol> 
         <li><a href="#using-ant-without-an-ide">Using Ant without an IDE</a></li> 
         <li><a href="#using-ant-with-netbeans">Using Ant with NetBeans</a></li> 
        </ol></li> 
       <li><a href="#using-maven">Using Maven</a> 
        <ol> 
         <li><a href="#using-maven-without-an-ide">Using Maven without an IDE</a></li> 
         <li><a href="#using-maven-with-netbeans">Using Maven with NetBeans</a></li> 
         <li><a href="#using-maven-with-eclipse">Using Maven with Eclipse</a></li> 
         <li><a href="#compiling-under-java-7">Compiling under Java 7</a></li> 
        </ol></li> 
       <li><a href="#custom-export-path">Custom Export Path</a></li> 
      </ol></li> 
     <li><a href="#support">Support</a> 
      <ol> 
       <li><a href="#resources">Resources</a></li> 
      </ol></li> 
    </ol> 
   </div> 
   <p></p> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="introduction">Introduction</h1> 
     <h2 id="overview">Overview</h2> 
     <p>ART is a Java EE web application that enables quick deployment of SQL query results.</p> 
     <ul> 
      <li><strong>ART Administrators</strong> define datasources, queries, users, privileges etc.</li> 
      <li><strong>ART Users</strong> execute queries and view the results in a browser or save the data in a variety of formats.<br /> </li> 
     </ul> 
     <p>ART is open source software distributed under the <a class="" href="http://www.gnu.org/licenses/gpl-2.0.html" rel="nofollow">GPL license</a>. You can install and use it for personal or commercial purposes without any charge.</p> 
     <h2 id="administration-overview">Administration Overview</h2> 
     <p>The Administrators define a number of items including</p> 
     <ul> 
      <li><strong>Settings</strong> used to configure how ART works</li> 
      <li><strong>Datasources</strong> against which to execute queries</li> 
      <li><strong>Query Groups</strong> used to associate queries</li> 
      <li><strong>Queries</strong> (Tablular, Chart, Dashboard etc)</li> 
      <li><strong>User Groups</strong> used to manage users</li> 
      <li><strong>Users</strong></li> 
      <li><strong>User Group Membership</strong> to add or remove users from user groups</li> 
      <li><strong>User/User Group Privileges</strong> to determine which users or user groups can view which queries</li> 
      <li><strong>Admin Privileges</strong> to determine which query groups and datasources administrators can manage</li> 
      <li><strong>Rules</strong> to be applied on queries if any</li> 
      <li><strong>Rule Values</strong> to be applied for specific users or user groups</li> 
      <li><strong>Shared Jobs</strong> to define which users can see which job outputs</li> 
      <li><strong>Schedules</strong> to manage schedules that can be used when creating jobs</li> 
     </ul> 
     <p>These are defined and managed from the <strong>Admin Console</strong>.<br /> </p> 
     <p><img alt="admin console" src="admin-console.png" /></p> 
     <p>The typical flow when defining a new query is</p> 
     <ul> 
      <li>Obtain the plain SQL statement and identify any parameters</li> 
      <li>If the target datasource is not already defined, define it</li> 
      <li>If new queries are needed in order to define lists of values (LOVs) to dynamically generate parameter values, define them</li> 
      <li>Define the query and query parameters</li> 
      <li>Modify user privileges to allow users to execute the query</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="settings">Settings</h1> 
     <p>Certain settings are used to configure how ART works. From the <strong>Admin Console</strong>, use the <strong>Settings</strong> option to manage ART settings.</p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Setting</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>ART Database Username</strong></td> 
        <td>Database username for the ART repository. The ART repository is the database used by ART to hold details like users, queries etc. The user needs SELECT, INSERT, UPDATE and DELETE rights on the ART tables.</td> 
       </tr> 
       <tr> 
        <td><strong>ART Database Password</strong></td> 
        <td>Database password for the ART repository.</td> 
       </tr> 
       <tr> 
        <td><strong>ART Database JDBC Driver</strong></td> 
        <td>JDBC driver name for the ART repository. If you are using a JNDI datasource, this must be blank.</td> 
       </tr> 
       <tr> 
        <td><strong>ART Database JDBC URL</strong></td> 
        <td>Database URL for the ART repository. If you are using a JNDI datasource, set this to the JNDI name of your datasource e.g. <code>jdbc/MyDatasource</code>. You can also use the full JNDI url e.g. <code>java:comp/env/jdbc/MyDatasource</code></td> 
       </tr> 
       <tr> 
        <td><strong>Connection Pool Timeout (mins)</strong></td> 
        <td>How long an idle connection should be maintained in the connection pool before being closed</td> 
       </tr> 
       <tr> 
        <td><strong>Connection Test SQL</strong></td> 
        <td>Short SQL query used to determine if a connection is alive e.g. &quot;Select 1&quot;</td> 
       </tr> 
       <tr> 
        <td><strong>ART Administrator Email</strong></td> 
        <td>Email address which is displayed in mailto link at the bottom of ART web pages</td> 
       </tr> 
       <tr> 
        <td><strong>SMTP Server</strong></td> 
        <td>Host name for the email server used to send emails</td> 
       </tr> 
       <tr> 
        <td><strong>ART CSS (skin)</strong></td> 
        <td>Path to CSS file used to determine the look of ART web pages. This file can be customized as desired.</td> 
       </tr> 
       <tr> 
        <td><strong>Page Footer Logo</strong></td> 
        <td>Image displayed in the footer of ART web pages</td> 
       </tr> 
       <tr> 
        <td><strong>SMTP Username</strong></td> 
        <td>Username to be used when sending emails if the email server is configured to require SMTP authentication. If SMTP authentication is not required by the email server, leave this blank.</td> 
       </tr> 
       <tr> 
        <td><strong>SMTP Password</strong></td> 
        <td>Password to be used when sending emails if the email server is configured to require SMTP authentication. If SMTP authentication is not required by the email server, leave this blank.</td> 
       </tr> 
       <tr> 
        <td><strong>Use Secure SMTP</strong></td> 
        <td>Defines whether to use secure SMTP when sending emails</td> 
       </tr> 
       <tr> 
        <td><strong>SMTP Port</strong></td> 
        <td>Port on which SMTP server is listening</td> 
       </tr> 
       <tr> 
        <td><strong>Show standard header and footer in public_user sessions</strong></td> 
        <td>Show standard header (navigation links, login time etc) and footer for queries executed as <strong>public_user</strong></td> 
       </tr> 
       <tr> 
        <td><strong>PDF Document Page Size</strong></td> 
        <td>Size and layout of documents generated by pdf output view mode</td> 
       </tr> 
       <tr> 
        <td><strong>PDF Font Name</strong></td> 
        <td>Name of a custom font that should be used in generation of pdf output, and charts. For jasper reports, custom fonts need to be defined in the jrxml file. See the <a class="alink" href="/p/art/wiki/Tips/">[wiki:Tips]</a> documentation for details on how to use custom fonts with jasper reports.</td> 
       </tr> 
       <tr> 
        <td><strong>PDF Font File</strong></td> 
        <td>Path to a font file that contains the custom font</td> 
       </tr> 
       <tr> 
        <td><strong>PDF Font Directory</strong></td> 
        <td>Path to a directory that contains font files, one of which may be used in the pdf font name field</td> 
       </tr> 
       <tr> 
        <td><strong>PDF Font Encoding</strong></td> 
        <td>Encoding to use for the custom font</td> 
       </tr> 
       <tr> 
        <td><strong>PDF Font Embedded</strong></td> 
        <td>Whether the custom font should be embedded in the generated pdf output</td> 
       </tr> 
       <tr> 
        <td><strong>Default Max Rows</strong></td> 
        <td>The default maximum number of rows to output for a query</td> 
       </tr> 
       <tr> 
        <td><strong>Specific Max Rows</strong></td> 
        <td>The maximum number of rows to output for specific view modes defined as a comma separated list of settings with each setting in the format <code>viewmode:value</code> e.g. <code>htmlGrid:5000,xls:10000</code>. View modes are case sensitive.</td> 
       </tr> 
       <tr> 
        <td><strong>RSS Link</strong></td> 
        <td>RSS URL if ART will be used to generate RSS feeds</td> 
       </tr> 
       <tr> 
        <td><strong>Mondrian Cache Expiry (hours)</strong></td> 
        <td>Number of hours after which the mondrian cache is automatically cleared. Set to 0 to disable automatic clearing.</td> 
       </tr> 
       <tr> 
        <td><strong>Date Format</strong></td> 
        <td>Format to be used in query output for the date portion of date/datetime/timestamp fields. Format strings to be used is as per the java SimpleDateFormat class. See <a href="http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html" rel="nofollow">http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html</a></td> 
       </tr> 
       <tr> 
        <td><strong>Time Format</strong></td> 
        <td>Format to be used in query output for the time portion of date/datetime/timestamp fields. Format strings to be used is as per the java SimpleDateFormat class. See <a href="http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html" rel="nofollow">http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html</a></td> 
       </tr> 
       <tr> 
        <td><strong>Scheduling Enabled</strong></td> 
        <td>Defines whether jobs can be scheduled and whether scheduled jobs can run.</td> 
       </tr> 
       <tr> 
        <td><strong>Available View Modes</strong></td> 
        <td>The view modes that will be available to users when they run a query, defined as a comma separated list. View mode names are case sensitive and the order specified will be respected in the list shown to users. The first one is the default.</td> 
       </tr> 
       <tr> 
        <td><strong>Maximum Running Queries</strong></td> 
        <td>The maximum number of queries that can be running at any one time</td> 
       </tr> 
       <tr> 
        <td><strong>Maximum Pool Connections</strong></td> 
        <td>The maximum number of connections a connection pool can open to the same datasource. Further requests are queued.</td> 
       </tr> 
       <tr> 
        <td><strong>Show Results Inline</strong></td> 
        <td>Defines whether query results are shown inline below the parameter selection box or on a new page.</td> 
       </tr> 
       <tr> 
        <td><strong>Display Null Value</strong></td> 
        <td>Defines whether the string &quot;null&quot; is displayed where the field in the query is null</td> 
       </tr> 
       <tr> 
        <td><strong>LDAP - Server</strong></td> 
        <td>LDAP server URL. Used for external authentication against an LDAP server.</td> 
       </tr> 
       <tr> 
        <td><strong>LDAP - Authentication</strong></td> 
        <td>Authentication method to be used with the LDAP server</td> 
       </tr> 
       <tr> 
        <td><strong>LDAP - Users Parent DN</strong></td> 
        <td>The parent DN of the user entries in the LDAP directory. Not required for Active Directory authentication.</td> 
       </tr> 
       <tr> 
        <td><strong>LDAP - Realm</strong></td> 
        <td>The LDAP realm when using a Digest-MD5 authentication method. If blank, the default realm will be used.</td> 
       </tr> 
       <tr> 
        <td><strong>Windows - Domain Controller</strong></td> 
        <td>Host name of the windows domain controller. Used for external authentication against a windows domain.</td> 
       </tr> 
       <tr> 
        <td><strong>Windows - Allowed Domains</strong></td> 
        <td>Domain name of the windows domain used for external authentication. Multiple domains can be specified, separated by commas.</td> 
       </tr> 
       <tr> 
        <td><strong>Database - JDBC Driver</strong></td> 
        <td>JDBC driver for the database used for external authentication</td> 
       </tr> 
       <tr> 
        <td><strong>Database - JDBC URL</strong></td> 
        <td>JDBC URL for the database used for external authentication</td> 
       </tr> 
       <tr> 
        <td><strong>Login Page</strong></td> 
        <td>The login page that ART will display by default. Set to <strong>Internal Login</strong> if authentication will be done by ART, or other appropriate settings if an external authentication source will be used. Setting it to <strong>Default</strong> will also use internal authentication but will display an additional page allowing for selecting the normal view or the mobile version of ART.</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>Once saved, these settings are stored in a file named <strong>art.properties</strong> in the ART_HOME\WEB-INF directory, where ART_HOME is the directory where ART is deployed.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="datasources">Datasources</h1> 
     <p>A datasource is a target database on which you want to run queries. From the <strong>Admin Console</strong>, use the <strong>Datasources</strong> option to manage datasources.</p> 
     <h2 id="creating-a-new-datasource">Creating a new datasource</h2> 
     <p>From the Manage Datasources page, choose the ADD option and then specify the settings for the datasource. ART can execute queries against any datasource for which a JDBC driver is available. <br /> </p> 
     <p><img alt="add datasource" src="add-datasource.png" /></p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Attribute</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>Datasource Name</strong></td> 
        <td>A name to identify the datasource</td> 
       </tr> 
       <tr> 
        <td><strong>JDBC Driver</strong></td> 
        <td>JDBC driver name. If you are using a JNDI datasource, this must be blank.</td> 
       </tr> 
       <tr> 
        <td><strong>JDBC URL</strong></td> 
        <td>JDBC URL of the target database. If you are using a JNDI datasource, set this to the JNDI name of your datasource e.g. <code>jdbc/MyDatasource</code>. You can also use the full JNDI url e.g. <code>java:comp/env/jdbc/MyDatasource</code></td> 
       </tr> 
       <tr> 
        <td><strong>Username</strong></td> 
        <td>Database user on the target database. This user should have <strong>minimum rights</strong> on the database and tables you plan to use in your queries, mostly only SELECT rights to the relevant tables.</td> 
       </tr> 
       <tr> 
        <td><strong>Password</strong></td> 
        <td>Password for the database user</td> 
       </tr> 
       <tr> 
        <td><strong>Connection Pool Timeout</strong></td> 
        <td>Sets how long a database connection can stay idle in the connection pool before being closed</td> 
       </tr> 
       <tr> 
        <td><strong>Connection Test SQL</strong></td> 
        <td>You can specify a minimal SQL query that is used to test if a connection in the pool is valid</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>Click on the <strong>Submit</strong> button. A connection test is performed to determine if the datasource details are valid and then the datasource is saved.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>The Database Type field is not saved. It is only there as a guide, to help fill the JDBC Driver and JDBC URL fields.</li> 
      <li>From the Manage Datasources page you can also refresh and analyze the status of database connections, as well as clear the mondrian cache. When viewing datasource status, the &quot;In Use&quot; item indicates whether a connection is in use at that time and the last time it was used.</li> 
      <li>You may define any number of datasources. The ART repository database itself where details of queries, users etc are stored can be a target database.</li> 
      <li>When ART connects to a database to execute a query, a JDBC connection is established. This connection is not closed after the query finishes execution. It is maintained open to serve further requests. This reduces the overhead due to authentication when opening new connections.</li> 
      <li>Connections do not always close gracefully - for example if a network outage occurs a broken connection might stay in the pool and would throw an error when used. The <strong>Connection Test SQL</strong> query is used every <strong>timeout</strong> minutes to validate the connection. If it does not execute successfully, the connection is closed and removed from the pool.</li> 
     </ul> 
     <h2 id="some-jdbc-drivers-and-urls">Some JDBC Drivers and URLs</h2> 
     <p>Database: <strong>CUBRID</strong></p> 
     <p>Driver Name: cubrid.jdbc.driver.CUBRIDDriver</p> 
     <p>JDBC URL: <code>jdbc:cubrid:&lt;server_name&gt;:&lt;port&gt;:&lt;database_name&gt;[:?&lt;property1&gt;=&lt;value1&gt;[&amp;&lt;property2&gt;=&lt;value2&gt;][&amp;...]</code> (default port is 33000)</p> 
     <p>Driver Available from: <a href="http://www.cubrid.org" rel="nofollow">http://www.cubrid.org</a><br /> <br /><br /></p> 
     <p>Database: <strong>Oracle</strong></p> 
     <p>Driver Name: oracle.jdbc.OracleDriver</p> 
     <p>JDBC URL: <code>jdbc:oracle:thin:@&lt;server_name&gt;:&lt;port&gt;:&lt;sid&gt;</code> (default port is 1521)</p> 
     <p>Driver Available from: <a href="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html" rel="nofollow">http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html</a><br /> <br /><br /></p> 
     <p>Database: <strong>MySQL</strong></p> 
     <p>Driver Name: com.mysql.jdbc.Driver</p> 
     <p>JDBC URL: <code>jdbc:mysql://&lt;server_name&gt;[:port]/&lt;database_name&gt;[?&lt;property&gt;=&lt;value&gt;[&amp;...]</code> (default port is 3306)</p> 
     <p>Driver Available from: <a href="http://dev.mysql.com/downloads/connector/j/" rel="nofollow">http://dev.mysql.com/downloads/connector/j/</a><br /> <br /><br /></p> 
     <p>Database: <strong>PostgreSQL</strong></p> 
     <p>Driver Name: org.postgresql.Driver</p> 
     <p>JDBC URL: <code>jdbc:postgresql://&lt;server_name&gt;[:port]/&lt;database_name&gt;[?&lt;property&gt;=&lt;value&gt;[&amp;...]</code> (default port is 5432)</p> 
     <p>Driver Available from: <a href="http://jdbc.postgresql.org/" rel="nofollow">http://jdbc.postgresql.org/</a><br /> <br /><br /></p> 
     <p>Database: <strong>SQL Server (Microsoft driver)</strong></p> 
     <p>Driver Name: com.microsoft.sqlserver.jdbc.SQLServerDriver</p> 
     <p>JDBC URL: <code>jdbc:sqlserver://&lt;server_name&gt;[:port];databaseName=&lt;database_name&gt;[;instanceName=&lt;instance_name&gt;][;&lt;property&gt;=&lt;value&gt;[;...]</code> (default port is 1433)</p> 
     <p>Driver Available from: <a href="http://msdn.microsoft.com/en-us/data/aa937724.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/data/aa937724.aspx</a><br /> <br /><br /></p> 
     <p>Database: <strong>SQL Server (jTDS driver)</strong></p> 
     <p>Driver Name: net.sourceforge.jtds.jdbc.Driver</p> 
     <p>JDBC URL: <code>jdbc:jtds:sqlserver://&lt;server_name&gt;[:port]/&lt;database_name&gt;[;instance=&lt;instance_name&gt;][;&lt;property&gt;=&lt;value&gt;[;...]</code> (default port is 1433)</p> 
     <p>Driver Available from: <a href="http://jtds.sourceforge.net">http://jtds.sourceforge.net</a><br /> <br /><br /></p> 
     <p>Database: <strong>HSQLDB (Standalone mode)</strong></p> 
     <p>Driver Name: org.hsqldb.jdbcDriver</p> 
     <p>JDBC URL: <code>jdbc:hsqldb:file:&lt;file_path&gt;[;shutdown=true;hsqldb.write_delay=false;create=false][;&lt;property&gt;=&lt;value&gt;[;...]</code></p> 
     <p>Driver Available from: <a href="http://hsqldb.org/" rel="nofollow">http://hsqldb.org/</a><br /> <br /><br /></p> 
     <p>Database: <strong>HSQLDB (Server mode)</strong></p> 
     <p>Driver Name: org.hsqldb.jdbcDriver</p> 
     <p>JDBC URL: <code>jdbc:hsqldb:hsql://&lt;server_name&gt;[:port]/&lt;database_alias&gt;[;&lt;property&gt;=&lt;value&gt;[;...]</code> (default port is 9001)</p> 
     <p>Driver Available from: <a href="http://hsqldb.org/" rel="nofollow">http://hsqldb.org/</a><br /> <br /><br /></p> 
     <p>Database: <strong>DB2 (IBM Data Server Driver for JDBC and SQLJ)</strong></p> 
     <p>Driver Name: com.ibm.db2.jcc.DB2Driver</p> 
     <p>JDBC URL: <code>jdbc:db2://&lt;server_name&gt;[:port]/&lt;database_name&gt;[:&lt;property&gt;=&lt;value&gt;[;...]</code> (default port for IBM DB2 is many times one of the following: 446, 6789, or 50000)</p> 
     <p>Driver Available from: <a href="http://www-01.ibm.com/support/docview.wss?rs=4020&amp;uid=swg21385217" rel="nofollow">http://www-01.ibm.com/support/docview.wss?rs=4020&amp;uid=swg21385217</a> (registration required).<br /> This driver can connect to a DB2 database on any platform i.e. iSeries, zSeries, or Intel-based machines with Linux or Windows. <br /> <br /><br /></p> 
     <p>Database: <strong>DB2 for iSeries (Toolbox driver)</strong></p> 
     <p>Driver Name: com.ibm.as400.access.AS400JDBCDriver</p> 
     <p>JDBC URL: <code>jdbc:as400://&lt;server_name&gt;;prompt=false;translate binary=true[;&lt;property&gt;=&lt;value&gt;[;...]</code></p> 
     <p>Driver Available from: <a href="http://jt400.sourceforge.net/">http://jt400.sourceforge.net/</a><br /> <br /><br /></p> 
     <p>Database: <strong>Generic ODBC Datasource</strong></p> 
     <p>Driver Name: sun.jdbc.odbc.JdbcOdbcDriver</p> 
     <p>JDBC URL: <code>jdbc:odbc:&lt;dsn_name&gt;</code><br /> <br /><br /></p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>The sun JDBC-ODBC bridge driver is available by default. You need to set up the DSN on the server. For optimal performance you should use the specific DBMS JDBC driver.</li> 
      <li>ART comes with drivers for CUBRID, PostgreSQL, MySQL, HSQLDB so you don't need to download these drivers</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="users">Users</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>Users</strong> option to manage users.</p> 
     <h2 id="setting-up-a-user">Setting up a user</h2> 
     <p>From the Manage Users page, use the ADD option to create a user.</p> 
     <p>The broad categories of users are:</p> 
     <ul> 
      <li><strong>User</strong> - Normal User, Normal User allowed to schedule jobs</li> 
      <li><strong>Low-privileged administrators</strong> - Junior Admin (can only edit queries), Mid Admin (can manage user privileges too)</li> 
      <li><strong>High-privileged administrators</strong> - Standard Admin (can edit users and manage admin privileges), Senior Admin (can edit datasources, groups, rules etc), Super Admin (can manage everything).</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>When adding a new user who will be authenticated by ART, you must specify a password, otherwise the user will not be able to log in successfully. If you are using an external authentication mechanism, you may leave the password field blank.</li> 
      <li>When logging in, usernames are not case sensitive but passwords are case sensitive. </li> 
      <li>It is always possible to log into ART as a Super Admin by specifying the ART repository database username and password. If the ART repository database is moved to a different server or the repository database password is changed or forgotten, you can delete the art.properties file before starting ART in order to specify the updated repository details and be able to log in. The repository data is not affected. Saving a copy of the art.properties file in a backup location before doing this is a good idea.</li> 
      <li>It is possible to limit the datasources and query groups an administrator can deal with using the <strong>Admin Privileges</strong> option from the <strong>Admin Console</strong>.</li> 
     </ul> 
     <h2 id="setting-up-the-public-user">Setting up the Public User</h2> 
     <p>If you want a query to be executable by anyone, without authentication, you can define a user with the special username <strong>public_user</strong> and grant this user access to the query. This is useful for availing reports without requiring users to log in to ART.</p> 
     <p>When editing a query, in the <strong>Query Editor</strong> page, you can see the direct URL you can use to execute a query. If the query has been granted to the public user, anyone can use this link, appending <strong>&amp;_public_user=true</strong>, to run it.</p> 
     <p>For a link to a Dashboard query to work correctly without authentication, the public user needs to be given access to all the queries in the dashboard.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="authentication">Authentication</h1> 
     <h2 id="internal-authentication">Internal Authentication</h2> 
     <p>By default, ART uses internal authentication, which authenticates users with a username and password combination defined and stored within ART. Users can change their passwords from within ART using the <strong>Change Password</strong> link on the Start page.</p> 
     <p>Do the following to configure ART to use internal authentication.</p> 
     <ul> 
      <li>Log in to ART using an admin user and go to the Settings page</li> 
      <li>Under the Optional Settings section, set the Login Page to <strong>Internal Login</strong></li> 
      <li>Click on Submit to save these settings</li> 
     </ul> 
     <h2 id="external-authenticaton">External Authenticaton</h2> 
     <p>ART can be configured to authenticate users using an external source instead of authenticating with its own username/password. This allows one to use other/existing authentication systems. The usernames that the users use to login must be defined within ART, but the password and authentication details reside within the external source and therefore the users can't change their passwords from within ART.</p> 
     <p>ART comes with support for several external authentication sources. These can be set up via the <strong>Optional Settings</strong> section in the Settings page.</p> 
     <ul> 
      <li>Microsoft Windows Domain</li> 
      <li>LDAP</li> 
      <li>Database</li> 
     </ul> 
     <h3 id="windows-authentication">Windows Authentication</h3> 
     <p>If the users are in a windows domain environment, you can have them log in to ART using the usernames and passwords they use to log in to windows. This means they don't have to remember yet another username/password combination. It also means the organisation's password policy will be in effect since authentication will be done against Active Directory.</p> 
     <p>Do the following to configure ART to use windows authentication.</p> 
     <ul> 
      <li>Log in to ART using an admin user and go to the Settings page</li> 
      <li> <p>Under the Optional Settings section, set the domain controller field to the domain controller machine name (IP address should also work). You can do the following to get the domain controller machine name.</p> 
       <div class="codehilite"> 
        <pre><span class="n">ping</span> <span class="o">&lt;</span><span class="n">domain</span> <span class="n">name</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">This</span> <span class="n">will</span> <span class="n">get</span> <span class="n">the</span> <span class="n">ip</span> <span class="n">address</span> <span class="n">of</span> <span class="n">the</span> <span class="n">domain</span> <span class="n">controller</span><span class="p">)</span>
<span class="n">ping</span> <span class="o">-</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">ip</span> <span class="n">address</span> <span class="n">of</span> <span class="n">domain</span> <span class="n">controller</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">This</span> <span class="n">will</span> <span class="n">get</span>
<span class="n">the</span> <span class="n">hostname</span> <span class="n">of</span> <span class="n">the</span> <span class="n">domain</span> <span class="n">controller</span><span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p>Set the allowed domains to the windows domain name. Use all uppercase letters for the domain name</p> </li> 
      <li>Set the Login Page to <strong>Windows Login</strong></li> 
      <li>Click on Submit to save these settings</li> 
     </ul> 
     <p>Configuration is now complete. For each user who requires access to ART, you will also need to create a user within ART with the same username as their windows login username. The password can be left blank when creating the user. Grant them appropriate access to queries. The users can now log in to ART using their windows username and password.</p> 
     <h3 id="ldap-authentication">LDAP Authentication</h3> 
     <p>Do the following to configure ART to use LDAP authentication.</p> 
     <ul> 
      <li>Log in to ART using an admin user and go to the Settings page</li> 
      <li>Under the Optional Settings section, set the url for the ldap server. You can use the ldaps protocol in the url if SSL certificates are available and configured correctly</li> 
      <li>Set the ldap authentication method to use</li> 
      <li>Set the DN in the ldap hierarchy under which users are defined</li> 
      <li>Set the Login Page to <strong>LDAP Login</strong></li> 
      <li>Click on Submit to save these settings</li> 
     </ul> 
     <p>Configuration is now complete. For each user who requires access to ART, you will also need to create a user within ART with the same username as their uid (or samAccountName for Active Directory). The password can be left blank when creating the user. Grant them appropriate access to queries. The users can now log in to ART using their ldap uid and password.</p> 
     <h3 id="database-authentication">Database Authentication</h3> 
     <p>Database logins can also be used to access ART. Do the following to use the database authentication that comes with ART.</p> 
     <ul> 
      <li>Have or create database users on any database. The users need to be able to connect to the database but don't need to have any other rights on the database</li> 
      <li>Log in to ART using an admin user and go to the Settings page</li> 
      <li>Under the Optional Settings section, set the JDBC Driver and JDBC URL for the database for which the users have access. The JDBC driver for the database will need to be available in the <strong>ART_HOME\WEB-INF\lib</strong> directory or <strong>TOMCAT_HOME\lib</strong> directory if using Apache Tomcat.</li> 
      <li>Set the Login Page to <strong>Database Login</strong></li> 
      <li>Click on Submit to save these settings</li> 
     </ul> 
     <p>Configuration is now complete. For each user who requires access to ART, you will also need to create a user within ART with the same username as their database login username. The password can be left blank when creating the user. Grant them appropriate access to queries. The users can now log in to ART using their database username and password.</p> 
     <h3 id="custom-authentication-sources">Custom Authentication Sources</h3> 
     <p>Additional, custom authentication sources can be used by creating a jsp page to check the user credentials - for example by executing a query on a remote database - and then redirecting to the showGroups.jsp page.</p> 
     <p>This is the code fragment to redirect an authenticated user to ART.</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">if</span> <span class="p">(</span> <span class="o">&lt;</span><span class="nx">CONDITION</span><span class="o">&gt;</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Authentication Successful!</span>
    <span class="nx">session.setAttribute</span><span class="p">(</span><span class="s2">&quot;username&quot;</span><span class="p">,</span> <span class="nx">username</span><span class="p">);</span>
    <span class="nx">response.sendRedirect</span><span class="p">(</span><span class="s2">&quot;/art/user/showGroups.jsp?external=true&quot;</span><span class="p">);</span>
    <span class="p">}</span>
</pre> 
     </div> 
     <p>The user needs to be defined in ART (with or without a password). ART will check if the username exists, and if this is the case, will let the user proceed.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="user-groups">User Groups</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>User Groups</strong> option to manage user groups.</p> 
     <p>User groups are used to logically treat a set of users as one entity. This allows for easier management of access rights. If a group is granted access to a query, members of that group automatically get access to the query. A user can belong to zero, one or many user groups.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="user-group-membership">User Group Membership</h1> 
     <p>Users can be added to or removed from user groups using the <strong>User Group Membership</strong> option in the <strong>Admin Console</strong>. This assignment can also be done when creating or modifying a user or when creating or modifying a user group.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="query-groups">Query Groups</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>Query Groups</strong> option to manage query groups.<br /> </p> 
     <p>All queries belong to a query group. Query groups are used to logically associate queries. When a user logs in, he selects a group and then is presented with the available queries in that group. By default, a group named &quot;Test&quot; is available (created by the art_tables.sql script during installation).</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>You can modify the name of a group or create new groups at any time (group names need to be unique). In a standard organization, you may want to define several groups that match the different business areas of the company e.g. INVENTORY, PURCHASING, FINANCE etc.</li> 
      <li>In order to create Development, QA and Production environments, you can create several groups e.g. INVENTORY_PROD, INVENTORY_QA, and INVENTORY_DEV, and have a newly developed query created in the INVENTORY_DEV group, moved to the INVENTORY_QA group for user tests and finally to INVENTORY_PROD once testing is complete.</li> 
      <li>It is possible to limit the query groups an administrator can deal with. You can therefore have administrators who deal only with a development environment and others who deal with the production environment.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="queries">Queries</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>Queries</strong> option to manage queries.</p> 
     <h2 id="introduction">Introduction</h2> 
     <p>An ART query is composed of a number of parts, including the following.</p> 
     <ul> 
      <li><strong>Header and Source</strong><br /> The header section contains query properties like name, description, datasource etc. The source section contains the SQL statement used to retrieve the data.</li> 
      <li><strong>Parameters</strong><br /> Before executing a query, users may be prompted to enter or select values for query parameters. The values can be strings, numbers or dates.</li> 
      <li><strong>Rules</strong><br /> Rules are used to dynamically filter the query results depending on the user running the query. </li> 
     </ul> 
     <h2 id="creating-a-query">Creating a query</h2> 
     <p>From the <strong>Admin Console</strong>, click on <strong>Queries</strong> then click on <strong>Create New Query</strong> to create a query. From here you can specify the query name, description, datasource, the SQL statement for the query etc.</p> 
     <p><img alt="New-query" src="New-query.png" /></p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Attribute</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>ID</strong></td> 
        <td>Auto-generated ID used to uniquely identify the query</td> 
       </tr> 
       <tr> 
        <td><strong>Group</strong></td> 
        <td>Query Group to which the query will be belong</td> 
       </tr> 
       <tr> 
        <td><strong>Name</strong></td> 
        <td>Name of the query as it appears to users</td> 
       </tr> 
       <tr> 
        <td><strong>Status</strong></td> 
        <td>If set to <strong>Hidden</strong>, the query will not appear to users in the Available Items list. However, it can be executed and used as normal e.g within a dashboard. If set to <strong>Disabled</strong>, the query will not appear in the Available Items list and won't run on any attempt to execute it.</td> 
       </tr> 
       <tr> 
        <td><strong>Short Description</strong></td> 
        <td>Short description for the query. For charts, this will appear as the title of the chart</td> 
       </tr> 
       <tr> 
        <td><strong>Description</strong></td> 
        <td>Longer description for the query</td> 
       </tr> 
       <tr> 
        <td><strong>Contact Person</strong></td> 
        <td>Can be used to store the name of the contact or reference person for the query</td> 
       </tr> 
       <tr> 
        <td><strong>Type</strong></td> 
        <td>The type of query</td> 
       </tr> 
       <tr> 
        <td><strong>Datasource</strong></td> 
        <td>The datasource against which the query will be executed</td> 
       </tr> 
       <tr> 
        <td><strong>Uses Rules</strong></td> 
        <td>This specifies if the query will use rules. If set to <strong>Yes</strong>, after saving the changes, a button named <strong>Rules</strong> will appear allowing you to specify the column on which to apply the rule and the rule that will be applied to the query.</td> 
       </tr> 
       <tr> 
        <td><strong>Show Parameters In Output</strong></td> 
        <td>This determines if parameter values should be displayed in the query output. If set to <strong>No</strong>, the Show Parameters checkbox in the parameters page will start as unchecked. If set to <strong>Yes</strong>, the Show Parameters checkbox will start as checked. The user can check/uncheck the Show Parameters option as desired before running the query. If set to <strong>Always</strong>, the Show Parameters checkbox will not be available to the user and parameter values will always be displayed in the query output. To display parameters when executing a query via direct URL, either add <strong>&amp;_showParams=true</strong> to the URL, or set this field to <strong>Always</strong>.</td> 
       </tr> 
       <tr> 
        <td><strong>Display Resultset</strong></td> 
        <td>The resultset to display if the sql source contains multiple sql statements. Leave as 0 if the sql source doesn't have multiple statements. Set to 1 to use the first statement, 2 to use the second, etc. Set to -1 to use the <strong>select</strong> statement, regardless of how many statements exist. Set to -2 to use the <strong>last</strong> statement, regardless of how many statements exist. Your RDBMS may not support multiple statements in a query or may require some configuration for it to work. See the <strong>Multiple Statements</strong> section for more details.</td> 
       </tr> 
       <tr> 
        <td><strong>X Axis Label</strong></td> 
        <td>For charts, the x axis label</td> 
       </tr> 
       <tr> 
        <td><strong>Y Axis Label</strong></td> 
        <td>For charts, the y axis label</td> 
       </tr> 
       <tr> 
        <td><strong>Chart Options</strong></td> 
        <td>For charts, additional options that define how the chart will look</td> 
       </tr> 
       <tr> 
        <td><strong>Template</strong></td> 
        <td>For jasper reports, select the jrxml file to use. For pivot table (mondrian) queries, select the mondrian cube xml file to use. For jXLS reports, select the Excel template file to use.</td> 
       </tr> 
       <tr> 
        <td><strong>XMLA URL</strong></td> 
        <td>For mondrian via xmla or Microsoft SQL Server Analysis Services (SSAS) via xmla, the url of the xmla server</td> 
       </tr> 
       <tr> 
        <td><strong>XMLA Datasource</strong></td> 
        <td>For mondrian via xmla, the xmla datasource name as it appears in the <strong>datasources.xml</strong> file on the xmla server</td> 
       </tr> 
       <tr> 
        <td><strong>XMLA Catalog</strong></td> 
        <td>For mondrian or mondrian via xmla, the catalog name as it appears in the mondrian cube xml file. For SSAS, the database name.</td> 
       </tr> 
       <tr> 
        <td><strong>XMLA Username</strong></td> 
        <td>For SSAS, if the server is configured to require basic authentication, the username to use</td> 
       </tr> 
       <tr> 
        <td><strong>XMLA Password</strong></td> 
        <td>For SSAS, if the server is configured to require basic authentication, the password to use</td> 
       </tr> 
       <tr> 
        <td><strong>Source</strong></td> 
        <td>The SQL query used to retrieve the required data. It can contain parameter placeholders, specified using labels (<code>#parameter_name#</code>). XML-style elements can be used to create Dynamic SQL statements. Some special tags can be used in the query (<code>:USERNAME</code>, <code>:DATE</code>, <code>:TIME</code>)</td> 
       </tr> 
      </tbody> 
     </table> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li> <p>Three special tags can be used within the SQL statement and are substituted at runtime with their respective values:</p> 
       <div class="codehilite"> 
        <pre><span class="o">:</span><span class="n">USERNAME</span> <span class="o">-</span> <span class="n">replaced</span> <span class="n">by</span> <span class="n">the</span> <span class="n">username</span> <span class="n">of</span> <span class="n">the</span> <span class="n">user</span> <span class="n">who</span> <span class="n">is</span> <span class="n">executing</span> <span class="n">the</span> <span class="n">query</span>
<span class="o">:</span><span class="n">DATE</span> <span class="o">-</span> <span class="n">replaced</span> <span class="n">by</span> <span class="n">the</span> <span class="n">current</span> <span class="n">date</span> <span class="p">(</span><span class="n">format</span> <span class="n">YYYY</span><span class="o">-</span><span class="n">MM</span><span class="o">-</span><span class="n">DD</span><span class="p">)</span>
<span class="o">:</span><span class="n">TIME</span> <span class="o">-</span> <span class="n">replaced</span> <span class="n">by</span> <span class="n">the</span> <span class="n">current</span> <span class="n">time</span> <span class="p">(</span><span class="n">format</span> <span class="n">YYYY</span><span class="o">-</span><span class="n">MM</span><span class="o">-</span><span class="n">DD</span> <span class="n">HH</span><span class="o">:</span><span class="n">MI</span><span class="o">:</span><span class="n">SS</span><span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p>You can use a stored procedure to return query results. When defining the query, in the SQL source section, use the syntax for calling a stored procedure in the RDBMS you are using e.g. For MySQL you can use something like &quot;call my_sp&quot;. Another RDBMS may use syntax like &quot;exec my_sp&quot;.</p> </li> 
     </ul> 
     <h2 id="query-types">Query Types</h2> 
     <ul> 
      <li><strong>Tabular</strong><br /> This is the default. A tabular result exportable to spreadsheet, pdf etc.</li> 
      <li> <p><strong>Tabular (html only)</strong><br /> A tabular result that can only be displayed in HTML format. This may be used to embed HTML code in the SQL query in order to modify display colours of certain columns etc. To do this, concatenate the SQL with the required HTML tags. e.g. For MySQL, to display positive values in green and negative values in red, you can use something like</p> 
       <div class="codehilite"> 
        <pre><span class="k">SELECT</span> <span class="nx">col1</span><span class="p">,</span>
<span class="k">CASE</span> <span class="nx">WHEN</span> <span class="nx">int_col2</span><span class="o">&gt;</span><span class="mi">0</span> <span class="nx">THEN</span>
<span class="nx">concat</span><span class="p">(</span><span class="s1">'&lt;div style=&quot;background-color: green&quot;&gt;'</span><span class="p">,</span><span class="nx">cast</span><span class="p">(</span><span class="nx">int_col2</span> <span class="nx">as</span> <span class="nx">char</span><span class="p">),</span><span class="s1">'&lt;/div&gt;'</span><span class="p">)</span> 
<span class="k">ELSE</span>
<span class="nx">concat</span><span class="p">(</span><span class="s1">'&lt;div style=&quot;background-color: red&quot;&gt;'</span><span class="p">,</span><span class="nx">cast</span><span class="p">(</span><span class="nx">int_col2</span> <span class="nx">as</span> <span class="nx">char</span><span class="p">),</span><span class="s1">'&lt;/div&gt;'</span><span class="p">)</span> 
<span class="nb">END</span> <span class="nx">as</span> <span class="s2">&quot;My Formatted Column&quot;</span><span class="p">,</span>
<span class="nx">col3</span>
<span class="nb">from</span> <span class="nx">my_table</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Crosstab</strong><br /> Rearranges the query output into crosstab format, exportable to spreadsheet, pdf etc. If you want values to be summed, include the summing in the SQL query e.g. select year,quarter,sum(amount) from orders group by year,quarter</p> </li> 
     </ul> 
     <p>The SQL result set is expected to have either 3 or 5 columns:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">xAxisCol</span> <span class="s">&quot;xAxisLabel&quot;</span><span class="p">,</span> <span class="n">yAxisCol</span> <span class="s">&quot;yAxisLabel&quot;</span><span class="p">,</span> <span class="n">Value</span> <span class="n">FROM</span> <span class="p">...</span>
    <span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">any</span><span class="p">)</span>
</pre> 
     </div> 
     <p>OR</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">xAxisCol</span><span class="p">,</span> <span class="n">xAxisAltSort</span><span class="p">,</span> <span class="n">yAxisCol</span><span class="p">,</span> <span class="n">yAxisAltSort</span><span class="p">,</span> <span class="n">Value</span> <span class="n">FROM</span> <span class="p">...</span>
    <span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">any</span><span class="p">)</span>
</pre> 
     </div> 
     <p>The AltSort columns are used to sort the x-axis (rows) and y-axis (columns). The following helps to illustrate this.</p> 
     <div class="codehilite"> 
      <pre>    <span class="cm">/* input */</span>                  <span class="cm">/* input */</span>
    <span class="c1">// A Jan 14                   A 1 Jan 1 14</span>
    <span class="c1">// A Feb 24                   A 1 Feb 2 24</span>
    <span class="c1">// A Mar 34                   A 1 Mar 3 34</span>
    <span class="c1">// B Jan 14                   B 2 Jan 1 14</span>
    <span class="c1">// B Feb 24                   B 2 Feb 2 24</span>
    <span class="c1">// C Jan 04                   C 3 Jan 1 04</span>
    <span class="c1">// C Mar 44                   C 3 Mar 3 44</span>
    <span class="c1">//                          ^-----^------Used to sort the x/y axis</span>

    <span class="cm">/* output */</span>                 <span class="cm">/* output */</span>
    <span class="c1">//         y-axis                     y-axis          </span>
    <span class="c1">//           |                      |                </span>
    <span class="c1">//  x-axis - _   Feb Jan Mar           x-axis - _  Jan Feb Mar</span>
    <span class="c1">//           A    24  14  34                A   14  24  34   </span>
    <span class="c1">//           B    24  14  -                 B   14  24   -   </span>
    <span class="c1">//           C    -   04  44                C   04   -  44   </span>
    <span class="c1">//                   ^--- Jan comes after Feb!</span>
</pre> 
     </div> 
     <p>Without the AltSort columns, as in the first output, Feb appears before Jan. This is because the string &quot;Feb&quot; is alphabetically before &quot;Jan&quot;. However, Jan should appear before Feb because that is how they appear in the order of months. You can therefore use the month number in the sort column to ensure that Jan is displayed before Feb. Another example would be if you are displaying dates in a format like &quot;Apr-2011&quot; (MMM-YYYY). Apr-2011 is alphabetically before Jan-2011, so the alternative sort column could be set to YYYY-MM format (e.g. 2011-04) to order the period names in the right way.</p> 
     <ul> 
      <li><strong>Crosstab (html only)</strong><br /> Same as crosstab but limited to HTML output only</li> 
      <li><strong>Charts</strong><br /> Display the results as a chart, exportable to pdf or png. The image can also be copied directly from the browser and pasted into any document.</li> 
     </ul> 
     <p>The layout of the SQL must follow a specific syntax for each different type of chart</p> 
     <ul> 
      <li> <p><strong>XY</strong></p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Value1</span><span class="p">,</span> <span class="n">Value2</span> <span class="s">&quot;SeriesName&quot;</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="p">)</span>
</pre> 
       </div> <p>Dynamic Series</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Value1</span><span class="p">,</span> <span class="n">Value2</span><span class="p">,</span> <span class="n">SeriesName</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Pie</strong></p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Category</span><span class="p">,</span> <span class="n">Value</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">number</span> <span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Bars/Stacked Bars/Line</strong><br /> Static Series</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Item</span><span class="p">,</span> <span class="n">Value1</span> <span class="s">&quot;SeriesName1&quot;</span> <span class="p">[,</span> <span class="n">Value2</span><span class="p">,</span> <span class="p">...]</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">number</span> <span class="p">[,</span> <span class="n">number</span><span class="p">,</span> <span class="p">...]</span> <span class="p">)</span>
</pre> 
       </div> <p>Dynamic Series</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Item</span><span class="p">,</span> <span class="n">SeriesName</span><span class="p">,</span> <span class="n">Value</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>

<span class="nl">Example:</span>
<span class="n">SELECT</span> <span class="n">Product</span><span class="p">,</span> <span class="n">Region</span><span class="p">,</span> <span class="n">SUM</span><span class="p">(</span><span class="n">VOLUME</span><span class="p">)</span> <span class="n">FROM</span> <span class="n">sales</span> <span class="n">group</span> <span class="n">by</span> <span class="n">product</span><span class="p">,</span><span class="n">region</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Time/Date Series</strong><br /> Static Series</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Timestamp</span><span class="o">|</span><span class="n">Date</span><span class="p">,</span> <span class="n">Value1</span> <span class="s">&quot;SeriesName1&quot;</span> <span class="p">[,</span> <span class="n">Value2</span><span class="p">,</span> <span class="p">...]</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">timestamp</span><span class="o">|</span><span class="n">date</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="p">[,</span> <span class="n">number</span><span class="p">,</span> <span class="p">...]</span> <span class="p">).</span> <span class="n">Timestamp</span><span class="o">/</span><span class="n">Dates</span> <span class="n">must</span> <span class="n">be</span> <span class="n">unique</span><span class="p">.</span>
</pre> 
       </div> <p>Dynamic Series</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Timestamp</span><span class="o">|</span><span class="n">Date</span><span class="p">,</span> <span class="n">SeriesName</span><span class="p">,</span> <span class="n">Value</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">timestamp</span><span class="o">|</span><span class="n">date</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">number</span><span class="p">).</span> <span class="n">Timestamp</span><span class="o">/</span><span class="n">Dates</span> <span class="n">must</span> <span class="n">be</span> <span class="n">unique</span><span class="p">.</span>

<span class="nl">Example:</span>
<span class="n">SELECT</span> <span class="n">ORDER_DATE</span><span class="p">,</span> <span class="n">PRODUCT</span><span class="p">,</span> <span class="n">SUM</span><span class="p">(</span><span class="n">VOLUME</span><span class="p">)</span> <span class="n">FROM</span> <span class="n">orders</span> <span class="n">group</span> <span class="n">by</span> <span class="n">order_date</span><span class="p">,</span><span class="n">product</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Speedometer</strong></p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">DataValue</span><span class="p">,</span> <span class="n">MinValue</span><span class="p">,</span> <span class="n">MaxValue</span><span class="p">,</span> <span class="n">UnitsDescription</span> <span class="p">[,</span> <span class="n">Range1</span><span class="p">,</span> <span class="n">Range2</span><span class="p">,</span> <span class="p">...]</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>
<span class="n">Ranges</span> <span class="n">represent</span> <span class="n">optional</span> <span class="n">columns</span> <span class="n">and</span> <span class="n">each</span> <span class="n">range</span> <span class="n">has</span> <span class="mi">3</span> <span class="n">values</span> <span class="n">separated</span> <span class="n">by</span> <span class="o">:</span>  <span class="n">i</span><span class="p">.</span><span class="n">e</span><span class="p">.</span>
<span class="nl">RangeUpperValue:</span><span class="n">RangeColour</span><span class="o">:</span><span class="n">RangeDescription</span> <span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">).</span>
<span class="n">RangeUpperValue</span> <span class="n">can</span> <span class="n">be</span> <span class="n">a</span> <span class="n">percentage</span><span class="p">.</span>

<span class="nl">Example:</span>
<span class="n">SELECT</span> <span class="n">reading</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="s">&quot;degrees&quot;</span><span class="p">,</span>
<span class="s">&quot;50:#00FF00:Normal&quot;</span><span class="p">,</span>
<span class="s">&quot;80%:#FFFF00:Warning&quot;</span><span class="p">,</span>
<span class="s">&quot;100:#FF0000:Critical&quot;</span>
<span class="n">FROM</span> <span class="n">temperature_reading</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Bubble</strong></p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Value1</span><span class="p">,</span> <span class="n">Value2</span> <span class="s">&quot;SeriesName&quot;</span><span class="p">,</span> <span class="n">Value3</span> <span class="p">[,</span> <span class="n">normalisedValue3</span><span class="p">]</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="p">[,</span> <span class="n">number</span><span class="p">]</span> <span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Heat Map</strong></p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Value1</span><span class="p">,</span> <span class="n">Value2</span><span class="p">,</span> <span class="n">Value3</span> <span class="p">[,</span> <span class="n">Option1</span><span class="p">,</span> <span class="n">Option2</span><span class="p">,</span> <span class="p">...]</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="p">(</span><span class="n">data</span> <span class="n">type</span><span class="o">:</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">number</span> <span class="p">[,</span> <span class="n">string</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="p">...]</span> <span class="p">)</span>

<span class="nl">Example:</span>
<span class="n">SELECT</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="s">&quot;upperBound=100&quot;</span>        
<span class="n">FROM</span> <span class="n">myvalues</span>
</pre> 
       </div> </li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>ART uses the cewolf and jfreechart libraries to generate charts. These libraries in turn use standard java AWT to plot charts. In order to work correctly, AWT needs a graphic display. If you are using a &quot;headless&quot; workstation (i.e. a Unix box without X) you need to start the JVM with the option <strong>-Djava.awt.headless=true</strong></li> 
      <li> <p>For <strong>bubble charts</strong>, the size of the bubbles is determined by <code>Value3</code>. The actual size of the bubbles as they appear in the chart is also relative to the values on the y axis (<code>Value2</code>). If your values for <code>Value3</code> are much larger than those for <code>Value2</code> for example, you may find the whole chart filled in one colour, with no bubbles. In this case, you can increase the range of the y axis by setting the <strong>y-axis Min</strong> and <strong>y-axis Max</strong> fields for the query. Alternatively, you can include an extra column in the result set that contains a normalised value that will be used to scale the size of the bubbles e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">Value1</span><span class="p">,</span> <span class="n">Value2</span> <span class="s">&quot;MySeries&quot;</span><span class="p">,</span> <span class="n">Value3</span><span class="p">,</span>
<span class="n">Value3</span> <span class="o">*</span> <span class="p">(</span><span class="n">SELECT</span> <span class="n">max</span><span class="p">(</span><span class="n">Value2</span><span class="p">)</span> <span class="n">FROM</span> <span class="n">mytable</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">SELECT</span> <span class="n">max</span><span class="p">(</span><span class="n">Value3</span><span class="p">)</span> <span class="n">FROM</span> <span class="n">mytable</span><span class="p">)</span>
<span class="n">FROM</span> <span class="n">mytable</span>
</pre> 
       </div> </li> 
      <li> <p>For <strong>heat map</strong> charts, the following options are available. Option names and values are case sensitive. Options are defined in the result set with a column value whose syntax is <code>&lt;option&gt;=&lt;value&gt;</code> i.e. the option name and value separated by <code>=</code></p> </li> 
     </ul> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Option</th> 
        <th>Possible Values</th> 
        <th>Default</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>upperBound</strong></td> 
        <td>Any number, positive or negative</td> 
        <td>1</td> 
        <td>Highest value displayed. If you don't specify this option, the chart may appear blank if all your values are above 1.</td> 
       </tr> 
       <tr> 
        <td><strong>lowerBound</strong></td> 
        <td>Any number, positive or negative</td> 
        <td>0</td> 
        <td>Lowest value displayed</td> 
       </tr> 
       <tr> 
        <td><strong>scalePos</strong></td> 
        <td>top <br /> left <br /> bottom <br /> right</td> 
        <td>bottom</td> 
        <td>Default position of the colour scale relative to the chart</td> 
       </tr> 
       <tr> 
        <td><strong>scaleLabel</strong></td> 
        <td>Any string</td> 
        <td>None</td> 
        <td>Title the colour scale</td> 
       </tr> 
       <tr> 
        <td><strong>scaleTextPos</strong></td> 
        <td>topleft <br /> topright <br /> bottomleft <br /> bottomright</td> 
        <td>topleft</td> 
        <td>Position of the scale title relative to the colour scale</td> 
       </tr> 
       <tr> 
        <td><strong>scaleBorder</strong></td> 
        <td>Hex colour code e.g. <code>#00E000</code></td> 
        <td>None</td> 
        <td>Colour of border displayed around the colour scale box</td> 
       </tr> 
       <tr> 
        <td><strong>stripWidth</strong></td> 
        <td>Any positive integer</td> 
        <td>10</td> 
        <td>Width/thickness of the colour scale</td> 
       </tr> 
       <tr> 
        <td><strong>subdivisions</strong></td> 
        <td>Any positive integer</td> 
        <td>10</td> 
        <td>For grey scale or a 2 colour scheme, i.e. if no <code>color#n</code> options are configured, the number of shades of grey or shades of the 2 colour scheme to use</td> 
       </tr> 
       <tr> 
        <td><strong><code>color#&lt;n&gt;</code></strong> e.g. <code>color#1</code>, <code>color#2</code></td> 
        <td><code>&lt;number&gt;:&lt;hex colour code&gt;</code> e.g. <code>0.0:#FF0000</code></td> 
        <td>None</td> 
        <td>The colour to use for a given range of values. The colour is determined by <code>Value3</code> of the result set. The number is the lower bound of the range. The option value has the lower bound and colour separated by <code>:</code> e.g. to display 0-10 in red and 11-50 in green, you'll define two columns in the result set, <code>&quot;color#1=0:#FF0000&quot;, &quot;color#2=11:#00FF00&quot;</code></td> 
       </tr> 
       <tr> 
        <td><strong>lowerColor</strong></td> 
        <td>Hex colour code</td> 
        <td>None</td> 
        <td>The colour of the lowest value if you want a 2 colour scheme with a linear gradient from the lower colour to the upper colour e.g. set <code>lowerColor</code> to white (<code>#FFFFFF</code>) and <code>upperColor</code> to red (<code>#FF0000</code>) if you want values to be represented as shades of red</td> 
       </tr> 
       <tr> 
        <td><strong>upperColor</strong></td> 
        <td>Hex colour code</td> 
        <td>None</td> 
        <td>The colour of the highest value if you want a 2 colour scheme with a linear gradient from the lower colour to the upper colour e.g. set <code>lowerColor</code> to white (<code>#FFFFFF</code>) and <code>upperColor</code> to red (<code>#FF0000</code>) if you want values to be represented as shades of red</td> 
       </tr> 
      </tbody> 
     </table> 
     <p><br /></p> 
     <ul> 
      <li><strong>Group: n columns</strong><br /> Groups the report data.</li> 
     </ul> 
     <p>For example, if a query's tabular output looks like:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">AA</span> <span class="o">|</span> <span class="n">AA</span> <span class="o">|</span> <span class="n">B</span> <span class="o">|</span> <span class="n">C</span> <span class="o">|</span> <span class="n">D</span>
    <span class="n">AA</span> <span class="o">|</span> <span class="n">AA</span> <span class="o">|</span> <span class="n">E</span> <span class="o">|</span> <span class="n">F</span> <span class="o">|</span> <span class="n">G</span>
    <span class="n">AA</span> <span class="o">|</span> <span class="n">BB</span> <span class="o">|</span> <span class="n">H</span> <span class="o">|</span> <span class="n">J</span> <span class="o">|</span> <span class="n">K</span>
    <span class="n">AA</span> <span class="o">|</span> <span class="n">BB</span> <span class="o">|</span> <span class="n">X</span> <span class="o">|</span> <span class="n">Y</span> <span class="o">|</span> <span class="n">Z</span>
</pre> 
     </div> 
     <p>using &quot;Group on 2 columns&quot;, the data would be grouped by the first 2 columns, and the output would look like:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">AA</span> <span class="o">|</span> <span class="n">AA</span>
    <span class="n">B</span> <span class="o">|</span> <span class="n">C</span> <span class="o">|</span> <span class="n">D</span>
    <span class="n">E</span> <span class="o">|</span> <span class="n">F</span> <span class="o">|</span> <span class="n">G</span>
    <span class="n">AA</span> <span class="o">|</span> <span class="n">BB</span>
    <span class="n">H</span> <span class="o">|</span> <span class="n">J</span> <span class="o">|</span> <span class="n">K</span>
    <span class="n">X</span> <span class="o">|</span> <span class="n">Y</span> <span class="o">|</span> <span class="n">Z</span>
</pre> 
     </div> 
     <p>For a &quot;Group on n columns&quot; query, the query must be ordered by the the first n-1 columns.</p> 
     <ul> 
      <li><strong>Update Statement</strong><br /> Used to execute statements that do not return any rows e.g. INSERT/UPDATE/DELETE statements or database stored procedures.</li> 
      <li><strong>Text</strong><br /> Used to define a piece of text that can be displayed as a standalone web page</li> 
      <li><strong>Dashboard</strong><br /> Used to display queries in a single portal-like page.</li> 
      <li><strong>Jasper Report: Template Query</strong><br /> To generate formatted reports e.g. statements given to customers, you can use Jasper Reports. To create a jasper report, use the <a class="" href="http://jasperforge.org/projects/ireport" rel="nofollow">iReport</a> report designer.</li> 
     </ul> 
     <p>Displays a jasper report based on the selected jrxml template. The query within the jasper report template will be used to generate the results. The query will be run against the selected datasource. You can define parameters that will be passed to the jasper report. Just insert the parameter labels into the SQL source section, with each parameter on a new line. Jasper report parameters are defined with a specific type. The following mapping of ART and jasperreport parameter types should be used</p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>ART parameter type</th> 
        <th>JasperReports parameter type</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>VARCHAR, TEXT</strong></td> 
        <td>java.lang.String</td> 
       </tr> 
       <tr> 
        <td><strong>DATE, DATETIME</strong></td> 
        <td>java.util.Date</td> 
       </tr> 
       <tr> 
        <td><strong>INTEGER</strong></td> 
        <td>java.lang.Long</td> 
       </tr> 
       <tr> 
        <td><strong>NUMBER</strong></td> 
        <td>java.lang.Double</td> 
       </tr> 
       <tr> 
        <td><strong>Multi parameters</strong></td> 
        <td>java.util.List</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>If the report contains a subreport, set the <strong>Subreport Expression</strong> property of the subreport object to the file name of the subreport with a .jasper extension e.g. <strong>&quot;subreport1.jasper&quot;</strong> (include the quotes). When creating the query in ART, upload the main report's .jrxml file using the main template field and upload the subreport's .jrxml file using the subreport field. If there are multiple subreports, upload one subreport, save the query, upload and save the next one, etc.</p> 
     <ul> 
      <li><strong>Jasper Report: ART Query</strong><br /> Displays a jasper report based on the selected jrxml template. The query as defined in the SQL source will be used to generate the results. The query will be run against the selected datasource.</li> 
      <li><strong>Pivot Table: Mondrian</strong><br /> Used to provide OLAP (slice and dice) analysis using the mondrian engine. The MDX for the query should be put in the source section and the xml file that defines the mondrian cube should be selected in the template field.</li> 
      <li><strong>Pivot Table: Mondrian XMLA</strong><br /> Used to provide OLAP analysis by accessing a mondrian server via the xmla protocol. </li> 
      <li><strong>Pivot Table: Microsoft XMLA</strong><br /> Used to provide OLAP analysis by accessing an SQL Server Analysis Services server via the xmla protocol. </li> 
      <li><strong>jXLS Spreadsheet: Template Query</strong><br /> Displays a report in MS Excel format(xls or xlsx) based on a pre-formatted jXLS template. The query within the jXLS template will be used to generate the results. The query will be run against the selected datasource. You can define parameters that will be passed to the jXLS template. Just insert the parameter labels into the SQL source section, with each parameter on a new line.</li> 
      <li><strong>jXLS Spreadsheet: ART Query</strong><br /> Displays a report in MS Excel format(xls or xlsx) based on a pre-formatted jXLS template. The query as defined in the SQL source will be used to generate the results. The query will be run against the selected datasource.</li> 
      <li> <p><strong>LOV: Dynamic</strong><br /> Creates an LOV query whose values are based on an sql query. The query can have either one column, or two columns if the parameter value and the text displayed to the user needs to be different</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">city_id</span><span class="p">,</span> <span class="n">city_name</span>
<span class="n">FROM</span> <span class="n">cities</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>OR</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">city_id</span>
    <span class="n">FROM</span> <span class="n">cities</span>
</pre> 
     </div> 
     <ul> 
      <li> <p><strong>LOV: Static</strong><br /> Creates an LOV query whose values are set in the sql source section. Values are separated by new lines. If the value and display text need to be different, separate the two with a |</p> 
       <div class="codehilite"> 
        <pre><span class="n">Toaster</span>
<span class="n">pr</span><span class="o">-</span><span class="mo">01</span><span class="o">|</span><span class="n">Laptops</span>
<span class="n">pr</span><span class="o">-</span><span class="mo">02</span><span class="o">|</span><span class="n">Desktops</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Dynamic Job Recipients</strong><br /> Defines a query that can be used to specify dynamic recipients when scheduling a job. It can have either one column, or multiple columns. In either case, the first column must contain email addresses for the recipients.</p> </li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>If the output for a query creates a file e.g. pdf, this file is stored in the <strong>ART_HOME\export</strong> directory</li> 
     </ul> 
     <h2 id="parameters">Parameters</h2> 
     <p>Parameters enable different output to be generated depending on values selected or input by a user.</p> 
     <ul> 
      <li> <p><strong>Inline Parameters</strong><br /> Inline parameters are used to pass single values to the SQL query. A &quot;label&quot; surrounded by the <code>#</code> character is used to identify the inline parameter within the SQL source. For example, the following query has two inline parameters.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="o">*</span>
<span class="n">FROM</span> <span class="n">orders</span>
<span class="n">WHERE</span> <span class="n">order_date</span> <span class="o">&gt;</span> <span class="err">#</span><span class="n">date</span><span class="err">#</span>
<span class="n">AND</span> <span class="n">vendor_name</span> <span class="n">like</span> <span class="err">#</span><span class="n">vendor</span><span class="err">#</span> <span class="o">--</span> <span class="n">you</span> <span class="k">do</span> <span class="n">not</span> <span class="n">need</span> <span class="n">to</span> <span class="n">put</span> <span class="n">the</span> <span class="err">'</span> <span class="n">character</span> <span class="n">around</span> <span class="n">the</span> <span class="n">label</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>Take the following steps to use an inline parameter</p> 
     <ul> 
      <li>Create the query, putting the parameter label in the appropriate place within the SQL, like in the example above</li> 
      <li>Click on the <strong>Save Changes</strong> button to save the query</li> 
      <li>Click on the <strong>Parameters</strong> button</li> 
      <li>Click on the <strong>New</strong> button and specify <strong>Inline</strong> for the <strong>Parameter Type</strong></li> 
      <li>In the <strong>Parameter Label</strong> field, type the label exactly as it appears in the SQL source (the label text without the surrounding <code>#</code>).</li> 
      <li>Specify a user friendly name for the parameter in the <strong>Name</strong> field</li> 
      <li>The <strong>Help Description</strong> field can be used to provide additional help text for users</li> 
      <li>Specify the data type of the parameter (integer, varchar, date etc). The parameter type will be used to validate user input. For date parameters, a date picker will be displayed for the user to select the date. Boolean parameters (true/false) are not supported.</li> 
      <li>Specify a default value for the parameter if desired.<br /> </li> 
      <li>If the possible parameter values should be picked from a list, set the <strong>Use List Of Values</strong> option to <strong>Yes</strong> and specify the lov query that will generate these values. This LOV query should have been created already. </li> 
      <li>Now when a user runs the query, they will be presented with a parameters section where they can select or input values for the parameter before finally executing the query.</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>The same parameter (<code>#label#</code>) can be used several times in the same query. All occurrences will be substituted with the same value.</li> 
      <li>Avoid using the special labels <strong>#rules#</strong>, <strong>#filter#</strong> or <strong>#recipient#</strong>. These labels are used for the rules, chained parameters and dynamic job recipients functionality respectively, and using them for your parameters may result in your query not working as expected.</li> 
      <li>There is a slight difference between <code>VARCHAR</code> and <code>TEXT</code> parameters. <code>VARCHAR</code> parameters allow input of up to 30 characters while <code>TEXT</code> parameters allow input of much longer character strings.</li> 
      <li><strong>Workaround for boolean parameters</strong><br /> </li> 
     </ul> 
     <p>There is no boolean data type for inline parameters. Different RDBMSs implement the boolean data type differently. As a workaround, you can create a static LOV query to return the boolean states true and false, as used in your database, and use that LOV query to provide the boolean parameter values.</p> 
     <p>Example main query</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="o">*</span> <span class="n">FROM</span> <span class="n">mytable</span> <span class="n">WHERE</span> <span class="n">my_boolean_column</span><span class="o">=</span><span class="err">#</span><span class="n">boolean_param</span><span class="err">#</span>
</pre> 
     </div> 
     <p>Example static LOV query for boolean values</p> 
     <div class="codehilite"> 
      <pre>    <span class="nb">true</span><span class="o">|</span><span class="n">True</span>
    <span class="nb">false</span><span class="o">|</span><span class="n">False</span>
</pre> 
     </div> 
     <p>Lastly, create an inline parameter named &quot;boolean_param&quot;, with data type as <code>VARCHAR</code>, set <strong>Use List Of Values</strong> to <strong>Yes</strong> and set the LOV query to the query created for this purpose above.</p> 
     <p>If the boolean states are &quot;1&quot; and &quot;0&quot; instead of &quot;true&quot; and &quot;false&quot;, you can create a static LOV query like the one below and set the parameter data type to <code>INTEGER</code> instead of varchar.</p> 
     <div class="codehilite"> 
      <pre>    <span class="mi">1</span><span class="o">|</span><span class="n">True</span>
    <span class="mi">0</span><span class="o">|</span><span class="n">False</span>
</pre> 
     </div> 
     <p><br /></p> 
     <ul> 
      <li> <p><strong>Multi Parameters</strong><br /> Multi parameters are used to pass multiple values to the SQL query. To define a multi parameter, put the WHERE...IN clause in the desired location in your query and include the parameter label to indicate where the values will go e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="o">*</span>
<span class="n">FROM</span> <span class="n">orders</span>
<span class="n">WHERE</span> <span class="n">product_name</span> <span class="n">IN</span><span class="p">(</span><span class="err">#</span><span class="n">product_list</span><span class="err">#</span><span class="p">)</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>Take the following steps to use a multi parameter<br /> </p> 
     <ul> 
      <li>Create the query, putting the WHERE...IN clause and parameter label in the appropriate place within the SQL, like in the example above</li> 
      <li>Click on the <strong>Save Changes</strong> button to save the query</li> 
      <li>Click on the <strong>Parameters</strong> button</li> 
      <li>Click on the <strong>New</strong> button and specify <strong>Multi</strong> for the <strong>Parameter Type</strong></li> 
      <li>In the <strong>Parameter Label</strong> field, specify the parameter label as used in the SQL source e.g. &quot;product_list&quot; for the example above</li> 
      <li>If the multi parameter derives it's values from an LOV query, this should be created and selected in the <strong>LOV Query</strong> field.</li> 
      <li>Now when a user runs the query, they will be presented with a parameters section where they can select one or more values for the parameter. Multiple values are selected using <strong>control+click</strong> or <strong>shift+click</strong>. An &quot;All&quot; option will be displayed to select all possible values.</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>If the values for a multi parameter are not derived from an LOV, the end user will enter the multiple values required in the text box provided, with each value put on a new line.</li> 
      <li>If a query that uses a multi parameter is included in a dashboard, the multi parameter will not be displayed in the parameters page for the user to modify. Multi parameters will be treated like the &quot;All&quot; option was selected. Only inline parameters would be available for modification before the dashboard is executed.</li> 
     </ul> 
     <h2 id="executing-a-query-via-url">Executing a query via URL</h2> 
     <p>It is possible to execute a query directly via URL. The view mode and parameters can be passed through the URL (all are case sensitive and special characters need to be substituted using % plus their ASCII hex values e.g. %20 for a space. See <a href="http://www.w3schools.com/tags/ref_urlencode.asp" rel="nofollow">http://www.w3schools.com/tags/ref_urlencode.asp</a> for more).</p> 
     <p>In the Query Editor page, you can see the direct URL you can use to execute the query directly (using default parameter values). This URL can be used as is, or modified to use specific parameter values if the query uses parameters.</p> 
     <p>If direct URL access is needed without requiring the user to log in to ART beforehand, the special user <strong>public_user</strong> must be granted access to the query and <strong>&amp;_public_user=true</strong> must be included in the URL.</p> 
     <p><strong>Example 1:</strong> (inline parameters)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">120</span><span class="o">&amp;</span><span class="n">viewMode</span><span class="o">=</span><span class="n">html</span><span class="o">&amp;</span><span class="n">P_startdate</span><span class="o">=</span><span class="mi">2006</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">04</span><span class="o">&amp;</span><span class="n">P_description</span><span class="o">=%</span><span class="mi">25</span>

    <span class="n">executes</span> <span class="n">query</span> <span class="mi">120</span> <span class="n">in</span> <span class="n">html</span> <span class="n">view</span> <span class="n">mode</span><span class="p">.</span>
    <span class="n">The</span> <span class="err">#</span><span class="n">startdate</span><span class="err">#</span> <span class="kr">inline</span> <span class="n">parameter</span> <span class="p">(</span><span class="n">P_startdate</span><span class="p">)</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="mi">2006</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">04</span> 
    <span class="n">and</span> <span class="n">the</span> <span class="err">#</span><span class="n">description</span><span class="err">#</span> <span class="kr">inline</span> <span class="n">parameter</span> <span class="p">(</span><span class="n">P_description</span><span class="p">)</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="s">&quot;%&quot;</span> 
    <span class="p">(</span><span class="mi">25</span> <span class="n">is</span> <span class="n">the</span> <span class="s">&quot;%&quot;</span> <span class="n">character</span> <span class="n">in</span> <span class="n">hex</span> <span class="n">so</span> <span class="n">the</span> <span class="n">representation</span> <span class="n">in</span> <span class="n">the</span> <span class="n">URL</span> <span class="n">is</span> <span class="o">%</span><span class="mi">25</span><span class="p">).</span>
</pre> 
     </div> 
     <p><strong>Example 2:</strong> (chart)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">120</span><span class="o">&amp;</span><span class="n">P_date</span><span class="o">=</span><span class="mi">2006</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">04</span>
</pre> 
     </div> 
     <p><strong>Example 3:</strong> (group)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">122</span><span class="o">&amp;</span><span class="n">viewMode</span><span class="o">=</span><span class="n">htmlreport</span><span class="o">&amp;</span><span class="n">SPLITCOL</span><span class="o">=</span><span class="mi">2</span><span class="o">&amp;</span><span class="n">P_param</span><span class="o">=</span><span class="n">abc</span>

    <span class="n">executes</span> <span class="n">query</span> <span class="mi">122</span> <span class="n">in</span> <span class="n">group</span> <span class="n">on</span> <span class="mi">2</span> <span class="n">columns</span> <span class="n">mode</span> <span class="p">(</span><span class="n">SPLITCOL</span> <span class="n">parameter</span><span class="p">).</span> 
    <span class="n">The</span> <span class="n">first</span> <span class="kr">inline</span> <span class="n">parameter</span> <span class="n">is</span> <span class="n">set</span> <span class="n">to</span> <span class="s">&quot;abc&quot;</span><span class="p">.</span>
</pre> 
     </div> 
     <p><strong>Example 4:</strong> (pdf, public)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">120</span><span class="o">&amp;</span><span class="n">viewMode</span><span class="o">=</span><span class="n">pdf</span><span class="o">&amp;</span><span class="n">_public_user</span><span class="o">=</span><span class="nb">true</span>

    <span class="n">generates</span> <span class="n">report</span> <span class="n">as</span> <span class="n">a</span> <span class="n">pdf</span> <span class="n">file</span> <span class="n">without</span> <span class="n">requiring</span> <span class="n">the</span> <span class="n">user</span> <span class="n">to</span> <span class="n">log</span> <span class="n">in</span> <span class="n">to</span> <span class="n">ART</span>
</pre> 
     </div> 
     <p><strong>Example 5:</strong> (dashboard)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">127</span><span class="o">&amp;</span><span class="n">P_param1</span><span class="o">=</span><span class="n">value1</span><span class="o">&amp;</span><span class="n">P_param2</span><span class="o">=</span><span class="n">value2</span>

    <span class="n">executes</span> <span class="n">dashboard</span> <span class="n">with</span> <span class="n">id</span> <span class="mi">127</span><span class="p">,</span> <span class="n">setting</span> <span class="n">values</span> <span class="k">for</span> <span class="kr">inline</span> <span class="n">parameters</span>
    <span class="n">param1</span> <span class="n">and</span> <span class="n">param2</span><span class="p">.</span> 
    <span class="n">Append</span> <span class="o">&amp;</span><span class="n">_public_user</span><span class="o">=</span><span class="nb">true</span> <span class="k">if</span> <span class="n">access</span> <span class="n">without</span> <span class="n">authentication</span> <span class="n">is</span> <span class="n">desired</span>
</pre> 
     </div> 
     <p><strong>Example 6:</strong> (show parameters)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">120</span><span class="o">&amp;</span><span class="n">viewMode</span><span class="o">=</span><span class="n">xls</span><span class="o">&amp;</span><span class="n">P_startdate</span><span class="o">=</span><span class="mi">2006</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">04</span><span class="o">&amp;</span><span class="n">_showParams</span><span class="o">=</span><span class="nb">true</span>

    <span class="n">generates</span> <span class="n">report</span> <span class="n">and</span> <span class="n">includes</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">value</span> <span class="n">used</span> <span class="n">in</span> <span class="n">the</span> <span class="n">report</span> <span class="n">output</span>
</pre> 
     </div> 
     <p><strong>Example 7:</strong> (multi parameters)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?</span>
    <span class="n">queryId</span><span class="o">=</span><span class="mi">120</span><span class="o">&amp;</span><span class="n">viewMode</span><span class="o">=</span><span class="n">xls</span><span class="o">&amp;</span><span class="n">M_category</span><span class="o">=</span><span class="n">Laptops</span><span class="o">&amp;</span><span class="n">M_category</span><span class="o">=</span><span class="n">Desktops</span><span class="o">&amp;</span><span class="n">M_category</span><span class="o">=</span><span class="n">Tablets</span>

    <span class="n">the</span> <span class="err">#</span><span class="n">category</span><span class="err">#</span> <span class="n">multi</span> <span class="n">parameter</span> <span class="p">(</span><span class="n">M_category</span><span class="p">)</span> <span class="n">has</span> <span class="mi">3</span> <span class="n">values</span> <span class="n">defined</span><span class="o">:</span> 
    <span class="n">Laptops</span><span class="p">,</span> <span class="n">Desktops</span><span class="p">,</span> <span class="n">Tablets</span>
</pre> 
     </div> 
     <p><strong>Example 8:</strong> (default parameter values)</p> 
     <div class="codehilite"> 
      <pre>    <span class="nl">http:</span><span class="c1">//server_name:port/art/user/ExecuteQuery?queryId=16</span>

    <span class="n">generates</span> <span class="n">report</span> <span class="n">using</span> <span class="k">default</span> <span class="n">parameter</span> <span class="n">values</span>
</pre> 
     </div> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li> <p>If the query url contains some non-ASCII characters in the parameter values and they don't seem to be interpreted correctly, you may need to configure your application server to explicitly handle urls using UTF-8 encoding e.g. for Tomcat, edit the TOMCAT_HOME\conf\<strong>server.xml</strong> file and add the <strong>URIEncoding</strong> attribute to the appropriate <strong>Connector</strong> element e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="o">&lt;</span><span class="n">Connector</span> <span class="n">port</span><span class="o">=</span><span class="s">&quot;8080&quot;</span> <span class="n">protocol</span><span class="o">=</span><span class="s">&quot;HTTP/1.1&quot;</span> <span class="n">URIEncoding</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span>
    <span class="p">...</span>
</pre> 
       </div> </li> 
     </ul> 
     <h2 id="view-modes">View Modes</h2> 
     <p>When running queries interactively, or scheduling them for later execution, you can specify the format in which the results should be output. When running a query via url, you can specify the view mode to be used using the <code>viewMode</code> parameter. View mode names are case sensitive. Some view modes are not available for certain types of queries.</p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>View Mode</th> 
        <th>Display Name</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>htmlGrid</strong></td> 
        <td>Browser (Grid)</td> 
        <td>Shows results in a web page. The data can be sorted by clicking on the column headers. Not available for scheduled jobs.</td> 
       </tr> 
       <tr> 
        <td><strong>html</strong></td> 
        <td>Browser (Fancy)</td> 
        <td>Shows results in a web page, with minimal styling. Not available for scheduled jobs.</td> 
       </tr> 
       <tr> 
        <td><strong>htmlPlain</strong></td> 
        <td>Browser (Plain)</td> 
        <td>Shows results in a web page, with no styling.</td> 
       </tr> 
       <tr> 
        <td><strong>htmlDataTable</strong></td> 
        <td>Browser (DataTable)</td> 
        <td>Shows results in a web page. Data is displayed in pages. The data can be sorted by clicking on the column headers and one can filter or display certain rows by specifying some text to search for. Not available for scheduled jobs.</td> 
       </tr> 
       <tr> 
        <td><strong>xls</strong></td> 
        <td>Spreadsheet (xls)</td> 
        <td>Creates a Microsoft Excel spreadsheet file to download (xls format). Excel/OpenOffice/LibreOffice compatible</td> 
       </tr> 
       <tr> 
        <td><strong>xlsZip</strong></td> 
        <td>Spreadsheet (zip xls)</td> 
        <td>Creates a Microsoft Excel spreadsheet file to download (xls format), compressed using Zip.</td> 
       </tr> 
       <tr> 
        <td><strong>xlsx</strong></td> 
        <td>Spreadsheet (xlsx)</td> 
        <td>Creates a Microsoft Excel spreadsheet file to download (xlsx format). Excel/OpenOffice/LibreOffice compatible</td> 
       </tr> 
       <tr> 
        <td><strong>slk</strong></td> 
        <td>Spreadsheet (slk)</td> 
        <td>Creates a Microsoft Excel spreadsheet file to download (slk format). Excel/OpenOffice/LibreOffice compatible</td> 
       </tr> 
       <tr> 
        <td><strong>slkZip</strong></td> 
        <td>Spreadsheet (zip slk)</td> 
        <td>Creates a Microsoft Excel spreadsheet file to download (slk format), compressed using Zip.</td> 
       </tr> 
       <tr> 
        <td><strong>tsv</strong></td> 
        <td>Spreadsheet (text tsv)</td> 
        <td>Creates a tab-separated-values text file to download</td> 
       </tr> 
       <tr> 
        <td><strong>tsvZip</strong></td> 
        <td>Spreadsheet (zip tsv)</td> 
        <td>Creates a tab-separated-values text file to download, compressed using Zip</td> 
       </tr> 
       <tr> 
        <td><strong>tsvGz</strong></td> 
        <td>Spreadsheet (gzip tsv)</td> 
        <td>Creates a tab-separated-values text file to download, compressed using GZip</td> 
       </tr> 
       <tr> 
        <td><strong>pdf</strong></td> 
        <td>Document (pdf)</td> 
        <td>Creates a pdf file to download</td> 
       </tr> 
       <tr> 
        <td><strong>graph</strong></td> 
        <td>Browser (Plain)</td> 
        <td>Shows chart in a web page. Only available for charts</td> 
       </tr> 
       <tr> 
        <td><strong>pnggraph</strong></td> 
        <td>Image (png)</td> 
        <td>Creates a png file to download. Only available for charts</td> 
       </tr> 
       <tr> 
        <td><strong>pdfgraph</strong></td> 
        <td>Chart (pdf)</td> 
        <td>Creates a pdf file to download. Only available for charts</td> 
       </tr> 
       <tr> 
        <td><strong>xml</strong></td> 
        <td></td> 
        <td>Creates an xml file</td> 
       </tr> 
       <tr> 
        <td><strong>rss20</strong></td> 
        <td></td> 
        <td>Output data as a rss2.0 compliant feed</td> 
       </tr> 
       <tr> 
        <td><strong>htmlreport</strong></td> 
        <td></td> 
        <td>Output data in grouped fashion. Only available for group queries (group on n columns query type)</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>You can restrict which view modes are shown to users when running queries by modifying the View Modes field in the Settings page.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>There is a limit set for the maximum number of rows that can be output with certain view modes. These limits are set, and can be modified from the Settings page.</li> 
      <li>Use xlsx, slk or tsv view modes for large data sets. In particular, if you use the xls view mode for large data sets, you are likely to get out of memory errors. This is mainly due to the nature of the xls file format.</li> 
     </ul> 
     <h2 id="some-useful-queries">Some Useful Queries</h2> 
     <p>It may be useful to set up some queries against the ART Repository in order to monitor ART usage and performance. For example, every time a query is executed interactively or a login attempt is made, a record is created in the <code>ART_LOGS</code> table. You can create queries against this table to monitor ART usage e.g. how long it takes to execute queries, from which IP address, who attempted to login with wrong credentials etc. You can find some sample queries in the <code>PACKAGE_PATH\database\admin</code> directory.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="multiple-statements">Multiple Statements</h1> 
     <p>You may want to run some statements before or after the select statement for your query, e.g. to create a temporary table, create an index etc. Enter all your statements in the sql source section of the query, with each statement ending in a <code>;</code> and specify which statement should be used as the query's results by setting the <strong>Display Resultset</strong> field in the Define Query page.</p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Display ResultSet</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>0</td> 
        <td>The sql source doesn't contain multiple statements</td> 
       </tr> 
       <tr> 
        <td>1, 2, ... n</td> 
        <td>Use the specified statement, with the first statement being 1</td> 
       </tr> 
       <tr> 
        <td>-1</td> 
        <td>Use the select statement, regardless of how many statements exist</td> 
       </tr> 
       <tr> 
        <td>-2</td> 
        <td>Use the select statement, regardless of how many statements exist</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>If you set the Display Resultset to -2 to use the last statement, ensure that your database driver is at least JDBC 3.0 compliant. Some RDBMSs may require extra configuration to allow for execution of multiple statements in a query, and some may not support it at all.</p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>RDBMS</th> 
        <th>Comment</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>SQL Server</strong></td> 
        <td>No extra configuration needed</td> 
       </tr> 
       <tr> 
        <td><strong>PostgreSQL</strong></td> 
        <td>No extra configuration needed</td> 
       </tr> 
       <tr> 
        <td><strong>MySQL</strong></td> 
        <td>Add the property <strong>allowMultiQueries=true</strong> to the jdbc url of the query's datasource e.g. <code>jdbc:mysql://localhost/mydb?allowMultiQueries=true</code></td> 
       </tr> 
       <tr> 
        <td><strong>CUBRID</strong></td> 
        <td>Driver is JDBC 2.0 compliant so don't use the -2 option</td> 
       </tr> 
       <tr> 
        <td><strong>Oracle</strong></td> 
        <td>Not supported</td> 
       </tr> 
       <tr> 
        <td><strong>HSQLDB</strong></td> 
        <td>Not supported</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="lov-queries">LOV Queries</h1> 
     <p>LOV queries are used to generate parameter values for other queries. Dynamic LOV queries get their values from an sql query while static LOV queries use fixed values defined in the sql source section. An LOV query must have either one or two columns. The value of the first column is passed to the parameter. The value of the second column (if available) is the one displayed to the user on the parameters page. For example, for the following dynamic LOV query</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">location_id</span><span class="p">,</span> <span class="n">location_name</span> <span class="n">FROM</span> <span class="n">LOCATIONS</span>
</pre> 
     </div> 
     <p>Users see values from the <code>location_name</code> column while the actual parameter match is performed using values from the <code>location_id</code> column.<br /> If the parameter options don't come from a database, you can use a static lov with something like the following in the sql source. If the parameter value and the display value are different, separate them with a |</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">local</span><span class="o">|</span><span class="n">Local</span>
    <span class="n">international</span><span class="o">|</span><span class="n">Worldwide</span>
</pre> 
     </div> 
     <h2 id="example">Example</h2> 
     <p>This section shows how to define a simple query to retrieve information about the queries stored in the ART repository. The query has one parameter (the query name), obtained from a dynamic lov.</p> 
     <p>In order to proceed with this example you need to:</p> 
     <ul> 
      <li>Set up a datasource that points to the ART repository</li> 
      <li>Define a user and a query group</li> 
     </ul> 
     <p><br /></p> 
     <ul> 
      <li> <p><strong>LOV Query</strong><br /> This query is the one used to retrieve the list of values (i.e. the list of available queries that will be shown as a parameter). From the <strong>Admin Console</strong> click on the <strong>Queries</strong> button and then on the <strong>Create New Query</strong> button. Set the query name to &quot;ART Query Names&quot;, Set the type to <strong>LOV: Dynamic</strong> and type the following as the SQL source:</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">NAME</span> <span class="n">FROM</span> <span class="n">ART_QUERIES</span> <span class="n">ORDER</span> <span class="n">BY</span> <span class="n">NAME</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>Select the ART repository database as the Datasource and click on the <strong>Save Changes</strong> button. The query is created and the Query Editor page is now displayed. Click on the <strong>Back to Query Management Console</strong> button to create the main query as specified in the next paragraph.</p> 
     <ul> 
      <li> <p><strong>Main Query</strong><br /> This query retrieves the details of the queries that are defined in ART. It has one parameter whose values are retrieved from the &quot;ART Query Names&quot; query created above. Following the same process used for the previous query, name the query &quot;ART Queries&quot; and for the SQL source use:</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">NAME</span>
<span class="p">,</span> <span class="n">SHORT_DESCRIPTION</span>
<span class="p">,</span> <span class="n">DESCRIPTION</span>
<span class="p">,</span> <span class="n">USES_RULES</span>
<span class="p">,</span> <span class="n">UPDATE_DATE</span>
<span class="n">FROM</span> <span class="n">ART_QUERIES</span> <span class="n">WHERE</span> <span class="n">NAME</span> <span class="o">=</span> <span class="err">#</span><span class="n">query_name</span><span class="err">#</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>Select the ART repository as the Datasource and click on the <strong>Save Changes</strong> button. The query will be created and the Query Editor page displayed. Click on the <strong>Parameters</strong> button, click on <strong>New</strong> and set the parameter type as <strong>Inline</strong>. Enter the label name (without #, case sensitive), a friendly name, a short description and help description. Set the <strong>Use List Of Values</strong> option to <strong>Yes</strong> and select &quot;ART Query Names&quot; in the <strong>LOV Query</strong> field. Click on the <strong>Submit</strong> button to save the parameter details.</p> 
     <p>Go back to the <strong>Admin Console</strong> and click on the <strong>User/User Group Privileges</strong> button. Select a user and grant him access to the query &quot;ART Queries&quot;. Now you can log in as the user and execute the query.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>You don't have to assign access to the LOV query itself. As long as a user has access to the main query, they will be able to view the parameter values supplied by the LOV query.</li> 
      <li> <p>You can't use rules with static lovs. If you have a PostgreSQL database, you can create a dynamic lov that will return the static values, with syntax like the following</p> 
       <div class="codehilite"> 
        <pre><span class="n">select</span> <span class="n">id</span> <span class="n">from</span>
<span class="p">(</span><span class="n">select</span> <span class="n">unnest</span><span class="p">(</span><span class="n">ARRAY</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span> <span class="n">as</span> <span class="n">id</span><span class="p">)</span> <span class="n">as</span> <span class="n">id_list</span>
<span class="n">where</span> <span class="err">#</span><span class="n">rules</span><span class="err">#</span>
</pre> 
       </div> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="dynamic-queries">Dynamic Queries</h1> 
     <p>It is possible to create Dynamic SQL queries using xml-like tags in the SQL source section. This feature allows you to modify the structure of the query based on user parameters, possibly running completely different queries depending on the user input.</p> 
     <p>The syntax is as follows. Tag names are case sensitive.</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;IF&gt;</span>
    <span class="nt">&lt;EXP1&gt;</span>value1<span class="nt">&lt;/EXP1&gt;</span> <span class="nt">&lt;OP&gt;</span>operator<span class="nt">&lt;/OP&gt;</span> <span class="nt">&lt;EXP2&gt;</span>value2<span class="nt">&lt;/EXP2&gt;</span>
    <span class="nt">&lt;TEXT&gt;</span> ... <span class="nt">&lt;/TEXT&gt;</span>
    <span class="nt">&lt;ELSETEXT&gt;</span> ... <span class="nt">&lt;/ELSETEXT&gt;</span>
    <span class="nt">&lt;/IF&gt;</span>
</pre> 
     </div> 
     <p>ART parses the query and leaves only the text in the <code>&lt;TEXT&gt;</code> tag if the condition (value1 operator value2) is true or the text in the <code>&lt;ELSETEXT&gt;</code> tag if the condition is false. The EXP1 or EXP2 contents can be static values, inline parameters or :tags, while the OP content is an operator (see supported list below). </p> 
     <p>For example in the following query:</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">SELECT</span> <span class="o">*</span>
    <span class="nb">FROM</span> <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#level</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="k">equals</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;&lt;</span><span class="nx">EXP2</span><span class="o">&gt;</span><span class="nx">summary</span><span class="o">&lt;/</span><span class="nx">EXP2</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span> <span class="nx">orders_summary</span> <span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span> <span class="nx">orders_details</span> <span class="o">&lt;/</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
    <span class="k">WHERE</span> <span class="nx">VENDOR</span> <span class="nx">like</span> <span class="vi">#vendor</span><span class="err">#</span>
    <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#date</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="nx">is</span> <span class="ow">not</span> <span class="kt">null</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span> <span class="ow">AND</span> <span class="nx">order_date</span> <span class="o">&gt;</span> <span class="vi">#date</span><span class="err">#</span> <span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
</pre> 
     </div> 
     <p>if the <code>#level#</code> parameter is set to &quot;summary&quot; and the <code>#date#</code> parameter is not null, ART rewrites the query as:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="o">*</span>
    <span class="n">FROM</span> <span class="n">orders_summary</span>
    <span class="n">WHERE</span> <span class="n">VENDOR</span> <span class="n">like</span> <span class="err">#</span><span class="n">vendor</span><span class="err">#</span>
    <span class="n">AND</span> <span class="n">order_date</span> <span class="o">&gt;</span> <span class="err">#</span><span class="n">date</span><span class="err">#</span>
</pre> 
     </div> 
     <p>if the <code>#level#</code> parameter is not set to &quot;summary&quot; and the <code>#date#</code> is null, ART rewrites the query as:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="o">*</span>
    <span class="n">FROM</span> <span class="n">orders_details</span>
    <span class="n">WHERE</span> <span class="n">VENDOR</span> <span class="n">like</span> <span class="err">#</span><span class="n">vendor</span><span class="err">#</span>
</pre> 
     </div> 
     <h2 id="operators">Operators</h2> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Operator</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>eq</strong> or <strong>equals</strong></td> 
        <td>equals (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>neq</strong> or <strong>not equals</strong></td> 
        <td>not equals (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>ln</strong></td> 
        <td>less than (numbers)</td> 
       </tr> 
       <tr> 
        <td><strong>gn</strong></td> 
        <td>great than (numbers)</td> 
       </tr> 
       <tr> 
        <td><strong>la</strong></td> 
        <td>less than (alphabets) (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>ga</strong></td> 
        <td>great than (alphabets) (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>is blank</strong> or <strong>is null</strong></td> 
        <td>returns true if EXP1 is blank (EXP1 can never be the null object)</td> 
       </tr> 
       <tr> 
        <td><strong>is not blank</strong> or <strong>is not null</strong></td> 
        <td>returns true if EXP1 is not blank (EXP1 can never be the null object)</td> 
       </tr> 
       <tr> 
        <td><strong>starts with</strong></td> 
        <td>returns true if EXP1 string begins with EXP2 (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>ends with</strong></td> 
        <td>returns true if EXP1 string ends with EXP2 (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>contains</strong></td> 
        <td>returns true if EXP1 string contains EXP2 string within it (case insensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>eq cs</strong> or <strong>equals cs</strong></td> 
        <td>equals (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>neq cs</strong> or <strong>not equals cs</strong></td> 
        <td>not equals (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>la cs</strong></td> 
        <td>less than (alphabets) (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>ga cs</strong></td> 
        <td>great than (alphabets) (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>starts with cs</strong></td> 
        <td>returns true if EXP1 string begins with EXP2 (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>ends with cs</strong></td> 
        <td>returns true if EXP1 string ends with EXP2 (case sensitive)</td> 
       </tr> 
       <tr> 
        <td><strong>contains cs</strong></td> 
        <td>returns true if EXP1 string contains EXP2 string within it (case sensitive)</td> 
       </tr> 
      </tbody> 
     </table> 
     <h2 id="dynamic-query-examples">Dynamic Query Examples</h2> 
     <p><strong>Dynamic OR/AND selection</strong>:</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">SELECT</span> <span class="o">*</span>
    <span class="nb">FROM</span> <span class="nx">orders_summary</span>
    <span class="k">WHERE</span> <span class="nx">VENDOR</span> <span class="nx">like</span> <span class="vi">#vendor</span><span class="err">#</span>
    <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#logic</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="k">equals</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;&lt;</span><span class="nx">EXP2</span><span class="o">&gt;</span><span class="ow">OR</span><span class="o">&lt;/</span><span class="nx">EXP2</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span> <span class="ow">OR</span> <span class="n">country</span> <span class="o">=</span> <span class="vi">#country</span><span class="err">#</span> <span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span> <span class="ow">AND</span> <span class="n">country</span> <span class="o">=</span> <span class="vi">#country</span><span class="err">#</span> <span class="o">&lt;/</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
</pre> 
     </div> 
     <p><strong>Dynamic ORDER BY</strong>: The order by part is driven by the user input</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">SELECT</span> <span class="o">*</span>
    <span class="nb">FROM</span> <span class="nx">orders_summary</span>
    <span class="k">WHERE</span> <span class="nx">VENDOR</span> <span class="nx">like</span> <span class="vi">#vendor</span><span class="err">#</span>
    <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#sortby</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="k">equals</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;&lt;</span><span class="nx">EXP2</span><span class="o">&gt;</span><span class="nx">Vendor</span><span class="o">&lt;/</span><span class="nx">EXP2</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span> <span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span> <span class="o">&lt;/</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
</pre> 
     </div> 
     <p><strong>Dynamic query selection</strong>: A different query is executed depending on user input</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;IF&gt;&lt;EXP1&gt;</span>#showaddr#<span class="nt">&lt;/EXP1&gt;&lt;OP&gt;</span>equals<span class="nt">&lt;/OP&gt;&lt;EXP2&gt;</span>Y<span class="nt">&lt;/EXP2&gt;</span>
    <span class="nt">&lt;TEXT&gt;</span>
    SELECT name, code, address, phone FROM VENDOR
    WHERE VENDOR like #vendor#
    <span class="nt">&lt;/TEXT&gt;</span>
    <span class="nt">&lt;ELSETEXT&gt;</span>
    SELECT name, code, vat, pay_term FROM VENDOR
    WHERE VENDOR like #vendor#
    <span class="nt">&lt;/ELSETEXT&gt;</span>
    <span class="nt">&lt;/IF&gt;</span>
</pre> 
     </div> 
     <p><strong>Dynamic SQL with tags</strong>: The condition is verified only if the date supplied by the user (<code>#date#</code>) is earlier than the system date at query execution time (<code>:DATE</code> tag)</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">SELECT</span> <span class="o">*</span>
    <span class="nb">FROM</span> <span class="nx">orders_summary</span>
    <span class="k">WHERE</span> <span class="nx">VENDOR</span> <span class="nx">like</span> <span class="vi">#vendor</span><span class="err">#</span>
    <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#date</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="nx">la</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;&lt;</span><span class="nx">EXP2</span><span class="o">&gt;</span><span class="p">:</span><span class="kt">DATE</span><span class="o">&lt;/</span><span class="nx">EXP2</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span> <span class="ow">AND</span> <span class="nx">order_date</span> <span class="o">&gt;</span> <span class="vi">#date</span><span class="err">#</span> <span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
</pre> 
     </div> 
     <p><strong>Check user input</strong>: Show a warning instead of executing the query</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;IF&gt;&lt;EXP1&gt;</span>#value#<span class="nt">&lt;/EXP1&gt;&lt;OP&gt;</span>ln<span class="nt">&lt;/OP&gt;&lt;EXP2&gt;</span>10000<span class="nt">&lt;/EXP2&gt;</span>
    <span class="nt">&lt;TEXT&gt;</span> SELECT ... <span class="nt">&lt;/TEXT&gt;</span>
    <span class="nt">&lt;ELSETEXT&gt;</span> SELECT 'Value too High' &quot;Warning&quot; <span class="nt">&lt;/ELSETEXT&gt;</span>
    <span class="nt">&lt;/IF&gt;</span>

    the select statement to use to show the warning depends on the DBMS (for example in
    Oracle you should use SELECT 'Value too High' &quot;Warning&quot; FROM DUAL)
</pre> 
     </div> 
     <p><strong>Dynamic WHERE condition</strong>: E.g. to drill down on null values</p> 
     <div class="codehilite"> 
      <pre>    <span class="k">SELECT</span> <span class="o">*</span> <span class="nb">FROM</span> <span class="nx">customers</span>
    <span class="k">WHERE</span> 
    <span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#email</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="k">equals</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;&lt;</span><span class="nx">EXP2</span><span class="o">&gt;</span><span class="kt">null</span><span class="o">&lt;/</span><span class="nx">EXP2</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span><span class="nx">customer_email</span> <span class="nx">is</span> <span class="kt">null</span><span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span><span class="n">customer_email</span><span class="o">=</span><span class="vi">#email</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">ELSETEXT</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
</pre> 
     </div> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="drill-down-queries">Drill Down Queries</h1> 
     <p>This functionality provides a main query with links from which a user can click to get to a different (drill down) query. For example, the main query can display summary information and a user can click on the drill down query link to display detailed information about a particular item.</p> 
     <p>The main query can be a normal tabular query - displayed in one of the html view modes - or a chart. The drill down query can be of any type.</p> 
     <h2 id="defining-the-main-query">Defining the main query</h2> 
     <p>The main query is created like any other query. Once the query is saved, use the <strong>Drill Down Queries</strong> button to add or modify the drill down queries that will be available for that query.</p> 
     <h2 id="defining-the-drill-down-query">Defining the drill down query</h2> 
     <p>The drill down query is created like any other query. The only requirement is that it needs to have at least one inline parameter defined, with this parameter having the <strong>Drill Down Column</strong> field with a value greater than or equal to 1. The Drill Down Column refers to the column in the main query that will provide the value for the parameter. If the value will come from the first field, the drill down column will have a value of 1 and so on.</p> 
     <h2 id="example">Example</h2> 
     <ul> 
      <li> <p><strong>Sales Summary</strong> (Main Query)</p> 
       <div class="codehilite"> 
        <pre><span class="n">select</span> <span class="n">REGION</span> <span class="s">&quot;Region&quot;</span><span class="p">,</span> <span class="n">SUM</span><span class="p">(</span><span class="n">VOLUME</span><span class="p">)</span> <span class="s">&quot;Volume&quot;</span>
<span class="n">from</span> <span class="n">ORDERS</span>
<span class="n">where</span> <span class="p">...</span>
</pre> 
       </div> </li> 
      <li> <p><strong>Sales Details</strong> (Drill Down query)</p> 
       <div class="codehilite"> 
        <pre><span class="n">select</span> <span class="n">REGION</span><span class="p">,</span> <span class="n">CITY</span><span class="p">,</span> <span class="n">ITEM</span><span class="p">,</span> <span class="n">VOLUME</span>
<span class="n">from</span> <span class="n">ORDER_DETAILS</span>
<span class="n">WHERE</span> <span class="n">REGION</span> <span class="o">=</span> <span class="err">#</span><span class="n">region</span><span class="err">#</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>On the Drill Down query, when defining the <code>#region#</code> parameter, set the option <strong>Drill Down Column</strong> to 1. This means this parameter will match with the first column value on the Main Query (i.e. the &quot;Region&quot; one):</p> 
     <p><img alt="DrillDown-param" src="DrillDown-param.png" /></p> 
     <p>From now on this query will appear as an available Drill Down Query.</p> 
     <p>On the Main Query, select the <strong>Drill Down Queries</strong> option in the Query Editor page</p> 
     <p><img alt="DrillDown-button" src="DrillDown-button.png" /></p> 
     <p>Select <strong>New</strong> and:</p> 
     <ul> 
      <li>Pick the Drill Down query from the list</li> 
      <li>Specify the link column title (header) and link text </li> 
      <li>Select which View Mode will be used to display the Drill Down Query results (output Format - html, xls, pdf etc). Using the <strong>All</strong> option will enable the user to select the view mode, and query parameters.</li> 
      <li>Set if the result of the drill down query should be opened in a different window or in the same one</li> 
     </ul> 
     <p><img alt="DrillDown-pickDetails" src="DrillDown-pickDetails.png" /></p> 
     <p>When executing the Main Query, a new column will appear on the right:</p> 
     <p><img alt="DrillDown-main" src="DrillDown-main.png" /></p> 
     <p>Click on it and the drill down query will be executed - the <code>#region#</code> parameter will match with the first column value</p> 
     <p><img alt="DrillDown-details" src="DrillDown-details.png" /></p> 
     <h2 id="using-the-main-querys-parameters">Using the main query's parameters</h2> 
     <p>In addition to using the main query's column values, a drill down query can also use the main query's parameter values. If in our example above the Main Query allowed the user to select a city, e.g.</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">select</span> <span class="n">REGION</span> <span class="s">&quot;Region&quot;</span><span class="p">,</span> <span class="n">SUM</span><span class="p">(</span><span class="n">VOLUME</span><span class="p">)</span> <span class="s">&quot;Volume&quot;</span>
    <span class="n">from</span> <span class="n">ORDERS</span>
    <span class="n">WHERE</span> <span class="n">CITY</span><span class="o">=</span><span class="err">#</span><span class="n">city</span><span class="err">#</span> <span class="n">AND</span> <span class="p">...</span>
</pre> 
     </div> 
     <p>The Drill Down query can make use of this <code>#city#</code> parameter even if it is not among the columns displayed by the Main Query's select statement. To use the value of the <code>#city#</code> parameter in the Drill Down query,</p> 
     <ul> 
      <li>Define the parameter with the same name as in the Main Query</li> 
      <li>Set the Drill Down Column for this parameter to 0, since the value of this parameter will not be coming from the columns displayed in the Main Query</li> 
     </ul> 
     <p>So the Drill Down query would look something like</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">select</span> <span class="n">REGION</span><span class="p">,</span> <span class="n">CITY</span><span class="p">,</span> <span class="n">ITEM</span><span class="p">,</span> <span class="n">VOLUME</span>
    <span class="n">from</span> <span class="n">ORDER_DETAILS</span>
    <span class="n">WHERE</span> <span class="n">REGION</span> <span class="o">=</span> <span class="err">#</span><span class="n">region</span><span class="err">#</span> <span class="n">and</span> <span class="n">CITY</span><span class="o">=</span><span class="err">#</span><span class="n">city</span><span class="err">#</span>
</pre> 
     </div> 
     <p>Here the <code>#region#</code> parameter will still be set as Drill Down Column 1, since it's getting its value from the Main Query's column 1, while the <code>#city#</code> parameter will be set as Drill Down Column 0, since it's not getting its value from any of the Main Query's columns (the Main Query's select doesn't include the city column).</p> 
     <p>The parameter values from one query are passed down to all drill down queries down the line. So if this drill down query had another drill down query, that query can also use the value of the <code>#city#</code> parameter set in the Main Query, which is 2 queries above it in the drill down sequence.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>Multiple Drill Down queries can be linked to the same Main Query: extra columns will appear with links allowing the user to select which drill down query to run.</li> 
      <li>A Drill Down query can have several parameters to match with any number of column values from the Main Query. It can also have inline or multi parameters that use values from the Main Query's parameters.</li> 
      <li>If the parent query is a chart, the parameter will get the following values 
       <ul> 
        <li>Drill down column 1 = data value</li> 
        <li>Drill down column 2 = category name</li> 
        <li>Drill down column 3 = series name</li> 
       </ul> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="dynamic-query-datasources">Dynamic Query Datasources</h1> 
     <p>When you define a query, you specify the datasource (target database) from which data will be retrieved. Sometimes, you may have several databases that have the same schema but contain different data e.g. a live production database, a test database, a database that has data as at end of month etc. You may want to have the possibility of running the same query over these different databases. Rather than creating several queries with identical sql but different datasources, you can create one query and have the datasource as a parameter that can be selected at runtime. This eliminates the work of creating multiple queries and makes management of the relevant sql much easier - if you need to change the sql, you only have to do it in one place. The process of using dynamic query datasources is as follows.</p> 
     <ul> 
      <li>From the <strong>Admin Console</strong>, click on the <strong>Datasources</strong> button and create a datasource for each of your target databases</li> 
      <li>Create the query that will retrieve the data you want. What you select in the Datasource field is not important as the query will use a dynamically specified datasource. However, it is advisable to set this to a valid, default datasource for your sql, in case an invalid datasource is specified at runtime.</li> 
      <li>Define an inline parameter for your query. Give the parameter a <strong>Parameter Label</strong> even though the sql doesn't have to contain this label, and set the <strong>Data Type</strong> to <strong>DATASOURCE</strong>. If you would like the available datasources to be selected from a list, create and specify the LOV query that will display the desired datasources.</li> 
     </ul> 
     <p>When you run the query, it will use the value of the datasource parameter to determine which datasource to run the query on. The value of this parameter can be either a datasource id or a datasource name.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="rss-feeds">RSS Feeds</h1> 
     <p>Since ART 1.11 it is possible to create RSS 2.0 compliant feeds out of any datasource. </p> 
     <p>This is achieved in three steps:</p> 
     <ul> 
      <li>Create a query where column names follow RSS item element naming convention - see below. The result set column names are used as the names of the <code>&lt;item&gt;</code> sub-elements in the produced xml file. </li> 
      <li>Grant the query to <strong>public_user</strong> and determine the direct URL for the query (see section on &quot;Executing a query via URL&quot;)</li> 
      <li>In the direct URL, set the <strong>viewMode</strong> parameter value to <strong>rss20</strong><br /> This URL, when executed via a browser or RSS reader/aggregator will return an RSS feed.</li> 
     </ul> 
     <p>As a minimum, the query should contain a column named <strong>title</strong> or <strong>description</strong>. </p> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Element Name</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>title</strong></td> 
        <td>The item title</td> 
       </tr> 
       <tr> 
        <td><strong>description</strong></td> 
        <td>The item description</td> 
       </tr> 
       <tr> 
        <td><strong>pubDate</strong></td> 
        <td>The date where the specific item is published</td> 
       </tr> 
       <tr> 
        <td><strong>link</strong></td> 
        <td>The URL pointing to the items</td> 
       </tr> 
       <tr> 
        <td><strong>guid</strong></td> 
        <td>The unique id of the item. If present, a feed aggregator may choose to use this string to determine if an item is new. It may/should be a URL pointing to the full item.</td> 
       </tr> 
      </tbody> 
     </table> 
     <p>Please refer to the RSS specification for more details.<br /> </p> 
     <p>For example the following query:</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">select</span> <span class="n">col1</span> <span class="s">&quot;title&quot;</span><span class="p">,</span> <span class="n">col2</span> <span class="s">&quot;description&quot;</span> <span class="p">,</span> <span class="n">col3</span> <span class="s">&quot;pubDate&quot;</span><span class="p">,</span> <span class="n">col4</span> <span class="s">&quot;guid&quot;</span> 
    <span class="n">from</span> <span class="n">myTable</span>
</pre> 
     </div> 
     <p>Will produce the following RSS 2.0 XML content:</p> 
     <div class="codehilite"> 
      <pre>    <span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
    <span class="nt">&lt;rss</span> <span class="na">version=</span><span class="s">&quot;2.0&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;channel&gt;</span>
     <span class="nt">&lt;title&gt;</span><span class="cp">[</span><span class="nx">Query</span> <span class="nb">Name</span><span class="cp">]</span><span class="nt">&lt;/title&gt;</span>
     <span class="nt">&lt;link&gt;</span><span class="cp">[</span><span class="n">Defaulted</span> <span class="k">in</span> <span class="nx">ART</span> <span class="nx">settings</span><span class="cp">]</span><span class="nt">&lt;/link&gt;</span>
     <span class="nt">&lt;description&gt;</span><span class="cp">[</span><span class="nx">Query</span> <span class="nb">Name</span><span class="cp">]</span><span class="nt">&lt;/description&gt;</span>
     <span class="nt">&lt;pubDate&gt;</span><span class="cp">[</span><span class="nx">current</span> <span class="kt">date</span><span class="cp">]</span><span class="nt">&lt;/pubDate&gt;</span> 
     <span class="nt">&lt;generator&gt;</span>http://art.sourceforge.net<span class="nt">&lt;/generator&gt;</span> 
     <span class="nt">&lt;item&gt;</span>
      <span class="nt">&lt;title&gt;</span><span class="cp">[</span><span class="k">resultset</span> <span class="s2">&quot;title&quot;</span> <span class="nb">column</span><span class="cp">]</span><span class="nt">&lt;/title&gt;</span>
      <span class="nt">&lt;description&gt;</span><span class="cp">[</span><span class="k">resultset</span> <span class="s2">&quot;description&quot;</span> <span class="nb">column</span><span class="cp">]</span><span class="nt">&lt;/description&gt;</span>
      <span class="nt">&lt;guid&gt;</span><span class="cp">[</span><span class="k">resultset</span> <span class="s2">&quot;guid&quot;</span> <span class="nb">column</span><span class="cp">]</span><span class="nt">&lt;/guid&gt;</span>
      <span class="nt">&lt;pubDate&gt;</span><span class="cp">[</span><span class="k">resultset</span> <span class="s2">&quot;pubDate&quot;</span> <span class="nb">column</span><span class="cp">]</span><span class="nt">&lt;/pubDate&gt;</span>
     <span class="nt">&lt;/item&gt;</span>
     <span class="nt">&lt;item&gt;</span> 
      ...
     <span class="nt">&lt;/item&gt;</span>
     ...
    <span class="nt">&lt;/channel&gt;</span>
    <span class="nt">&lt;/rss&gt;</span>
</pre> 
     </div> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>Date/Timestamp columns are converted to RfC 822 formatted strings. Characters <code>&lt;</code>, <code>&gt;</code> and <code>&amp;</code> are converted to html escape entities. If needed, for any other special characters, you should take care of proper conversion.</li> 
      <li>Only the <code>&lt;item&gt;</code> elements are customizable by using the proper column names. Channel elements are as in the example: the default channel link tag can be set by an administrator from the Settings page.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="dashboards">Dashboards</h1> 
     <p>Dashboards are used to display queries on a single portal-like page.</p> 
     <p>Any ART query can be considered a portlet i.e. a small embeddable frame within a web page. Each portlet uses AJAX components to dynamically load itself within the page. Users can refresh or minimize each portlet independently by clicking on the buttons at the top of the portlet frame. When a user executes a dashboard, he can choose to modify the default parameters used by the queries in the dashboard. All the embedded queries are parsed and their parameters, if any, are displayed. If several queries use the same inline parameter label, this is displayed only once.</p> 
     <p><img alt="dashboard-example" src="dashboard-example.png" /></p> 
     <h2 id="features">Features</h2> 
     <ul> 
      <li>You can define as many columns as you need (tag: <code>&lt;COLUMN&gt;</code>)</li> 
      <li>For each column you can specify a size (tag: <code>&lt;SIZE&gt;</code>)</li> 
      <li>Within each column you can specify one or more portlets (tag: <code>&lt;PORTLET&gt;</code>)</li> 
      <li>Each portlet has a title (tag: <code>&lt;TITLE&gt;</code>)</li> 
      <li>A portlet can display any ART query using the query's ID (tag: <code>&lt;QUERYID&gt;</code>)</li> 
      <li>An external URL (tag: <code>&lt;URL&gt;</code>) can also be displayed within a portlet</li> 
      <li>A portlet can be refreshed by the end user by clicking on the refresh button. You can set a refresh time (in seconds) to have the portlet auto-refresh itself. (tag: <code>&lt;REFRESH&gt;</code>)</li> 
      <li>Each portlet is rendered on page load. You can override this and let the user decide when he wants to see the content (by clicking on the refresh button). (tag: <code>&lt;ONLOAD&gt;</code>)</li> 
     </ul> 
     <h2 id="syntax">Syntax</h2> 
     <p>XML-like syntax is used to define the dashboard structure</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;DASHBOARD&gt;</span>

    <span class="nt">&lt;COLUMN&gt;</span>
    <span class="c">&lt;!-- column size: auto|small|medium|large. default is auto--&gt;</span>
    <span class="nt">&lt;SIZE&gt;</span>medium<span class="nt">&lt;/SIZE&gt;</span>

    <span class="c">&lt;!-- create a new portlet within this column</span>
<span class="c">    to embed an ART query (tabular, chart, text) --&gt;</span>
    <span class="nt">&lt;PORTLET&gt;</span>
    <span class="nt">&lt;TITLE&gt;</span>Portlet title<span class="nt">&lt;/TITLE&gt;</span>

    <span class="c">&lt;!-- (optional, default is true) load content when page is displayed --&gt;</span>
    <span class="nt">&lt;ONLOAD&gt;</span>false<span class="nt">&lt;/ONLOAD&gt;</span>

    <span class="c">&lt;!-- (optional, default is never) refresh content every 30 seconds--&gt;</span>
    <span class="nt">&lt;REFRESH&gt;</span>30<span class="nt">&lt;/REFRESH&gt;</span>

    <span class="c">&lt;!-- embed ART query --&gt;</span>
    <span class="nt">&lt;QUERYID&gt;</span>2<span class="nt">&lt;/QUERYID&gt;</span>
    <span class="nt">&lt;/PORTLET&gt;</span>

    <span class="c">&lt;!-- create a new portlet within this column</span>
<span class="c">    to embed an external html page --&gt;</span>
    <span class="nt">&lt;PORTLET&gt;</span>
    <span class="nt">&lt;TITLE&gt;</span>Portlet title<span class="nt">&lt;/TITLE&gt;</span>
    <span class="nt">&lt;URL&gt;</span>http://my.site.com/page.html<span class="nt">&lt;/URL&gt;</span>
    <span class="nt">&lt;/PORTLET&gt;</span>

    <span class="c">&lt;!-- .. you can add as many portlets as you want --&gt;</span>
    <span class="nt">&lt;/COLUMN&gt;</span>

    <span class="nt">&lt;COLUMN&gt;</span>
    <span class="c">&lt;!-- you can add as many columns as you want --&gt;</span>
    <span class="nt">&lt;/COLUMN&gt;</span>

    <span class="nt">&lt;/DASHBOARD&gt;</span>
</pre> 
     </div> 
     <p><br /></p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>Using the <code>&lt;QUERYID&gt;</code> tag, tabular queries are displayed using the html view mode. To override this, use the <code>&lt;URL&gt;</code> tag and type the direct access URL for the query</li> 
      <li>Tag names are case sensitive (use uppercase)</li> 
      <li>Minimum refresh period allowed is 5 seconds. Be careful with this so as not to overload the server and databases.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="text-queries">Text Queries</h1> 
     <p>A Text query is just a HTML text fragment that can be viewed either within a dashboard or as a standalone web page. When a user is viewing a text query, if he has been granted access to it, an edit link appears at the bottom right of the page. This link can be used to update the content using a WYSIWYG editor.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>Text queries are public by default i.e. anyone can view it using the direct URL. This means that you shouldn't grant explicit access to the query. If you grant access for a given user, this means that the user will be able to update the text contents e.g. if the query is granted to <strong>public_user</strong>, any user will be able to update its content.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="jxls-spreadsheets">jXLS Spreadsheets</h1> 
     <p>ART uses the <a class="" href="http://jxls.sourceforge.net/">jXLS</a> library to provide support for reports based on pre-formatted MS Excel spreadsheets. For details on the syntax of these jXLS templates, see the documentation available on the jXLS website. Generally, you'll follow the following steps to create a jXLS spreadsheet query.</p> 
     <ul> 
      <li>Create an Excel file (either xls or xlsx) with any text and formatting that will be required in the final look report</li> 
      <li>Insert jXLS syntax as appropriate to define where the raw data should go</li> 
      <li>Create a new query in ART and select the jXLS template to use</li> 
      <li> <p>If the query is of type <strong>jXLS Spreadsheet: ART Query</strong>, the sql used to retrieve the data will be the one defined in the SQL source section. You can use parameters, rules and any other features of ART queries. In the template, use the identifier <strong>results</strong> to output query values. e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="cp">${</span><span class="n">results</span><span class="o">.</span><span class="n">description</span><span class="cp">}</span>
</pre> 
       </div> </li> 
      <li> <p>If the query is of type <strong>jXLS Spreadsheet: Template Query</strong>, the sql used to retrieve the data will be the one defined in the template. You can pass parameters to the template sql by typing parameter labels in the SQL source section and defining the parameters as usual. By default, the database used for the query will be the one selected in the datasource field of the query. The database to be used can also be specified within the template using either the datasource ID or datasource name. Examples.</p> </li> 
     </ul> 
     <p>Using the datasource defined in the query</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;jx:forEach</span> <span class="na">items=</span><span class="s">&quot;</span><span class="cp">${</span><span class="n">rm</span><span class="o">.</span><span class="k">exec</span><span class="p">(</span><span class="s">'select * from wishes'</span><span class="p">)</span><span class="cp">}</span><span class="s">&quot;</span> <span class="na">var=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
    <span class="cp">${</span><span class="n">item</span><span class="o">.</span><span class="n">description</span><span class="cp">}</span>
    <span class="nt">&lt;/jx:forEach&gt;</span>
</pre> 
     </div> 
     <p><br /></p> 
     <p>Using a specific datasource ID</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;jx:forEach</span> <span class="na">items=</span><span class="s">&quot;</span><span class="cp">${</span><span class="n">rm</span><span class="o">.</span><span class="k">exec</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s">'select * from wishes'</span><span class="p">)</span><span class="cp">}</span><span class="s">&quot;</span> <span class="na">var=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
    <span class="cp">${</span><span class="n">item</span><span class="o">.</span><span class="n">description</span><span class="cp">}</span>
    <span class="nt">&lt;/jx:forEach&gt;</span>
</pre> 
     </div> 
     <p><br /><br /> Using a specific datasource name</p> 
     <div class="codehilite"> 
      <pre>    <span class="nt">&lt;jx:forEach</span> <span class="na">items=</span><span class="s">&quot;</span><span class="cp">${</span><span class="n">rm</span><span class="o">.</span><span class="k">exec</span><span class="p">(</span><span class="s">'wishlist'</span><span class="p">,</span><span class="s">'select * from wishes'</span><span class="p">)</span><span class="cp">}</span><span class="s">&quot;</span> <span class="na">var=</span><span class="s">&quot;item&quot;</span><span class="nt">&gt;</span>
    <span class="cp">${</span><span class="n">item</span><span class="o">.</span><span class="n">description</span><span class="cp">}</span>
    <span class="nt">&lt;/jx:forEach&gt;</span>
</pre> 
     </div> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="pivot-tables-olap">Pivot Tables (OLAP)</h1> 
     <p>ART uses the <a class="" href="http://mondrian.pentaho.com/" rel="nofollow">Mondrian</a> OLAP server to provide OLAP functionality. There are 3 query types that can be created to provide OLAP analysis.</p> 
     <h2 id="mondrian">Mondrian</h2> 
     <p>This query type uses ART's internal mondrian engine to execute OLAP queries. To use it, do the following.</p> 
     <ul> 
      <li>Create a mondrian cube schema file that defines your cube</li> 
      <li>Create a new query in ART of the type <strong>Pivot Table: Mondrian</strong></li> 
      <li>Select the ART datasource that the cube is based on</li> 
      <li>For the Template field, select the schema file for the cube</li> 
      <li>In the MDX source field, enter the MDX for your query</li> 
     </ul> 
     <h2 id="mondrian-xmla">Mondrian XMLA</h2> 
     <p>This query type is used to access cubes defined in an external mondrian server. To use it, do the following.</p> 
     <ul> 
      <li>Create a new query in ART of the type <strong>Pivot Table: Mondrian XMLA</strong></li> 
      <li>Enter the url of the mondrian server</li> 
      <li>Enter the required xmla datasource name. This should match exactly with the contents of the <strong>DataSourceName</strong> tag in the <strong>datasources.xml</strong> file defined on the external server</li> 
      <li>Enter the required xmla catalog name. This should match exactly with the contents of the <strong>Catalog</strong> name in the <strong>datasources.xml</strong> file defined on the external server</li> 
      <li>In the MDX source field, enter the MDX for your query</li> 
     </ul> 
     <h2 id="microsoft-xmla">Microsoft XMLA</h2> 
     <p>This query type is used to access cubes defined in a Microsoft SQL Server Analysis Services (SSAS) server. To use it, do the following.</p> 
     <ul> 
      <li>Ensure the SSAS server is setup for HTTP access. See <a href="http://ssas-wiki.com/w/Articles#HTTP_Access" rel="nofollow">http://ssas-wiki.com/w/Articles#HTTP_Access</a> for resources on how to do this.</li> 
      <li>Ensure security access to the required database is setup. To do this, 
       <ul> 
        <li>Connect to the SSAS server using SQL Server Management Studio</li> 
        <li>Expand the required database and right-click on the <strong>Roles</strong> section</li> 
        <li>Select the <strong>New Role</strong> menu to create a new role</li> 
        <li>In the <strong>Membership</strong> section, add the required users. If HTTP access is configured for anonymous access, add the <strong>IUSR_</strong> user. If not, add the user whose credentials will be used to access the cube</li> 
        <li>Save the role</li> 
       </ul> </li> 
      <li>Enter the url of the SSAS server</li> 
      <li>Enter the required xmla datasource name. This is the name of the analysis services database that the cube is based on.</li> 
      <li>If the SSAS server is configured to allow anonymous access, leave the xmla username and password fields blank. If it's configured to require basic authentication, enter the username and password of a user in a role that has access to the required cube.</li> 
      <li>In the MDX source field, enter the MDX for your query</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li> <p>You can use inline parameters in the mdx just like with any other ART query e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> 
<span class="p">{</span> <span class="p">[</span><span class="n">Measures</span><span class="p">].[</span><span class="n">Sales</span> <span class="n">Amount</span><span class="p">],</span> <span class="p">[</span><span class="n">Measures</span><span class="p">].[</span><span class="n">Tax</span> <span class="n">Amount</span><span class="p">]</span> <span class="p">}</span> <span class="n">ON</span> <span class="n">COLUMNS</span><span class="p">,</span> 
<span class="p">{</span> <span class="p">[</span><span class="n">Date</span><span class="p">].[</span><span class="n">Fiscal</span><span class="p">].[</span><span class="n">Fiscal</span> <span class="n">Year</span><span class="p">].</span><span class="o">&amp;</span><span class="p">[</span><span class="err">#</span><span class="n">FromYear</span><span class="err">#</span><span class="p">],</span> <span class="p">[</span><span class="n">Date</span><span class="p">].[</span><span class="n">Fiscal</span><span class="p">].[</span><span class="n">Fiscal</span> <span class="n">Year</span><span class="p">].</span><span class="o">&amp;</span><span class="p">[</span><span class="err">#</span><span class="n">ToYear</span><span class="err">#</span><span class="p">]</span> <span class="p">}</span> <span class="n">ON</span> <span class="n">ROWS</span> 
<span class="n">FROM</span> <span class="p">[</span><span class="n">Adventure</span> <span class="n">Works</span><span class="p">]</span> 
<span class="n">WHERE</span> <span class="p">(</span> <span class="p">[</span><span class="n">Sales</span> <span class="n">Territory</span><span class="p">].[</span><span class="err">#</span><span class="n">Territory</span><span class="err">#</span><span class="p">]</span> <span class="p">)</span>
</pre> 
       </div> </li> 
      <li> <p>You can also use multi parameters. In this case, construct the LOV query such that it returns strings as they would appear in the MDX. e.g.<br /> Example LOV</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">CONCAT</span><span class="p">(</span><span class="s">&quot;[Order.Order Sale Type].[&quot;</span><span class="p">,</span><span class="n">sale_type_code</span><span class="p">,</span><span class="s">&quot;]&quot;</span><span class="p">)</span> <span class="n">as</span> <span class="n">typecodes</span><span class="p">,</span> <span class="n">sale_type_code</span>     
<span class="n">FROM</span> <span class="n">dim_orders</span>
</pre> 
       </div> <p>Use multi parameter in MDX as desired...</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="p">...</span> <span class="n">FROM</span> <span class="p">...</span>
<span class="n">WHERE</span> <span class="p">{</span><span class="err">#</span><span class="n">saleTypes</span><span class="err">#</span><span class="p">}</span>
</pre> 
       </div> </li> 
      <li> <p>Pivot Tables use cached data where possible. To manually clear the cache, from the <strong>Admin Console</strong>, select the <strong>Datasources</strong> option, and then click on the <strong>Clear Mondrian Cache</strong> link. If you'd like the cache to be automatically cleared periodically, use the <strong>Mondrian Cache Expiry</strong> setting on the Settings page.</p> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="user-privileges">User Privileges</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>User/User Group Privileges</strong> option to define which queries a user or user group can execute.<br /> </p> 
     <p>If you give access to a query group, the user or user group will have access to all the queries in the group. If you give access to a query, the user or user group will only have access to that specific query and not any others in the query group.<br /> </p> 
     <p>You can select multiple users or user groups at the same time (using crtl+click or shift+click) and therefore apply the GRANT or REVOKE action to a set of users or user groups.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="admin-privileges">Admin Privileges</h1> 
     <p>From the <strong>Admin Console</strong>, use the <strong>Admin Privileges</strong> option to define which query groups and datasources a low-privileged administrator (Junior and Mid Admin) can deal with.<br /> </p> 
     <p>You can select multiple users at the same time (using crtl+click or shift+click) and therefore apply the GRANT or REVOKE action to a set of administrators.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="rules">Rules</h1> 
     <p>Rules are used to filter query results. They allow the same query to be dynamically filtered depending on the user that is executing it.</p> 
     <p>The following steps need to be performed in order to use rules:</p> 
     <ul> 
      <li> <p><strong>Define the rule name</strong> (it's just a label)<br /> From the Admin Console, click on the <strong>Rules</strong> button and specify the rule name<br /> <br /><br /></p> </li> 
      <li> <p><strong>Link the query to the rule</strong><br /> On the query definition page, set the <strong>Uses Rules</strong> option to <strong>Yes</strong>. <br /> In the SQL source section, use the special, hard coded label <strong>#rules#</strong> where you want the rule values to go e.g</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="o">*</span> <span class="n">from</span> <span class="n">transactions</span>
<span class="n">where</span> <span class="err">#</span><span class="n">rules</span><span class="err">#</span>
</pre> 
       </div> <p>The Query Editor page will now have a <strong>Rules</strong> button. Click on it and specify which column the rule values will apply to<br /> <br /><br /></p> </li> 
      <li> <p><strong>Assign to users or user groups the rule values</strong> that will apply to them<br /> From the Admin Console, click on the <strong>Rule Values</strong> button.<br /> Select the user or user group and rule name, and specify the rule values that will apply for that user or user group. If you want the user or user group to have multiple rule values, add each value separately. i.e Add the first value, then click on submit, then Add the next value etc.</p> </li> 
     </ul> 
     <p>Rule values can be EXACT values or LOOKUP to other users or user groups. You may want to create a &quot;dummy&quot; user in order to group rule values: for example you can create one user with username &quot;NorthEast&quot; and assign to him - for the rule &quot;GeoArea&quot; - the values NORTH and EAST. Then for every user you want to use these rule values, you can simply specify the rule type as &quot;Lookup&quot; and rule value as &quot;NorthEast&quot; (i.e. the NorthEast user).</p> 
     <p>Example:</p> 
     <ul> 
      <li>You have a table named &quot;employees&quot; with the a column named &quot;region&quot;</li> 
      <li>Create a rule named &quot;GeoArea&quot;</li> 
      <li>Set up a query that selects rows from the table employees and link it to the rule named &quot;GeoArea&quot; on the column &quot;employees.region&quot;</li> 
      <li>Link the user to the rule &quot;GeoArea&quot; for values NORTH and EAST<br /> When the user executes the query, he will extract only the rows where the &quot;region&quot; column has the values NORTH or EAST (i.e. the SQL query will be modified on the fly before execution by adding the string AND employees.region IN ('NORTH','EAST') to the WHERE clause).</li> 
     </ul> 
     <p><strong>Note</strong>:</p> 
     <ul> 
      <li>If a query is linked to a rule but the user who executes the query has not been set up for that rule, the query execution will not be performed and an error message will be displayed.</li> 
      <li>If the query uses multiple rules, each user that needs to execute it must have values set for all the rules that the query uses.</li> 
      <li>If the query uses parameters, the label <strong>#rules#</strong> shouldn't be used for any parameter as it will conflict with the special label for rules.</li> 
      <li>If you don't want results filtered for a given user e.g. an administrator, manager etc, define a rule value for this user where the rule type is <strong>Exact</strong> and the rule value is <strong>ALL_ITEMS</strong>.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="chained-parameters">Chained Parameters</h1> 
     <p>A parameter can be set up to display different values depending on the value selected in another parameter. The parameter that triggers the change is called the &quot;master&quot;. The driven parameter - called &quot;slave&quot; - needs to be bound to a special dynamic LOV query which uses a special parameter named <strong>filter</strong>, and has the <strong>#filter#</strong> label in the WHERE clause of the SQL.</p> 
     <p>A slave parameter can be used as a master for another parameter, which in turn can have another slave and so on ? hence the term chained parameters.</p> 
     <h2 id="example">Example</h2> 
     <p>Suppose we want to view customers who reside in a particular city. We want the user to select a country and then have cities in that country displayed. He'll then pick one of these cities and run the query. We have a <code>CUSTOMERS</code> table, and one of the columns it has is <code>CITY_ID</code>. We also have a <code>COUNTRIES</code> table which has <code>COUNTRY_ID</code> and <code>COUNTRY_NAME</code> columns. Finally, we have a <code>CITIES</code> table with <code>CITY_ID</code>, <code>CITY_NAME</code> and <code>COUNTRY_ID</code> columns.</p> 
     <p>We could take the following steps to set up the query.</p> 
     <ul> 
      <li> <p>Create a dynamic LOV query named <strong>countries</strong> that will display country names. The country will be the master parameter. Depending on what country is selected, the available cities will change. The query would have the following SQL.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">COUNTRY_ID</span><span class="p">,</span> <span class="n">COUNTRY_NAME</span>
<span class="n">FROM</span> <span class="n">COUNTRIES</span>
<span class="n">ORDER</span> <span class="n">BY</span> <span class="mi">2</span>
</pre> 
       </div> </li> 
      <li> <p>Create a dynamic LOV query named <strong>cities</strong> that will display city names. The city will be a slave parameter since its value will depend on what is chosen for the country parameter. The query needs to have a parameter label named <strong>filter</strong>. This will be replaced at runtime with the country selected.</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">CITY_ID</span><span class="p">,</span> <span class="n">CITY_NAME</span>
<span class="n">FROM</span> <span class="n">CITIES</span>
<span class="n">WHERE</span> <span class="n">COUNTRY_ID</span> <span class="o">=</span> <span class="err">#</span><span class="n">filter</span><span class="err">#</span>
<span class="n">ORDER</span> <span class="n">BY</span> <span class="mi">2</span>
</pre> 
       </div> </li> 
      <li> <p>Save the dynamic LOV query named <strong>cities</strong> and click on the <strong>Parameters</strong> button to create a new <strong>Inline</strong> parameter with the label <strong>filter</strong> and Data Type of <strong>INTEGER</strong>, assuming the <code>COUNTRY_ID</code> column holds integers. If we wanted to display cities from several countries, our cities lov would look something like</p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">CITY_ID</span><span class="p">,</span> <span class="n">CITY_NAME</span>
<span class="n">FROM</span> <span class="n">CITIES</span>
<span class="n">WHERE</span> <span class="n">COUNTRY_ID</span> <span class="n">in</span><span class="p">(</span><span class="err">#</span><span class="n">filter</span><span class="err">#</span><span class="p">)</span>
<span class="n">ORDER</span> <span class="n">BY</span> <span class="mi">2</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>and then we would create the filter parameter as a <strong>Multi</strong> parameter.</p> 
     <ul> 
      <li> <p>Create the main report query. This can be any type of report. The SQL for the query will need to include inline parameter labels so that we can use the master and/or slave parameters. </p> 
       <div class="codehilite"> 
        <pre><span class="n">SELECT</span> <span class="n">FIRST_NAME</span><span class="p">,</span> <span class="n">LAST_NAME</span><span class="p">,</span> <span class="n">EMAIL</span>
<span class="n">FROM</span> <span class="n">CUSTOMERS</span>
<span class="n">WHERE</span> <span class="n">CITY_ID</span> <span class="o">=</span> <span class="err">#</span><span class="n">city</span><span class="err">#</span>
</pre> 
       </div> </li> 
      <li> <p>Once you have saved the main query, click on the parameters button to define the parameters</p> </li> 
      <li>Add an inline parameter with the label <strong>country</strong> that will be used to display the countries. Since the country values will be retrieved from an LOV query, set the <strong>Use List Of Values</strong> field to <strong>Yes</strong> and select the countries LOV query created earlier in the <strong>LOV Query</strong> field. Also, since this will be a master parameter and won't depend on any other parameter, leave the <strong>Chained Parameter Sequence</strong> field as <strong>Not Chained</strong>.</li> 
     </ul> 
     <p><img alt="Chained-country" src="Chained-country.png" /></p> 
     <ul> 
      <li>Add an inline parameter with the label <strong>city</strong> that will be used to display cities. Set <strong>Use List Of Values</strong> to <strong>Yes</strong> and select the cities LOV query created earlier in the <strong>LOV Query</strong> field. Since this parameter is a slave, set the <strong>Chained Parameter Sequence</strong> field to <strong>Chain on param 1</strong>. Each parameter can only drive one slave so you can't have two parameters both set to &quot;chain on param 1&quot; for example. If you need the value of a slave parameter to be determined by a parameter other than the one in the parameter sequence, set the <strong>Chained Value Position</strong> field as required. You can therefore have one parameter which is &quot;chained on param 1&quot;, and the next one in the sequence &quot;chained on param 2&quot; (because you can't have two parameters driven by the same master), but with chained value position as &quot;param 1&quot; so that it's values are also determined by param 1.</li> 
     </ul> 
     <p><img alt="Chained-city" src="Chained-city.png" /></p> 
     <p>Parameters have a numerical order, as can be seen in the Edit Parameters page. &quot;Chain on param 1&quot; in this case refers to the countries parameter.</p> 
     <p><img alt="Chained-parameter-order" src="Chained-parameter-order.png" /></p> 
     <p>Now when you run the query, you are presented with two drop down boxes. Depending on what country you select, a different set of cities is displayed, from which you can choose one and execute the query to see the final results.</p> 
     <p><img alt="Chained-parameter-usage" src="Chained-parameter-usage.png" /></p> 
     <h2 id="default-values">Default Values</h2> 
     <p>If you require a chained parameter to be pre-selected with certain values when the master changes, set the <strong>Default Value</strong> field of the parameter to a comma-separated list of values to be marked as selected by default if they exist in the new set of options for the chained parameter. Note that this list is the <strong>actual values</strong> of the chained parameter LOV, and not the friendly names displayed in the LOV.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>The master parameter does not need to be based on an LOV query, in which case the value typed by the user triggers the slave LOV when the master text field loses focus (e.g. by pressing the Tab key). </li> 
      <li> <p>Using a dynamic query, any dynamic LOV query can be converted to be used both as a normal, non-chained LOV or as a filtered LOV. In the following example the WHERE clause is ignored if the <code>#filter#</code> value is not available:</p> 
       <div class="codehilite"> 
        <pre><span class="k">SELECT</span> <span class="nx">CITY_NAME</span> <span class="nb">FROM</span> <span class="nx">CITIES</span>
<span class="o">&lt;</span><span class="k">IF</span><span class="o">&gt;&lt;</span><span class="nx">EXP1</span><span class="o">&gt;</span><span class="vi">#filter</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">EXP1</span><span class="o">&gt;&lt;</span><span class="nx">OP</span><span class="o">&gt;</span><span class="nx">is</span> <span class="ow">not</span> <span class="kt">null</span><span class="o">&lt;/</span><span class="nx">OP</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">TEXT</span><span class="o">&gt;</span><span class="k">WHERE</span> <span class="n">COUNTRY_NAME</span> <span class="o">=</span> <span class="vi">#filter</span><span class="err">#</span><span class="o">&lt;/</span><span class="nx">TEXT</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="k">IF</span><span class="o">&gt;</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span>
</pre> 
       </div> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="scheduling">Scheduling</h1> 
     <p>In order to schedule a query, a user needs an access level of at least <strong>Normal user allowed to schedule jobs</strong>. The user's email needs to be defined correctly and a valid SMTP server needs to be specified in the Settings page if emailing is required. Once logged in, a user's scheduled jobs are available from the <strong>My Jobs</strong> link at the top left corner of the page. If a job has been created by another user and shared, the contents can be obtained by using the <strong>Shared Jobs</strong> link.</p> 
     <h2 id="scheduling-a-new-job">Scheduling a new job</h2> 
     <p>Take the following steps to schedule a new job</p> 
     <ul> 
      <li>From the Start page, select the query to schedule and click on the <strong>Next</strong> button</li> 
      <li>On the next page, select the <strong>Schedule Job</strong> option from the <strong>View Mode</strong> drop down list and click on the <strong>Execute</strong> button. If the query has parameters, you can specify the parameter values that should be used when the job runs. For date parameters, you can specify relative values e.g &quot;ADD DAYS -1&quot; to have the job use the previous day's date whenever it runs.</li> 
      <li>On the next page, specify additional details about the job, including when it will run. The job name is optional, and if not specified, the query name will be used. </li> 
      <li>Click on the <strong>Schedule this Job</strong> button to save the job</li> 
      <li>The job will now run as per the schedule defined, and generate or send output as configured</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>Dashboards and pivot tables cannot be scheduled</li> 
     </ul> 
     <p><img alt="New-job" src="New-job.png" /></p> 
     <h2 id="job-types">Job Types</h2> 
     <ul> 
      <li><strong>E-Mail Output (Attachment)</strong><br /> The output is emailed as an attachment to the specified recipients (in the &quot;To&quot; section). The attachment type can be selected in the View Mode drop down menu.</li> 
      <li><strong>E-Mail Output (Inline)</strong><br /> The output is emailed to the specified recipients, in html format in the email body.</li> 
      <li><strong>Publish</strong><br /> The output is saved to a file. The file is reachable from the My Jobs or Shared Jobs page. Once the file is generated, a notification email is sent to the specified recipients (in the &quot;To&quot; section). Leave the &quot;To&quot; area empty if you don't want a notification email to be sent. </li> 
      <li><strong>Alert</strong><br /> Send an email to the specified recipients if the first column of the first row in the query result has a value greater than zero. You can construct a simple SQL query to return a non zero value in case of a certain business condition.</li> 
     </ul> 
     <p>Example query to be used for an alert. Send an email if a big order is made</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
    <span class="n">FROM</span> <span class="n">todays_order_details</span>
    <span class="n">WHERE</span> <span class="n">quantity</span><span class="o">&gt;</span><span class="mi">100</span>
</pre> 
     </div> 
     <p>To make the alert even more useful, you can create a detailed report with the details a user may be interested in when the alert is triggered. In the message of the alert, you can include the direct URL link for the report so that when they get the email, they can click on the link and see what exactly caused the alert and perhaps take corrective action.</p> 
     <ul> 
      <li><strong>Just Run It</strong><br /> Simply execute the statement (useful to launch stored procedures or perform periodic data updates).</li> 
      <li><strong>Conditional E-Mail Output (Attachment)</strong><br /> If the result set has records, an email with the output attached is sent to the specified recipients. If it has no records, no email is sent. </li> 
      <li><strong>Conditional E-Mail Output (Inline)</strong><br /> If the result set has records, an email is sent to the specified recipients with the output contained in the email body. If it has no records, no email is sent. </li> 
      <li><strong>Conditional Publish</strong><br /> If the result set has records, the output will available from the My Jobs or Shared Jobs page. A notification email is sent to the specified recipients if this is configured. If the result set has no records, no output is generated and no email is sent.</li> 
      <li><strong>Cache ResultSet (Append)</strong><br /> Cache the result set in a database table (Append)</li> 
      <li><strong>Cache ResultSet (Delete&amp;Insert)</strong><br /> Cache the result set in a database table (Delete&amp;Insert)</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>If the output for a job creates a file e.g. publish to pdf, this file is stored in the <strong>ART_HOME\export\jobs</strong> directory</li> 
     </ul> 
     <h2 id="job-archives">Job Archives</h2> 
     <p>For publish and conditional publish jobs, you can specify that a certain number of job runs should be archived i.e. files generated from past runs should be available for viewing. This is done by setting the <strong>Number of runs to archive</strong> field when defining the job, and archived files are available from the <em>Job Archives</em> link at the top left corner.</p> 
     <h2 id="job-auditing">Job Auditing</h2> 
     <p>Use the <strong>Enable Auditing</strong> option to enable/disable logging of additional information for a job run. If set to &quot;No&quot; only the last start and end time is recorded (in the <code>ART_JOBS</code> table). If set to &quot;Yes&quot;, an additional record will be created in the <code>ART_JOBS_AUDIT</code> table indicating the start time, end time and status of each job run.</p> 
     <h2 id="saved-schedules">Saved Schedules</h2> 
     <p>If a schedule is used frequently, it can be saved such that you don't need to enter all the details each time you create a job. To save a new schedule, enter all the schedule details, tick the <strong>Save this schedule</strong> box and enter a name for the schedule. When the job is saved using the <strong>Schedule this job</strong> button, the new schedule will be saved. To reuse a schedule, select it from the <strong>Saved Schedules</strong> option and click on the <strong>Get</strong> button. The schedule details will be retrieved and filled in the appropriate job schedule fields. Administrators can create, modify or delete saved schedules using the <strong>Schedules</strong> option from the <strong>Admin Console</strong>.</p> 
     <h2 id="job-duration">Job Duration</h2> 
     <p>When defining the job schedule, you can specify the date when the job should start running and the date when it should stop in the <strong>Start Date</strong> and <strong>End Date</strong> fields respectively. If the start date is left blank, the job will start running on the current date, as per it's schedule. If the end date is left blank, the job will continue to run indefinitely.</p> 
     <h2 id="shared-jobs">Shared Jobs</h2> 
     <p>By default, only the owner of a job has access to its output, particularly for published jobs. Shared jobs allow the output of a job to be shared with other users. To share a job's output, set the <strong>Allow job to be shared</strong> field to &quot;Yes&quot; and select the users or user groups with whom the output will be shared. These users will be able to access the job's output from the Shared Jobs link at the top left corner. Administrators can also share jobs with users or user groups using the <strong>Shared Jobs</strong> option from the <strong>Admin Console</strong>.</p> 
     <h3 id="split-jobs">Split Jobs</h3> 
     <p>If the query for a shared job uses rules, you can specify that the rule values for the shared users be applied so that each individual user may get different, individualized output. To do this, set the <strong>Individualize output if query uses rules</strong> field to &quot;Yes&quot;. If this field is set to &quot;No&quot; and the query uses rules, the rule values of the job owner will be applied and all shared users will get this same output. If the query doesn't use rules, the value of this field will have no effect. A single, identical output will be availed to all users.</p> 
     <h2 id="random-start-times">Random Start Times</h2> 
     <p>You may not care when exactly a job runs, as long as it runs in a certain time window. If you leave the Hour and Minute fields blank when creating the job, the job will be assigned a random hour between 3-6 and a random minute between 0-59 in which it will run. This may be useful for jobs that your require to run at night. Additionally, you can specify an explicit time range in which the job should run. To do this, in the <strong>Hour</strong> field, define the required start time and end time separated by | e.g. 4|7, 4:30|6, 12:45|13:15. The job will then be assigned a random execution time in this range.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="cached-results">Cached Results</h1> 
     <p>ART can be used to reverse query results from a datasource to the same or a different datasource. <br /> This allows administrators to:</p> 
     <ul> 
      <li>Group data to summary tables, creating a data mart from which to develop other queries</li> 
      <li>Create Data-Transformation-Load procedures (DTL) to feed other systems</li> 
     </ul> 
     <p>One typical usage is when a large dataset would create performance issues if queried directly by end users. If the underlying data can be grouped - for instance on a monthly basis - a Cached Result job can summarize the information and then fast-performing queries can be created to analyse the summarized data.</p> 
     <h2 id="create-a-new-cached-result">Create a new Cached Result</h2> 
     <p>In order to cache the results of an existing query:</p> 
     <ul> 
      <li>Schedule a Job for the query: select the &quot;Schedule Job&quot; option from the available View Modes when executing the query</li> 
      <li>In the Define Job screen among the <strong>Job Type</strong> items, the following items appear for administrators: 
       <ul> 
        <li><strong>Cache ResultSet (Append)</strong></li> 
        <li><strong>Cache ResultSet (Delete&amp;Insert)</strong></li> 
       </ul> </li> 
      <li>Select the datasource where to reverse the data (note: the datasource must be writeable i.e. the datasource user should have UPDATE/DELETE/INSERT/CREATE TABLE rights on the target database table)</li> 
      <li>Select the name of the table in the target datasource that will contain the data (<strong>Cached Table</strong> name)</li> 
      <li>Schedule the timing when the action should take place, like any other job</li> 
     </ul> 
     <p><img alt="cached-result" src="cached-result.png" /></p> 
     <h2 id="accessing-a-cached-result">Accessing a Cached Result</h2> 
     <p>At the given time ART will:</p> 
     <ul> 
      <li>Execute the query</li> 
      <li>Connect to the datasource where to reverse the results 
       <ul> 
        <li>The Cached Table is created in the selected datasource (if the table doesn't exist). The column names will match with the query column names. Blanks or other special charaters in the names are replaced with &quot;_&quot;.</li> 
        <li>The table content is deleted if the option <strong>Cache ResultSet (Delete&amp;Insert)</strong> was selected</li> 
       </ul> </li> 
      <li>Reverse all the query results in the new table</li> 
     </ul> 
     <p>A cached table is just a normal table in the database. Details about the columns names are available in the My Jobs page.</p> 
     <p><strong>Note:</strong> </p> 
     <ul> 
      <li>The Cached Table is removed when the job is deleted. However if the job is edited (via the My Jobs page) and the table name changed, the previous table is maintained.</li> 
      <li>No indexes are created on top of the Cached Table. For large datasets to be inquired by other queries it is suggested to manually create indexes once the table is created. Since the table is not dropped/recreated at each Job execution the indexes will persist.</li> 
      <li>Basic columns types (integer, varchar, date, etc) can be properly reversed. BLOB, CLOB or other database specific non-standard data types have not been tested and will likely generate errors.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="dynamic-recipients">Dynamic Recipients</h1> 
     <p>Dynamic recipients allows you to email query results to a dynamic list of people. This may be useful where the recipients may change from day to day or week to week e.g. sending an email to staff who are low on their targets. It may also be useful to send filtered query results e.g.send to users only the transactions that they created or send to a support person the open tickets they are responsible for.</p> 
     <p>Using the dynamic recipients feature will involve the following process</p> 
     <ul> 
      <li>Create the main query with the data to be sent to the desired recipients</li> 
      <li>Create a query of type <strong>Dynamic Job Recipients</strong> that will contain details of the recipients, including their email addresses</li> 
      <li>Schedule a job for the main query and select the dynamic recipients query you created in the <strong>Dynamic Recipients</strong> field</li> 
     </ul> 
     <p>There are several ways to use dynamic recipients.</p> 
     <h2 id="dynamic-recipients-only">Dynamic Recipients only</h2> 
     <p>If you want all the recipients to get the same data and the same email message, then define a dynamic recipients query with only one column e.g.</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">email</span>
    <span class="n">FROM</span> <span class="n">employee</span>
</pre> 
     </div> 
     <p>This column should contain the email addresses of the recipients. The name of the column doesn't matter.</p> 
     <h2 id="dynamic-recipients-personalization">Dynamic Recipients + Personalization</h2> 
     <p>If you want all the recipients to get the same data, but you would like some personalization of the email message e.g. having a greeting like Dear John instead of Dear Employee, then define a dynamic recipients query where the first column contains the recipient email addresses, and any additional columns that you would like to use in the email message e.g.</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">email</span><span class="p">,</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">other_name</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">order_count</span>
    <span class="n">FROM</span> <span class="n">employee</span><span class="p">,</span> <span class="n">orders</span>
    <span class="n">WHERE</span> <span class="n">employee</span><span class="p">.</span><span class="n">id</span><span class="o">=</span><span class="n">orders</span><span class="p">.</span><span class="n">employee_id</span>
</pre> 
     </div> 
     <p>When defining the job for your data query, in the email message section, you can then use column labels as placeholders where personalized details will be put. The labels consist of column names from the recipients query surrounded by # signs e.g. you can have a message like</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">Dear</span> <span class="err">#</span><span class="n">first_name</span><span class="err">#</span> <span class="err">#</span><span class="n">last_name</span><span class="err">#</span>
    <span class="n">You</span> <span class="n">are</span> <span class="n">now</span> <span class="n">at</span> <span class="err">#</span><span class="n">order_count</span><span class="err">#</span> <span class="n">orders</span><span class="p">,</span> <span class="n">which</span> <span class="n">is</span> <span class="n">below</span> <span class="n">the</span> <span class="n">target</span> <span class="n">of</span> <span class="mf">100.</span>
</pre> 
     </div> 
     <p>Each person in the dynamic recipients query list will get a personalized email with the column labels substituted with his values.</p> 
     <h2 id="dynamic-recipients-filtering">Dynamic Recipients + Filtering</h2> 
     <p>If you want the recipients to get different data, you will define a dynamic recipients query where the first column contains the recipient email addresses, any additional columns with personalization information if you want, and 2 other special, hard coded columns named <strong>recipient_column</strong> and <strong>recipient_id</strong>. These will be used to filter the data query. i.e. WHERE <code>&lt;recipient_column&gt;</code> = <code>&lt;recipient_id&gt;</code>. The main, data query will also need to have a special, hard coded label, <strong>#recipient#</strong>, in the where clause.</p> 
     <p>Example:<br /> If we want to email users only transactions that they created, our data query can be something like</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="o">*</span>
    <span class="n">FROM</span> <span class="n">transactions</span>
    <span class="n">WHERE</span> <span class="n">transaction_date</span> <span class="o">=</span> <span class="n">CURDATE</span><span class="p">()</span>
    <span class="n">AND</span> <span class="err">#</span><span class="n">recipient</span><span class="err">#</span>
</pre> 
     </div> 
     <p>We can then define a dynamic recipients query like</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">email</span><span class="p">,</span> <span class="s">&quot;transaction_user&quot;</span> <span class="n">recipient_column</span><span class="p">,</span> <span class="n">employee_id</span> <span class="n">recipient_id</span>
    <span class="n">FROM</span> <span class="n">employee</span>
</pre> 
     </div> 
     <p>This will cause the <code>#recipient#</code> label in the data query to be replaced with the condition <code>transaction_user = &lt;employee_id&gt;</code>, where <code>&lt;employee_id&gt;</code> will be different for each recipient, as per the dynamic recipients query. We can then schedule a job for the main query and set the dynamic recipients field, and all the recipients will get a separate email with their specific data only.</p> 
     <p>If we also want to include personalization fields in the email message body, we can add these to the dynamic recipients query e.g</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">SELECT</span> <span class="n">email</span><span class="p">,</span> <span class="s">&quot;transaction_user&quot;</span> <span class="n">recipient_column</span><span class="p">,</span> <span class="n">employee_id</span> <span class="n">recipient_id</span><span class="p">,</span> <span class="n">first_name</span>
    <span class="n">FROM</span> <span class="n">employee</span>
</pre> 
     </div> 
     <p>and we can then include the personalization labels in the email message field as desired.</p> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="single-sign-on">Single Sign On</h1> 
     <p>ART uses the spnego library available at <a href="http://spnego.sourceforge.net/">http://spnego.sourceforge.net/</a> to provide Single Sign On/Integrated Windows Authentication functionality. These instructions are largely based on the documentation found on that project's website.</p> 
     <h2 id="prerequisites">Prerequisites</h2> 
     <p>You need to have at least 3 separate machines as follows</p> 
     <ul> 
      <li>Active Directory server (or other KDC server)</li> 
      <li>Application server (a different machine where the application server e.g. Tomcat is installed)</li> 
      <li>Client machine(s) (from where you'll access ART)</li> 
     </ul> 
     <h2 id="on-the-active-directory-server">On the Active Directory server</h2> 
     <ul> 
      <li>Create a user in AD to be used for authentication purposes. This user doesn't need to have access to log in to computers. e.g. a user named spnego. Set the password to never expire</li> 
      <li> <p>Create spns that point to the application server/spnego user combination using the setspn command. Use syntax like below</p> 
       <div class="codehilite"> 
        <pre><span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span> <span class="n">spnego</span>
<span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">domainname</span> <span class="n">spnego</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>Replace <strong>app-server</strong> with the appropriate machine name of the application server, <strong>my.domain.com</strong> with the domain name and <strong>spnego</strong> with the username of the domain account to be used for spnego access. If you'll also be accessing the web application on the application server via ip address e.g. <code>http://192.168.56.101:8080/art</code>, also create spns for the ip address. Examples</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span> <span class="n">spnego</span>
    <span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">my</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">com</span> <span class="n">spnego</span>
    <span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">192.168.56.101</span> <span class="n">spnego</span>
    <span class="n">setspn</span> <span class="o">-</span><span class="n">A</span> <span class="n">HTTP</span><span class="o">/</span><span class="mf">192.168.56.101</span><span class="p">.</span><span class="n">my</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">com</span> <span class="n">spnego</span>
</pre> 
     </div> 
     <h2 id="on-the-application-server">On the Application server</h2> 
     <ul> 
      <li> <p>Create a file in the ART_HOME\WEB-INF directory named <strong>login.conf</strong> with the following details</p> 
       <div class="codehilite"> 
        <pre><span class="n">spnego</span><span class="o">-</span><span class="n">client</span> <span class="p">{</span>
    <span class="n">com</span><span class="p">.</span><span class="n">sun</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">Krb5LoginModule</span> <span class="n">required</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">spnego</span><span class="o">-</span><span class="n">server</span> <span class="p">{</span>
    <span class="n">com</span><span class="p">.</span><span class="n">sun</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">Krb5LoginModule</span> <span class="n">required</span>
    <span class="n">storeKey</span><span class="o">=</span><span class="nb">true</span>
    <span class="n">isInitiator</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
<span class="p">};</span>
</pre> 
       </div> </li> 
      <li> <p>Create a file in the ART_HOME\WEB-INF directory named <strong>krb5.conf</strong> with the following details. Replace <strong>MY.DOMAIN.COM</strong> with your domain name. For the kdc parameter, use the fully qualified domain name of the AD server.</p> 
       <div class="codehilite"> 
        <pre><span class="p">[</span><span class="n">libdefaults</span><span class="p">]</span>   
    <span class="n">default_realm</span> <span class="o">=</span> <span class="n">MY</span><span class="p">.</span><span class="n">DOMAIN</span><span class="p">.</span><span class="n">COM</span>
    <span class="n">default_tkt_enctypes</span> <span class="o">=</span> <span class="n">aes128</span><span class="o">-</span><span class="n">cts</span> <span class="n">rc4</span><span class="o">-</span><span class="n">hmac</span> <span class="n">des3</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">sha1</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">md5</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">crc</span>
    <span class="n">default_tgs_enctypes</span> <span class="o">=</span> <span class="n">aes128</span><span class="o">-</span><span class="n">cts</span> <span class="n">rc4</span><span class="o">-</span><span class="n">hmac</span> <span class="n">des3</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">sha1</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">md5</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">crc</span>
    <span class="n">permitted_enctypes</span>   <span class="o">=</span> <span class="n">aes128</span><span class="o">-</span><span class="n">cts</span> <span class="n">rc4</span><span class="o">-</span><span class="n">hmac</span> <span class="n">des3</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">sha1</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">md5</span> <span class="n">des</span><span class="o">-</span><span class="n">cbc</span><span class="o">-</span><span class="n">crc</span>

<span class="p">[</span><span class="n">realms</span><span class="p">]</span>
    <span class="n">MY</span><span class="p">.</span><span class="n">DOMAIN</span><span class="p">.</span><span class="n">COM</span>  <span class="o">=</span> <span class="p">{</span>
        <span class="n">kdc</span> <span class="o">=</span> <span class="n">ad</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">my</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">com</span>
        <span class="n">default_domain</span> <span class="o">=</span> <span class="n">MY</span><span class="p">.</span><span class="n">DOMAIN</span><span class="p">.</span><span class="n">COM</span> 
<span class="p">}</span>

<span class="p">[</span><span class="n">domain_realm</span><span class="p">]</span>
    <span class="p">.</span><span class="n">MY</span><span class="p">.</span><span class="n">DOMAIN</span><span class="p">.</span><span class="n">COM</span> <span class="o">=</span> <span class="n">MY</span><span class="p">.</span><span class="n">DOMAIN</span><span class="p">.</span><span class="n">COM</span>
</pre> 
       </div> </li> 
      <li> <p>Edit the ART_HOME\WEB-INF\<strong>web.xml</strong> file and add a filter as below. Replace the <strong>spnego.preauth.username</strong> and <strong>spnego.preauth.password</strong> parameter values with the details of the domain account created to enable spnego access. Replace the <strong>spnego.krb5.conf</strong> and <strong>spnego.login.conf</strong> parameter values with the full path of the respective files. Leave all the other parameters as they are. The spnego filter mapping must come before other filter mapping elements.</p> 
       <div class="codehilite"> 
        <pre><span class="nt">&lt;filter&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>SpnegoHttpFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;filter-class&gt;</span>net.sourceforge.spnego.SpnegoHttpFilter<span class="nt">&lt;/filter-class&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.allow.basic<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.allow.localhost<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>false<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.allow.unsecure.basic<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.login.client.module<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>spnego-client<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.krb5.conf<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>C:\tomcat\webapps\art\WEB-INF\krb5.conf<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.login.conf<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>C:\tomcat\webapps\art\WEB-INF\login.conf<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.preauth.username<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>spnego<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.preauth.password<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>spnego<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.login.server.module<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>spnego-server<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.prompt.ntlm<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>true<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>

    <span class="nt">&lt;init-param&gt;</span>
        <span class="nt">&lt;param-name&gt;</span>spnego.logger.level<span class="nt">&lt;/param-name&gt;</span>
        <span class="nt">&lt;param-value&gt;</span>1<span class="nt">&lt;/param-value&gt;</span>
    <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>
<span class="nt">&lt;filter-mapping&gt;</span>
    <span class="nt">&lt;filter-name&gt;</span>SpnegoHttpFilter<span class="nt">&lt;/filter-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>*.jsp<span class="nt">&lt;/url-pattern&gt;</span>     
<span class="nt">&lt;/filter-mapping&gt;</span>
</pre> 
       </div> </li> 
     </ul> 
     <h2 id="on-the-client-machine">On the client machine</h2> 
     <ul> 
      <li>The default start page for ART needs to have been set to <strong>Single Sign On</strong> (done in the Settings page)</li> 
      <li>Login to a client machine using a domain account</li> 
      <li>Access the ART home page as usual</li> 
     </ul> 
     <h3 id="omitting-the-credentials-box">Omitting the credentials box</h3> 
     <ul> 
      <li> <p><strong>Firefox</strong><br /> By default, firefox will still display a credentials box requiring a user to enter their domain username/password. To avoid this, do the following</p> 
       <ul> 
        <li>In the address bar, type <strong>about:config</strong></li> 
        <li>In the filter box, type <strong>network.negotiate</strong></li> 
        <li>Double click on the <strong>network.negotiate-auth.trusted-uris</strong> option and enter the url of the application server (excluding the http part and including port number if not port 80) e.g. app-server:8080</li> 
       </ul> <p>If the credentials box is still displayed, set the following options in a similar way</p> 
       <ul> 
        <li><strong>network.negotiate-auth.delegation-uris</strong></li> 
        <li><strong>network.automatic-ntlm-auth.trusted-uris</strong><br /> <br /></li> 
       </ul> </li> 
      <li> <p><strong>IE</strong><br /> For IE, the credentials box may be displayed if you access the web application using ip address. To avoid this, do the following</p> 
       <ul> 
        <li>Under internet options, security, local intranet, sites, click on advanced and add the url to the application server e.g. <code>http://192.168.56.101:8080</code></li> 
       </ul> </li> 
     </ul> 
     <h2 id="using-a-keytab-file">Using a keytab file</h2> 
     <p>Instead of having the spnego username/password in plain text in the web.xml file, you can use a keytab file to hold these credentials. Take the following steps on the application server</p> 
     <ul> 
      <li>Stop tomcat</li> 
      <li>Copy the file ART_HOME\WEB-INF\krb5.conf to the windows directory e.g. C:\windows</li> 
      <li>Rename the file to krb5.ini</li> 
      <li> <p>Open a command prompt window, cd to the ART_HOME\WEB-INF directory and type a command with syntax like the following</p> 
       <div class="codehilite"> 
        <pre><span class="n">ktab</span> <span class="o">-</span><span class="n">a</span> <span class="o">&lt;</span><span class="n">spnego</span> <span class="n">user</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">spnego</span> <span class="n">password</span><span class="o">&gt;</span> <span class="o">-</span><span class="n">k</span> <span class="o">&lt;</span><span class="n">file</span> <span class="n">name</span><span class="o">&gt;</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>E.g.</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">ktab</span> <span class="o">-</span><span class="n">a</span> <span class="n">spnego</span> <span class="n">spnego</span> <span class="o">-</span><span class="n">k</span> <span class="n">art</span><span class="p">.</span><span class="n">keytab</span>
</pre> 
     </div> 
     <ul> 
      <li> <p>Edit the ART_HOME\WEB-INF\<strong>login.conf</strong> file to have contents like the following. Set the full path to the keytab file and the spnego username (principal) as per your configuration</p> 
       <div class="codehilite"> 
        <pre><span class="n">spnego</span><span class="o">-</span><span class="n">client</span> <span class="p">{</span>
    <span class="n">com</span><span class="p">.</span><span class="n">sun</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">Krb5LoginModule</span> <span class="n">required</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">spnego</span><span class="o">-</span><span class="n">server</span> <span class="p">{</span>
    <span class="n">com</span><span class="p">.</span><span class="n">sun</span><span class="p">.</span><span class="n">security</span><span class="p">.</span><span class="n">auth</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">Krb5LoginModule</span> <span class="n">required</span>
    <span class="n">storeKey</span><span class="o">=</span><span class="nb">true</span>
    <span class="n">useKeyTab</span><span class="o">=</span><span class="nb">true</span>
    <span class="n">keyTab</span><span class="o">=</span><span class="s">&quot;file:///c:/tomcat/webapps/art/WEB-INF/art.keytab&quot;</span>
    <span class="n">principal</span><span class="o">=</span><span class="n">spnego</span><span class="p">;</span>
<span class="p">};</span>
</pre> 
       </div> </li> 
      <li> <p>Edit the ART_HOME\WEB-INF\<strong>web.xml</strong> file. Make the <strong>spnego.preauth.username</strong> and <strong>spnego.preauth.password</strong> parameters blank. i.e.</p> 
       <div class="codehilite"> 
        <pre><span class="nt">&lt;init-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>spnego.preauth.username<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;&lt;/param-value&gt;</span>
<span class="nt">&lt;/init-param&gt;</span>

<span class="nt">&lt;init-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>spnego.preauth.password<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;&lt;/param-value&gt;</span>
<span class="nt">&lt;/init-param&gt;</span>
</pre> 
       </div> </li> 
      <li> <p>Restart tomcat</p> </li> 
     </ul> 
     <p>You should have integrated authentication as before</p> 
     <h2 id="changing-the-spnego-user">Changing the spnego user</h2> 
     <p>If you need to change the AD user used to enable spnego access, first delete the spns associated with the application server and then create new ones for the desired user. An spn for a given server can only refer to a single user. To delete the spns, you can use syntax similar to the following</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">setspn</span> <span class="o">-</span><span class="n">D</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span> <span class="n">spnego</span>
    <span class="n">setspn</span> <span class="o">-</span><span class="n">D</span> <span class="n">HTTP</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">server</span><span class="p">.</span><span class="n">my</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">com</span> <span class="n">spnego</span>
</pre> 
     </div> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="application-logs">Application Logs</h1> 
     <p>ART uses the <a class="" href="http://logback.qos.ch/index.html" rel="nofollow">Logback</a> library for application logging. By default, application logging is done to standard output and includes logging on errors, warnings and information messages. The location of the logs or the amount of logging generated can be modified by making appropriate configuration changes to the ART_HOME\WEB-INF\classes\<strong>logback.xml</strong> file. Changes made to the logging configuration e.g. changing certain logging levels from &quot;info&quot; to &quot;debug&quot; automatically take effect after the configured <strong>scanPeriod</strong> (values can be specified as milliseconds, seconds, minutes or hours. See <a href="http://logback.qos.ch/manual/configuration.html" rel="nofollow">http://logback.qos.ch/manual/configuration.html</a> for more details).</p> 
     <p>In addition to being available on the application server's standard output log files, e.g stdout.log or catalina.log on Tomcat, application logs can also be viewed from within ART. This means that you don't need to have access to the application server machine in order to view application logs. </p> 
     <p>Application logs can be viewed from the <strong>Logs</strong> link on the top left corner of the Start Page. The most recent logs can be viewed by using the <strong>Jump to bottom</strong> button, or alternatively by scrolling manually to the bottom of the page. New logs are added to the bottom and you'll need to refresh the page to view them. Only administrators can view the logs. Also note that this page doesn't display all the logs ever generated by the application, only the most recent ones.</p> 
     <h2 id="sql-logging">SQL Logging</h2> 
     <p>You can set up logging for the sql that is generated when queries are run, e.g. to see the final sql generated, or to see how long queries take to execute. ART comes with the <a class="" href="http://code.google.com/p/log4jdbc/" rel="nofollow">log4jdbc</a> library that enables such logging. Take the following steps to configure sql logging.</p> 
     <ul> 
      <li>From the <strong>Admin Console</strong>, select the <strong>Datasources</strong> option and MODIFY the datasource you're interested in</li> 
      <li>Set the <strong>JDBC Driver</strong> to <code>net.sf.log4jdbc.DriverSpy</code></li> 
      <li>Modify the <strong>JDBC URL</strong> by prepending <strong>jdbc:log4</strong> to the existing url, e.g. resulting in a url like <code>jdbc:log4jdbc:mysql://localhost/mydb</code></li> 
      <li>Click on Submit to save the datasource details</li> 
      <li> <p>Modify the ART_HOME\WEB-INF\classes\<strong>logback.xml</strong> file and add loggers for the items you are interested in e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="o">&lt;</span><span class="n">logger</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;jdbc.sqltiming&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">level</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;info&quot;</span> <span class="o">/&gt;</span>
</pre> 
       </div> <p></p> </li> 
      <li> <p>The available loggers and what events they log can be found on the log4jdbc project home page, <a href="http://code.google.com/p/log4jdbc/" rel="nofollow">http://code.google.com/p/log4jdbc/</a></p> </li> 
      <li>That's all. The logging information will now be included in the application logs when queries are run against that datasource.</li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="tomcat-configuration">Tomcat Configuration</h1> 
     <h2 id="memory-options">Memory options</h2> 
     <p>If you are using Tomcat as the application server, there are some configuration items you can set to improve performance. This is mainly setting Tomcat to run in server mode and increasing the amount of memory available to Tomcat e.g. so that jobs don't run out of memory.</p> 
     <h3 id="windows">Windows</h3> 
     <p>If Tomcat was installed as a service</p> 
     <ul> 
      <li>Run the TOMCAT_HOME\bin\tomcat6w.exe (or similar file for your Tomcat version). This may need to be run as administrator.</li> 
      <li>In the Java tab, in the <strong>Java Virtual Machine</strong> section, set Tomcat to run in server mode by changing the jvm.dll to the one in the JDK e.g. C:\Program Files\Java\jdk1.6.0_21\jre\bin\server\jvm.dll (you'll need to install JDK for this)</li> 
      <li>Increase the amount of memory available to Tomcat by setting a value in the <strong>Maximum memory pool</strong> textbox e.g. 512 (this value shouldn't be very large compared to the total amount of memory available on the machine, otherwise the operating system and other applications may be starved of RAM)</li> 
     </ul> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li>The &quot;service user account&quot; configured to start and stop the Tomcat service needs to have appropriate permissions, otherwise you may get errors e.g. &quot;Connection to the ART Repository is not available&quot; when accessing ART. In particular, ART requires write access to the <code>ART_HOME\WEB-INF</code>, <code>ART_HOME\WEB-INF\templates</code>, <code>ART_HOME\WEB-INF\hsqldb</code>, <code>ART_HOME\export</code> and <code>ART_HOME\export\jobs</code> directories.</li> 
     </ul> 
     <p>If Tomcat is run from a batch file</p> 
     <ul> 
      <li> <p>Create a file named <strong>setenv.bat</strong> in the TOMCAT_HOME\bin directory (or edit if it exists) and set the configuration options in the JAVA_OPTS environment variable e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="n">set</span> <span class="n">JAVA_OPTS</span><span class="o">=-</span><span class="n">server</span> <span class="o">-</span><span class="n">Xmx512m</span>
</pre> 
       </div> </li> 
     </ul> 
     <h3 id="linux">Linux</h3> 
     <p>Create a file named <strong>setenv.sh</strong> in the TOMCAT_HOME/bin directory (or edit if it exists) and set the configuration options in the JAVA_OPTS environment variable e.g.</p> 
     <div class="codehilite"> 
      <pre>    <span class="n">export</span> <span class="n">JAVA_OPTS</span><span class="o">=</span><span class="s">&quot;-server -Xmx512m&quot;</span>
</pre> 
     </div> 
     <p><br /></p> 
     <h2 id="accessing-tomcat-via-apache">Accessing Tomcat via Apache</h2> 
     <p>You can use the Apache HTTP Server as a front end to your application that resides on Tomcat. This can be done for a number of reasons, including clustering or enabling access to the application from a more familiar url. </p> 
     <p>There are a number of ways to run Tomcat behind Apache.</p> 
     <h3 id="using-mod_proxy">Using mod_proxy</h3> 
     <ul> 
      <li> <p>Ensure the following lines in your Apache <strong>httpd.conf</strong> file are uncommented</p> 
       <div class="codehilite"> 
        <pre><span class="n">LoadModule</span> <span class="n">proxy_module</span> <span class="n">modules</span><span class="o">/</span><span class="n">mod_proxy</span><span class="p">.</span><span class="n">so</span>
<span class="n">LoadModule</span> <span class="n">proxy_http_module</span> <span class="n">modules</span><span class="o">/</span><span class="n">mod_proxy_http</span><span class="p">.</span><span class="n">so</span>
</pre> 
       </div> </li> 
      <li> <p>Add an item at the end of the <strong>httpd.conf</strong> file to indicate how ART will be accessed by users and how Apache will communicate with Tomcat e.g</p> 
       <div class="codehilite"> 
        <pre><span class="n">ProxyPass</span> <span class="o">/</span><span class="n">art</span> <span class="n">http</span><span class="o">:</span><span class="c1">//localhost:8080/art</span>
<span class="n">ProxyPassReverse</span> <span class="o">/</span><span class="n">art</span> <span class="n">http</span><span class="o">:</span><span class="c1">//localhost:8080/art</span>
</pre> 
       </div> </li> 
     </ul> 
     <p>That's it. Start Apache and Tomcat (the order of starting and stopping doesn't matter), and now you can access ART from the url localhost/art (i.e <code>&lt;apache-server&gt;/art</code>).</p> 
     <h3 id="using-mod_proxy_ajp">Using mod_proxy_ajp</h3> 
     <p>If you have Apache 2.2 and above, you can use mod_proxy_ajp</p> 
     <ul> 
      <li> <p>Ensure the following lines in your Apache <strong>httpd.conf</strong> file are uncommented</p> 
       <div class="codehilite"> 
        <pre><span class="n">LoadModule</span> <span class="n">proxy_ajp_module</span> <span class="n">modules</span><span class="o">/</span><span class="n">mod_proxy_ajp</span><span class="p">.</span><span class="n">so</span>
<span class="n">LoadModule</span> <span class="n">proxy_module</span> <span class="n">modules</span><span class="o">/</span><span class="n">mod_proxy</span><span class="p">.</span><span class="n">so</span>
<span class="n">LoadModule</span> <span class="n">proxy_http_module</span> <span class="n">modules</span><span class="o">/</span><span class="n">mod_proxy_http</span><span class="p">.</span><span class="n">so</span>
</pre> 
       </div> </li> 
      <li> <p>Ensure you have an AJP connector defined in the <strong>TOMCAT_HOME\conf\server.xml</strong> file e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="o">&lt;</span><span class="n">Connector</span> <span class="n">port</span><span class="o">=</span><span class="s">&quot;8009&quot;</span> <span class="n">protocol</span><span class="o">=</span><span class="s">&quot;AJP/1.3&quot;</span> <span class="n">redirectPort</span><span class="o">=</span><span class="s">&quot;8443&quot;</span> <span class="o">/&gt;</span>
</pre> 
       </div> </li> 
      <li> <p>Add an item at the end of the <strong>httpd.conf</strong> file to indicate how ART will be accessed by users and how Apache will communicate with Tomcat e.g</p> 
       <div class="codehilite"> 
        <pre><span class="n">ProxyPass</span> <span class="o">/</span><span class="n">art</span> <span class="n">ajp</span><span class="o">:</span><span class="c1">//localhost:8009/art</span>
<span class="n">ProxyPassReverse</span> <span class="o">/</span><span class="n">art</span> <span class="n">ajp</span><span class="o">:</span><span class="c1">//localhost:8009/art</span>
</pre> 
       </div> </li> 
      <li> <p>Note that this definition uses the ajp protocol and port 8009, which is the port defined for the AJP connector in Tomcat's server.xml</p> </li> 
     </ul> 
     <p>That's it. Start Apache and Tomcat (the order of starting and stopping doesn't matter), and now you can access ART from the url localhost/art (i.e <code>&lt;apache-server&gt;/art</code>).</p> 
     <h3 id="using-mod_jk">Using mod_jk</h3> 
     <p>If you need more powerful proxying features, you can download, configure and use the mod_jk connector. This is slightly more involving than the other two methods already mentioned and you can use the instructions available at <a href="http://www3.ntu.edu.sg/home/ehchua/programming/howto/ApachePlusTomcat_HowTo.html" rel="nofollow">http://www3.ntu.edu.sg/home/ehchua/programming/howto/ApachePlusTomcat_HowTo.html</a> to get it working.</p> 
     <p><strong>Note:</strong></p> 
     <ul> 
      <li> <p>For Ubuntu/Debian, instead of using LoadModule to enable the modules, use a2enmod from the command line, e.g.</p> 
       <div class="codehilite"> 
        <pre><span class="n">a2enmod</span> <span class="n">proxy_ajp</span>
<span class="n">a2enmod</span> <span class="n">proxy</span>
<span class="n">a2enmod</span> <span class="n">proxy_http</span>
</pre> 
       </div> </li> 
      <li> <p>Also for Ubuntu/Debian, add the ProxyPass and ProxyPassReverse items to the <strong>apache2.conf</strong> file instead of httpd.conf.</p> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="customizing-art">Customizing ART</h1> 
     <p>You can customize ART to fit your needs. </p> 
     <h2 id="using-live-files">Using live files</h2> 
     <p>You can customize or update ART files directly on the application server where ART is deployed. This may be especially useful for minor changes, which you want to make immediately available to the users of the application.</p> 
     <h3 id="setting-up-apache-ant">Setting up Apache Ant</h3> 
     <p>If you are going to customize the application source code, you may want to setup Apache Ant to make compiling your changes easier. To do this, take the following steps</p> 
     <ul> 
      <li>Download the Apache Ant zip package from <a href="http://ant.apache.org/" rel="nofollow">http://ant.apache.org/</a></li> 
      <li>Extract the zip file to C:\, or other directory of your choice. A new directory will be created e.g. C:\apache-ant-1.8.1</li> 
      <li>Add the Ant bin directory to the PATH environment variable e.g. <code>C:\apache-ant-1.8.1\bin</code></li> 
     </ul> 
     <h3 id="customizing-java-files">Customizing java files</h3> 
     <p>Java source files are contained in sub directories under the <strong>ART_HOME\WEB-INF\classes\art</strong> directory. To make customizations to these files, take the following steps.</p> 
     <ul> 
      <li>Configure Apache Ant as described above</li> 
      <li>Make changes to the desired .java files</li> 
      <li>Open a command prompt window and navigate to the <strong>TOMCAT_HOME\webapps\art</strong> directory</li> 
      <li>Type the command <code>ant compile</code></li> 
      <li>The modified .java files will be recompiled</li> 
      <li>Reload the ART application using the Tomcat Application Manager, or restart tomcat </li> 
      <li>The application will now use the modified source code</li> 
     </ul> 
     <h3 id="customizing-jsp-files">Customizing jsp files</h3> 
     <p>JSP files can be modified and results immediately viewable when the relevant page is refreshed. If you don't see the expected changes when you refresh the page, the page displayed may be a cached copy. You may need to clear the application server cache and the browser cache to ensure the page is refreshed. If using Tomcat, you can clear the tomcat cache by deleting the <strong>TOMCAT_HOME\work\Catalina\localhost\art</strong> directory or relevant sub directories under it. If using Firefox, you can clear the browser cache from the History | Clear Recent History menu.</p> 
     <h3 id="customizing-other-files">Customizing other files</h3> 
     <p>Other files that affect how ART works can also be modified. Examples include</p> 
     <ul> 
      <li>ART_HOME\css\<strong>art.css</strong> - Change the look of user interface items</li> 
      <li>ART_HOME\WEB-INF\classes\<strong>art-quartz.properties</strong> - Change quartz configuration items e.g. number of threads</li> 
      <li>ART_HOME\WEB-INF\classes\<strong>logback.xml</strong> - Change logging level for quartz or ART classes</li> 
     </ul> 
     <h3 id="updating-jasperreports">Updating jasperreports</h3> 
     <p>If you are using a version of iReport that is different from the jasperreports version contained in ART, you may want to update the jasperreports version contained in ART to match your iReport version. This may not be necessary, but would be useful if you encounter problems while running reports. Take the following steps to update the jasperreports library and template files.</p> 
     <ul> 
      <li>Download the required jasperreports .jar from the jasperreports sourceforge page, <a href="http://sourceforge.net/projects/jasperreports/files/jasperreports/">http://sourceforge.net/projects/jasperreports/files/jasperreports/</a> e.g download the file jasperreports-5.0.1.jar from the JasperReports 5.0.1 folder.</li> 
      <li>Ensure Apache Ant is set up as described above</li> 
      <li>Stop Tomcat</li> 
      <li>Backup the contents of the <strong>ART_HOME\WEB-INF\templates</strong> directory, where the jasperreport template files reside</li> 
      <li>Delete the jasperreports .jar file contained in the <strong>ART_HOME\WEB-INF\lib</strong> directory</li> 
      <li>Copy the just downloaded jasperreports .jar file to the <strong>ART_HOME\WEB-INF\lib</strong> directory</li> 
      <li>Open a command prompt window and navigate to the ART_HOME directory</li> 
      <li>Type the command <code>ant clean-jasperreports</code></li> 
      <li>Type the command <code>ant compile-jasperreports</code></li> 
      <li>Restart Tomcat</li> 
     </ul> 
     <p>Your reports should now work properly.</p> 
     <h2 id="using-ant">Using Ant</h2> 
     <p>If you don't wish to modify the live files, e.g. you want to test the changes on a test server first, you can modify the files in another location and create an application .war file to deploy on your test environment, and possibly finally on your live environment.</p> 
     <h3 id="using-ant-without-an-ide">Using Ant without an IDE</h3> 
     <ul> 
      <li>Ensure Apache Ant is set up as described above</li> 
      <li>Unzip the <code>PACKAGE_PATH\art.war</code> e.g. unzip to a new directory <code>PACKAGE_PATH\art</code></li> 
      <li>Using a text editor, make modifications to the required files</li> 
      <li>Open a command prompt window and navigate to the <code>PACKAGE_PATH\art</code> directory</li> 
      <li>Type the command <code>ant war</code></li> 
      <li>A new file named art.war will be created in the <code>PACKAGE_PATH\art</code> directory. Deploy this file to your desired application server.</li> 
     </ul> 
     <h3 id="using-ant-with-netbeans">Using Ant with NetBeans</h3> 
     <p>Instead of using a text editor to make changes and Ant to compile and package the changes, you can use an IDE to do this. The following are sample steps using NetBeans 7.2.1.</p> 
     <ul> 
      <li>Unzip the <code>PACKAGE_PATH\art.war</code> file e.g. unzip to a new directory <code>PACKAGE_PATH\art</code>. You can unzip the war file the same way as any zip file, using an unzipping tool e.g. 7zip.</li> 
      <li>Create a directory to hold NetBeans project files e.g. <code>C:\MyNetBeansProjects\art</code></li> 
      <li>Open NetBeans</li> 
      <li>Select the <strong>File | New Project</strong> menu</li> 
      <li>Select the <strong>Java Web</strong> category and <strong>Web Application with Existing Sources</strong> project and click on the <strong>Next</strong> button</li> 
      <li>For the <strong>Location</strong> field, select the <code>PACKAGE_PATH\art</code> directory. For the Project Folder field, select the directory you created for this e.g. <code>C:\MyNetBeansProjects\art</code>. Click on the <strong>Next</strong> button.</li> 
      <li>Select the Server to use e.g. Apache Tomcat and Java EE version e.g. Java EE 6 Web. Click on the <strong>Next</strong> button.</li> 
      <li>The Existing Sources and Libaries dialog should be pre-populated correctly with the appropriate paths. Click on the <strong>Finish</strong> button. If prompted, choose to delete existing .class files.</li> 
      <li>Make changes to the files as appropriate</li> 
      <li>To test the changes, use the Run Project icon on the menu bar, or right click on the project in the Projects explorer and select Run.</li> 
      <li>To debug the code, set breakpoints as appropriate by clicking on the edge of the editor at the desired line of code and use the Debug Project icon on the menu bar or right click on the project and select Debug. If the debug process doesn't start with NetBeans indicating that it is waiting for tomcat to stop, open Task Manager and kill the java.exe process.</li> 
      <li>To generate a war file to deploy, right click on the project and select Clean and Build. The generated art.war file will be located in the <code>C:\MyNetBeansProjects\art\dist</code> directory. Deploy this file to your desired application server</li> 
     </ul> 
     <h2 id="using-maven">Using Maven</h2> 
     <p>You can take the following steps to modify ART source code, using Apache Maven as the build tool. ART source files with a maven structure will be found in the <code>PACKAGE_PATH\src</code> directory.</p> 
     <ul> 
      <li>Install Maven</li> 
      <li>Install a maven repository manager e.g. <a class="" href="http://www.sonatype.org/nexus/" rel="nofollow">Sonatype Nexus</a>. A repository manager is optional but greatly increases productivity.</li> 
     </ul> 
     <h3 id="using-maven-without-an-ide">Using Maven without an IDE</h3> 
     <ul> 
      <li>Using a text editor, make modifications to the required files</li> 
      <li>Open a command prompt window and navigate to the <code>PACKAGE_PATH\src\art-parent</code> directory</li> 
      <li>Type the command <code>mvn clean package</code></li> 
      <li>A new file named art.war will be created in the <code>PACKAGE_PATH\src\art-parent\art\target</code> directory. Deploy this file to your desired application server.</li> 
     </ul> 
     <h3 id="using-maven-with-netbeans">Using Maven with NetBeans</h3> 
     <p>The following are sample steps using NetBeans 7.2.1.</p> 
     <ul> 
      <li>Open NetBeans</li> 
      <li>Select the <strong>File | Open Project</strong> menu</li> 
      <li>Select the <code>PACKAGE_PATH\src\art-parent</code> directory in the left had panel, and click on the <strong>Open Required Projects</strong> box on the right hand panel. Click on the <strong>Open Project</strong> button.</li> 
      <li>Make changes to the files as appropriate</li> 
      <li>To test the changes, right click on the art project in the Projects explorer and select Run. Select the server on which to deploy the application and click on OK.</li> 
      <li>To generate a war file to deploy, right click on the Parent project and select Clean and Build. The generated art.war file will be located in the <code>PACKAGE_PATH\src\art-parent\art\target</code> directory. Deploy this file to your desired application server</li> 
     </ul> 
     <h3 id="using-maven-with-eclipse">Using Maven with Eclipse</h3> 
     <p>The following are sample steps using Eclipse Juno (4.2) SR2.</p> 
     <ul> 
      <li>Download the Eclipse IDE for Java EE developers package</li> 
      <li>Unzip the package to your desired location e.g. C:\, to generate a C:\eclipse directory. Run the C:\eclipse\eclipse.exe file.</li> 
      <li>Ensure you have an internet connection</li> 
      <li>Select the <strong>Help | Eclipse Marketplace</strong> menu</li> 
      <li>On the Search tab, in the Find field, type maven and hit enter</li> 
      <li>Find the &quot;Maven Integration for Eclipse&quot; plugin (m2e by eclipse.org) and click on the Install button</li> 
      <li>Once the plugin installs, go back to the Eclipse Marketplace and again type maven in the Find field and hit enter</li> 
      <li>Find the &quot;Maven Integration for Eclipse WTP&quot; plugin (m2e-wtp by eclipse.org) and click on the Install button.</li> 
      <li>Create a directory to hold eclipse workspace files e.g. <code>C:\MyEclipseWorkspaces\art</code></li> 
      <li>In Eclipse, select the <strong>File | Switch Workspace | Other</strong> menu</li> 
      <li>Select the workspace folder you created e.g. <code>C:\MyEclipseWorkspaces\art</code> and click on OK. Wait for Eclipse to restart</li> 
      <li>Select the <strong>File | Import</strong> menu</li> 
      <li>Open the Maven group, select the <strong>Existing Maven Projects</strong> option and click on Next.</li> 
      <li>Set the <strong>Root Directory</strong> field to the <code>PACKAGE_PATH\src\art-parent</code> directory. This should list the art-parent project, with the artdbcp, artmail and art projects beneath it. If the projects aren't retrieved, try to hit the enter key after typing the path in the root directory field. Ensure all the projects are selected and click on Next.</li> 
      <li>Click on Finish in the final screen.</li> 
      <li>Click on the Restore icon in the left most panel to have the project windows displayed on the screen and close the welcome page.</li> 
      <li>Make changes to the files as appropriate</li> 
      <li>Ensure you have a JDK installed</li> 
      <li>Select the <strong>Window | Preferences</strong> menu. Expand the <strong>Java</strong> group and select the <strong>Installed JREs</strong> option. In the right hand panel, select the default JRE and click on the Edit button. Set the <strong>JRE home</strong> field to a JDK folder e.g. <code>C:\Program Files\Java\jdk1.6.0_39</code>. Instead of editing the default JRE you can also use the Add button to add a new one and then check it as the default workspace JRE.</li> 
      <li>Right click on the art-parent project and select the <strong>Run As | Run Configurations</strong> menu. Select the <strong>Maven Build</strong> option, and then click on the <strong>New launch configuration</strong> icon at the top of the list. Give a <strong>Name</strong> to the configuration e.g. package and set the <strong>Base directory</strong> to the <code>PACKAGE_PATH\src\art-parent</code> directory. In the <strong>Goals</strong> field, type <code>clean package</code>. In the JRE tab, ensure the JRE selected is the one defined earlier. Click on the Apply button. To generate a war file immediately, click on the Run button.</li> 
      <li>To test changes, set up a server. See <a href="https://github.com/OneBusAway/onebusaway/wiki/Setting-Up-a-Tomcat-Server-in-Eclipse" rel="nofollow">https://github.com/OneBusAway/onebusaway/wiki/Setting-Up-a-Tomcat-Server-in-Eclipse</a> . Convert the art webapp project to a Dymanic Web Module and run the application. See <a href="https://wiki.base22.com/display/btg/How+to+create+a+Maven+web+app+and+deploy+to+Tomcat+-+fast" rel="nofollow">https://wiki.base22.com/display/btg/How+to+create+a+Maven+web+app+and+deploy+to+Tomcat+-+fast</a></li> 
      <li>To generate a war file to deploy, click on the drop down on the <strong>Run As</strong> icon in the menu bar, and select the configuration you created e.g. package. The generated art.war file will be located in the <code>PACKAGE_PATH\src\art-parent\art\target</code> directory. Deploy this file to your desired application server</li> 
     </ul> 
     <h3 id="compiling-under-java-7">Compiling under Java 7</h3> 
     <p>The artdbcp module of ART will only compile on JDK 1.6. When artdbcp code is recompiled, e.g. with a maven command to clean and regenerate all the ART modules, a JDK 1.6 compiler is needed. If you aren't using an IDE, ensure the javac file in the system path is a 1.6 version. You can use the command <code>javac -version</code> to confirm this. If you are using Eclipse, ensure the Installed JRE set as the default for the workspace points to a JDK 1.6 directory. If you are using NetBeans, use the Tools | Java Platforms menu and add a location to a JDK 1.6 directory. After that, right click on the projects one by one, select the Properties menu and select the 1.6 JDK in the Build &gt; Compile section.</p> 
     <p>If you don't have a JDK 1.6 version installed, edit the <code>PACKAGE_PATH\src\art-parent\artdbcp\src\main\java\art\dbcp</code>\<strong>EnhancedConnection.java</strong> file by uncommenting the JDK 1.7 methods. You should then be able to compile the project using a JDK 1.7 compiler.</p> 
     <h2 id="custom-export-path">Custom Export Path</h2> 
     <p>By default, if the output for a query creates a file e.g. pdf, this file is stored in the <strong>ART_HOME\export</strong> directory. You can designate a different directory to be used as the export path e.g. to a location on the application server that contains more disk space. To do this on Tomcat, take the following steps.</p> 
     <ul> 
      <li>Create a directory named <strong>META-INF</strong> under the <strong>ART_HOME</strong> location e.g. C:\tomcat\webapps\art\META-INF</li> 
      <li> <p>Under this META-INF directory, create a file named <strong>context.xml</strong> with the following contents</p> 
       <div class="codehilite"> 
        <pre><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="nt">&lt;Context&gt;</span>
<span class="nt">&lt;Environment</span> <span class="na">name=</span><span class="s">&quot;REPORT_EXPORT_DIRECTORY&quot;</span> <span class="na">override=</span><span class="s">&quot;false&quot;</span> <span class="na">type=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="na">value=</span><span class="s">&quot;\\server\path\&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;WatchedResource&gt;</span>WEB-INF/web.xml<span class="nt">&lt;/WatchedResource&gt;</span>
<span class="nt">&lt;/Context&gt;</span>
</pre> 
       </div> </li> 
      <li> <p>Set the <strong>value</strong> attribute to your desired path</p> </li> 
     </ul> 
    </div> 
   </div> 
   <div> 
    <div class="markdown_content"> 
     <!--NewPage--> 
     <h1 id="support">Support</h1> 
     <ul> 
      <li>If you have any questions or comments, post these on the ART Help Discussion forum, <a href="http://sourceforge.net/p/art/discussion/352129/">http://sourceforge.net/p/art/discussion/352129/</a></li> 
     </ul> 
     <h2 id="resources">Resources</h2> 
     <table border="1"> 
      <thead> 
       <tr> 
        <th>Item</th> 
        <th>Resource</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td><strong>Hex colour codes</strong></td> 
        <td><a href="http://www.w3schools.com/html/html_colors.asp" rel="nofollow">http://www.w3schools.com/html/html_colors.asp</a></td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
   </div> 
   <p></p> 
  </div>  
 </body>
</html>