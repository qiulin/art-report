/**
 * Copyright 2001-2013 Enrico Liboni <eliboni@users.sourceforge.net>
 *
 * This file is part of ART.
 *
 * ART is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, version 2 of the License.
 *
 * ART is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ART. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Display logging info generated by application (logback logs)
 * Code mainly from logback-demo ViewLastLog.java
 */
package art.servlets;

import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.html.HTMLLayout;
import ch.qos.logback.classic.html.UrlCssBuilder;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.spi.LoggingEvent;
import ch.qos.logback.core.read.CyclicBufferAppender;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author logback project
 */
public class ViewLogs extends HttpServlet {

	private static final long serialVersionUID = 1L;
	Logger logger = LoggerFactory.getLogger(ViewLogs.class);
	CyclicBufferAppender<ILoggingEvent> cyclicBufferAppender;
	HTMLLayout layout;
//	static String PATTERN = "%d%thread%level%logger{25}%mdc{userid}%msg";
//	static String PATTERN = "%date%level%logger{0}%msg";
	static String PATTERN = "%date%level%logger%msg";
	private final String CYCLIC_BUFFER_APPENDER_NAME = "CYCLIC"; //name of cyclic appender in logback.xml
	UrlCssBuilder cssBuilder;

	@Override
	public void init() throws ServletException {
		LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
		initialize(lc);
		super.init();
	}

	void reacquireCBA() {
		LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
		cyclicBufferAppender = (CyclicBufferAppender<ILoggingEvent>) context.getLogger(
				Logger.ROOT_LOGGER_NAME).getAppender(CYCLIC_BUFFER_APPENDER_NAME);
	}

	private void printLogs(PrintWriter output) {
		int count = -1;
		if (cyclicBufferAppender != null) {
			count = cyclicBufferAppender.getLength();
		}

		if (count == -1) {
			output.append("<tr><td>Failed to locate CyclicBufferAppender</td></tr>\r\n");
		} else if (count == 0) {
			output.append("<tr><td>No logging events to display</td></tr>\r\n");
		} else {
			LoggingEvent le;
			for (int i = 0; i < count; i++) {
				le = (LoggingEvent) cyclicBufferAppender.get(i);
				output.append(layout.doLayout(le) + "\r\n");
			}
		}
	}

	private void initialize(LoggerContext context) {
		logger.debug("Initializing ViewLogs Servlet");

		cyclicBufferAppender = (CyclicBufferAppender<ILoggingEvent>) context.getLogger(
				Logger.ROOT_LOGGER_NAME).getAppender(CYCLIC_BUFFER_APPENDER_NAME);

		layout = new HTMLLayout();
		layout.setContext(context);
		layout.setPattern(PATTERN);
		layout.setTitle("ART - Logs");
		layout.start();

		cssBuilder = new UrlCssBuilder();
		layout.setCssBuilder(cssBuilder); //cssbuilder must be set before call to layout.getfileheader
	}

	public boolean isResetResistant() {
		return false;
	}

	public void onStop(LoggerContext arg0) {
	}

	/**
	 * Processes requests for both HTTP
	 * <code>GET</code> and
	 * <code>POST</code> methods.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		response.setContentType("text/html;charset=UTF-8");

		reacquireCBA();
		PrintWriter out = response.getWriter();
		try {
			String contextPath = request.getContextPath();
			cssBuilder.setUrl(contextPath + "/css/logback.css");
			out.append(layout.getFileHeader());
			out.append("<h2>Recent Logging Events</h2>");
			out.append("<table class=\"nav\">");
			out.append("<tr><td class=\"sexy\"><a href=\"" + contextPath
					+ "/app/reports.do\" class=\"sexy\">Main Page</a></td></tr>");
			out.append("<tr><td class=\"sexy\"><a href=\"#bottom\" class=\"sexy\">Jump to bottom</a></td></tr>");
			out.append("</table>");

			out.append("<div class=\"content_full\">");
			out.append(layout.getPresentationHeader());

			printLogs(out);

			out.append(layout.getPresentationFooter());

			out.append("<a name=\"bottom\" />");
			out.append("</div>");

			out.append(layout.getFileFooter());

			out.flush();
		} finally {
			out.close();
		}
	}

	// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
	/**
	 * Handles the HTTP
	 * <code>GET</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Handles the HTTP
	 * <code>POST</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Returns a short description of the servlet.
	 *
	 * @return a String containing servlet description
	 */
	@Override
	public String getServletInfo() {
		return "Display logging info generated by application";
	}// </editor-fold>
}
